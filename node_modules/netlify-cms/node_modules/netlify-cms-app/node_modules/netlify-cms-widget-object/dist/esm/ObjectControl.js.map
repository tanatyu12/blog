{"version":3,"sources":["../../src/ObjectControl.js"],"names":["styleStrings","nestedObjectControl","objectWidgetTopBarContainer","lengths","objectWidgetTopBarContainerPadding","ObjectControl","React","Component","constructor","props","field","fields","get","List","isList","forEach","componentValidate","setState","collapsed","state","multiFields","singleField","map","f","idx","controlFor","shouldComponentUpdate","key","value","onChangeObject","onValidateObject","clearFieldErrors","metadata","fieldsErrors","EditorControl","editorControl","controlRef","fieldName","fieldValue","Map","isMap","bind","render","forID","classNameWrapper","forList","css","cx","handleCollapseToggle","renderFields","PropTypes","func","isRequired","oneOfType","node","object","bool","string","resolveWidget","ImmutablePropTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { ClassNames } from '@emotion/core';\nimport { Map, List } from 'immutable';\nimport { ObjectWidgetTopBar, lengths } from 'netlify-cms-ui-default';\n\nconst styleStrings = {\n  nestedObjectControl: `\n    padding: 6px 14px 14px;\n    border-top: 0;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  `,\n  objectWidgetTopBarContainer: `\n    padding: ${lengths.objectWidgetTopBarContainerPadding}\n  `,\n};\n\nexport default class ObjectControl extends React.Component {\n  componentValidate = {};\n\n  static propTypes = {\n    onChangeObject: PropTypes.func.isRequired,\n    onValidateObject: PropTypes.func.isRequired,\n    value: PropTypes.oneOfType([PropTypes.node, PropTypes.object, PropTypes.bool]),\n    field: PropTypes.object,\n    forID: PropTypes.string,\n    classNameWrapper: PropTypes.string.isRequired,\n    forList: PropTypes.bool,\n    controlRef: PropTypes.func,\n    editorControl: PropTypes.func.isRequired,\n    resolveWidget: PropTypes.func.isRequired,\n    clearFieldErrors: PropTypes.func.isRequired,\n    fieldsErrors: ImmutablePropTypes.map.isRequired,\n  };\n\n  static defaultProps = {\n    value: Map(),\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: false,\n    };\n  }\n\n  /*\n   * Always update so that each nested widget has the option to update. This is\n   * required because ControlHOC provides a default `shouldComponentUpdate`\n   * which only updates if the value changes, but every widget must be allowed\n   * to override this.\n   */\n  shouldComponentUpdate() {\n    return true;\n  }\n\n  validate = () => {\n    const { field } = this.props;\n    let fields = field.get('field') || field.get('fields');\n    fields = List.isList(fields) ? fields : List([fields]);\n    fields.forEach(field => {\n      if (field.get('widget') === 'hidden') return;\n      this.componentValidate[field.get('name')]();\n    });\n  };\n\n  controlFor(field, key) {\n    const {\n      value,\n      onChangeObject,\n      onValidateObject,\n      clearFieldErrors,\n      metadata,\n      fieldsErrors,\n      editorControl: EditorControl,\n      controlRef,\n    } = this.props;\n\n    if (field.get('widget') === 'hidden') {\n      return null;\n    }\n    const fieldName = field.get('name');\n    const fieldValue = value && Map.isMap(value) ? value.get(fieldName) : value;\n\n    return (\n      <EditorControl\n        key={key}\n        field={field}\n        value={fieldValue}\n        onChange={onChangeObject}\n        clearFieldErrors={clearFieldErrors}\n        fieldsMetaData={metadata}\n        fieldsErrors={fieldsErrors}\n        onValidate={onValidateObject}\n        processControlRef={controlRef && controlRef.bind(this)}\n        controlRef={controlRef}\n      />\n    );\n  }\n\n  handleCollapseToggle = () => {\n    this.setState({ collapsed: !this.state.collapsed });\n  };\n\n  renderFields = (multiFields, singleField) => {\n    if (multiFields) {\n      return multiFields.map((f, idx) => this.controlFor(f, idx));\n    }\n    return this.controlFor(singleField);\n  };\n\n  render() {\n    const { field, forID, classNameWrapper, forList } = this.props;\n    const { collapsed } = this.state;\n    const multiFields = field.get('fields');\n    const singleField = field.get('field');\n\n    if (multiFields || singleField) {\n      return (\n        <ClassNames>\n          {({ css, cx }) => (\n            <div\n              id={forID}\n              className={cx(\n                classNameWrapper,\n                css`\n                  ${styleStrings.objectWidgetTopBarContainer}\n                `,\n                {\n                  [css`\n                    ${styleStrings.nestedObjectControl}\n                  `]: forList,\n                },\n              )}\n            >\n              {forList ? null : (\n                <ObjectWidgetTopBar\n                  collapsed={collapsed}\n                  onCollapseToggle={this.handleCollapseToggle}\n                />\n              )}\n              {collapsed ? null : this.renderFields(multiFields, singleField)}\n            </div>\n          )}\n        </ClassNames>\n      );\n    }\n\n    return <h3>No field(s) defined for this widget</h3>;\n  }\n}\n"],"file":"ObjectControl.js"}