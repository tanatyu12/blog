{"version":3,"sources":["../../src/NumberControl.js"],"names":["ValidationErrorTypes","PRESENCE","PATTERN","RANGE","CUSTOM","NumberControl","React","Component","e","valueType","props","field","get","onChange","value","parseFloat","target","parseInt","isNaN","t","hasPattern","min","max","error","type","message","fieldLabel","minValue","maxValue","render","classNameWrapper","forID","setActiveStyle","setInactiveStyle","step","handleChange","ImmutablePropTypes","map","isRequired","PropTypes","func","string","node","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nconst ValidationErrorTypes = {\n  PRESENCE: 'PRESENCE',\n  PATTERN: 'PATTERN',\n  RANGE: 'RANGE',\n  CUSTOM: 'CUSTOM',\n};\n\nexport default class NumberControl extends React.Component {\n  static propTypes = {\n    field: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    classNameWrapper: PropTypes.string.isRequired,\n    setActiveStyle: PropTypes.func.isRequired,\n    setInactiveStyle: PropTypes.func.isRequired,\n    value: PropTypes.node,\n    forID: PropTypes.string,\n    valueType: PropTypes.string,\n    step: PropTypes.number,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    t: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    value: '',\n  };\n\n  handleChange = e => {\n    const valueType = this.props.field.get('valueType');\n    const { onChange } = this.props;\n    const value = valueType === 'float' ? parseFloat(e.target.value) : parseInt(e.target.value, 10);\n\n    if (!isNaN(value)) {\n      onChange(value);\n    } else {\n      onChange('');\n    }\n  };\n\n  isValid = () => {\n    const { field, value, t } = this.props;\n    const hasPattern = !!field.get('pattern', false);\n    const min = field.get('min', false);\n    const max = field.get('max', false);\n    let error;\n\n    // Pattern overrides min/max logic always:\n    if (hasPattern) {\n      return true;\n    }\n\n    switch (true) {\n      case min !== false && max !== false && (value < min || value > max):\n        error = {\n          type: ValidationErrorTypes.RANGE,\n          message: t('editor.editorControlPane.widget.range', {\n            fieldLabel: field.get('label', field.get('name')),\n            minValue: min,\n            maxValue: max,\n          }),\n        };\n        break;\n      case min !== false && value < min:\n        error = {\n          type: ValidationErrorTypes.RANGE,\n          message: t('editor.editorControlPane.widget.min', {\n            fieldLabel: field.get('label', field.get('name')),\n            minValue: min,\n          }),\n        };\n        break;\n      case max !== false && value > max:\n        error = {\n          type: ValidationErrorTypes.RANGE,\n          message: t('editor.editorControlPane.widget.max', {\n            fieldLabel: field.get('label', field.get('name')),\n            maxValue: max,\n          }),\n        };\n        break;\n      default:\n        return true;\n    }\n\n    return { error };\n  };\n\n  render() {\n    const { field, value, classNameWrapper, forID, setActiveStyle, setInactiveStyle } = this.props;\n    const min = field.get('min', '');\n    const max = field.get('max', '');\n    const step = field.get('step', field.get('valueType') === 'int' ? 1 : '');\n    return (\n      <input\n        type=\"number\"\n        id={forID}\n        className={classNameWrapper}\n        onFocus={setActiveStyle}\n        onBlur={setInactiveStyle}\n        value={value || ''}\n        step={step}\n        min={min}\n        max={max}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n"],"file":"NumberControl.js"}