{"version":3,"sources":["../../src/AuthenticationPage.js"],"names":["LoginButtonIcon","Icon","GitLabAuthenticationPage","React","Component","e","preventDefault","auth","authenticate","provider","scope","err","data","setState","loginError","toString","props","onLogin","componentDidMount","authType","config","getIn","ImplicitAuthenticator","base_url","auth_endpoint","app_id","clearHash","completeAuth","NetlifyAuthenticator","site_id","document","location","host","split","siteId","authEndpoint","render","inProgress","handleLogin","state","get","PropTypes","func","isRequired","bool","string","ImmutablePropTypes","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport styled from '@emotion/styled';\nimport { NetlifyAuthenticator, ImplicitAuthenticator } from 'netlify-cms-lib-auth';\nimport { AuthenticationPage, Icon } from 'netlify-cms-ui-default';\n\nconst LoginButtonIcon = styled(Icon)`\n  margin-right: 18px;\n`;\n\nexport default class GitLabAuthenticationPage extends React.Component {\n  static propTypes = {\n    onLogin: PropTypes.func.isRequired,\n    inProgress: PropTypes.bool,\n    base_url: PropTypes.string,\n    siteId: PropTypes.string,\n    authEndpoint: PropTypes.string,\n    config: ImmutablePropTypes.map,\n    clearHash: PropTypes.func,\n  };\n\n  state = {};\n\n  componentDidMount() {\n    const authType = this.props.config.getIn(['backend', 'auth_type']);\n    if (authType === 'implicit') {\n      this.auth = new ImplicitAuthenticator({\n        base_url: this.props.config.getIn(['backend', 'base_url'], 'https://gitlab.com'),\n        auth_endpoint: this.props.config.getIn(['backend', 'auth_endpoint'], 'oauth/authorize'),\n        app_id: this.props.config.getIn(['backend', 'app_id']),\n        clearHash: this.props.clearHash,\n      });\n      // Complete implicit authentication if we were redirected back to from the provider.\n      this.auth.completeAuth((err, data) => {\n        if (err) {\n          this.setState({ loginError: err.toString() });\n          return;\n        }\n        this.props.onLogin(data);\n      });\n    } else {\n      this.auth = new NetlifyAuthenticator({\n        base_url: this.props.base_url,\n        site_id:\n          document.location.host.split(':')[0] === 'localhost'\n            ? 'cms.netlify.com'\n            : this.props.siteId,\n        auth_endpoint: this.props.authEndpoint,\n      });\n    }\n  }\n\n  handleLogin = e => {\n    e.preventDefault();\n    this.auth.authenticate({ provider: 'gitlab', scope: 'api' }, (err, data) => {\n      if (err) {\n        this.setState({ loginError: err.toString() });\n        return;\n      }\n      this.props.onLogin(data);\n    });\n  };\n\n  render() {\n    const { inProgress, config } = this.props;\n    return (\n      <AuthenticationPage\n        onLogin={this.handleLogin}\n        loginDisabled={inProgress}\n        loginErrorMessage={this.state.loginError}\n        logoUrl={config.get('logo_url')}\n        renderButtonContent={() => (\n          <React.Fragment>\n            <LoginButtonIcon type=\"gitlab\" /> {inProgress ? 'Logging in...' : 'Login with GitLab'}\n          </React.Fragment>\n        )}\n      />\n    );\n  }\n}\n"],"file":"AuthenticationPage.js"}