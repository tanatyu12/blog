{"version":3,"sources":["../../src/API.js"],"names":["API","constructor","config","req","unsentRequest","withHeaders","token","Authorization","withRoot","api_root","withAuthorizationHeaders","withTimestamp","buildRequest","performRequest","p","catch","err","Promise","reject","APIError","message","format","formatter","res","Error","json","contentType","headers","get","text","blob","mapEntries","catchFormatErrors","expectingOk","expectingFormat","body","responseFormats","status","ok","isJSON","parseResponse","request","then","responseToJSON","responseToText","requestJSON","repoURL","permissions","project_access","group_access","access_level","WRITE_ACCESS","path","sha","ref","branch","parseText","cacheKey","cachedFile","localForage","getItem","result","url","encodeURIComponent","params","cache","responseToBlob","setItem","index","parseInt","pageCount","pageSize","count","linksRaw","links","split","map","str","trim","linkStr","keyStr","match","fromURL","replace","update","list","actions","keySeq","flatMap","key","Cursor","create","meta","data","getCursorFromHeaders","withMethod","getCursor","all","cursor","entries","action","fetchCursor","first","last","next","prev","currentIndex","newIndex","reversedLinks","k","v","reversableActions","reversedActions","updateStore","store","setIn","set","firstPageCursor","lastPageLink","getIn","fetchCursorAndEntries","files","filter","type","reverse","reverseCursor","link","newCursor","per_page","initialEntries","push","has","newEntries","resolve","Base64","encode","decode","item","commitMessage","updateFile","author","commitAuthor","content","toBase64","raw","file_path","encoding","commitParams","commit_message","name","email","author_name","author_email","method","JSON","stringify","uploaded","newEntry","file","uploadAndCommit","options","withParams","repo"],"mappings":"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","sourcesContent":["import { localForage, unsentRequest, then, APIError, Cursor } from 'netlify-cms-lib-util';\nimport { Base64 } from 'js-base64';\nimport { fromJS, List, Map } from 'immutable';\nimport { flow, partial, result } from 'lodash';\n\nexport default class API {\n  constructor(config) {\n    this.api_root = config.api_root || 'https://gitlab.com/api/v4';\n    this.token = config.token || false;\n    this.branch = config.branch || 'master';\n    this.repo = config.repo || '';\n    this.repoURL = `/projects/${encodeURIComponent(this.repo)}`;\n  }\n\n  withAuthorizationHeaders = req =>\n    unsentRequest.withHeaders(this.token ? { Authorization: `Bearer ${this.token}` } : {}, req);\n\n  buildRequest = req =>\n    flow([\n      unsentRequest.withRoot(this.api_root),\n      this.withAuthorizationHeaders,\n      unsentRequest.withTimestamp,\n    ])(req);\n\n  request = async req =>\n    flow([\n      this.buildRequest,\n      unsentRequest.performRequest,\n      p => p.catch(err => Promise.reject(new APIError(err.message, null, 'GitLab'))),\n    ])(req);\n\n  catchFormatErrors = (format, formatter) => res => {\n    try {\n      return formatter(res);\n    } catch (err) {\n      throw new Error(\n        `Response cannot be parsed into the expected format (${format}): ${err.message}`,\n      );\n    }\n  };\n\n  responseFormats = fromJS({\n    json: async res => {\n      const contentType = res.headers.get('Content-Type');\n      if (contentType !== 'application/json' && contentType !== 'text/json') {\n        throw new Error(`${contentType} is not a valid JSON Content-Type`);\n      }\n      return res.json();\n    },\n    text: async res => res.text(),\n    blob: async res => res.blob(),\n  }).mapEntries(([format, formatter]) => [format, this.catchFormatErrors(format, formatter)]);\n\n  parseResponse = async (res, { expectingOk = true, expectingFormat = 'text' }) => {\n    let body;\n    try {\n      const formatter = this.responseFormats.get(expectingFormat, false);\n      if (!formatter) {\n        throw new Error(`${expectingFormat} is not a supported response format.`);\n      }\n      body = await formatter(res);\n    } catch (err) {\n      throw new APIError(err.message, res.status, 'GitLab');\n    }\n    if (expectingOk && !res.ok) {\n      const isJSON = expectingFormat === 'json';\n      throw new APIError(isJSON && body.message ? body.message : body, res.status, 'GitLab');\n    }\n    return body;\n  };\n\n  responseToJSON = res => this.parseResponse(res, { expectingFormat: 'json' });\n  responseToBlob = res => this.parseResponse(res, { expectingFormat: 'blob' });\n  responseToText = res => this.parseResponse(res, { expectingFormat: 'text' });\n  requestJSON = req => this.request(req).then(this.responseToJSON);\n  requestText = req => this.request(req).then(this.responseToText);\n\n  user = () => this.requestJSON('/user');\n\n  WRITE_ACCESS = 30;\n  hasWriteAccess = () =>\n    this.requestJSON(this.repoURL).then(({ permissions }) => {\n      const { project_access, group_access } = permissions;\n      if (project_access && project_access.access_level >= this.WRITE_ACCESS) {\n        return true;\n      }\n      if (group_access && group_access.access_level >= this.WRITE_ACCESS) {\n        return true;\n      }\n      return false;\n    });\n\n  readFile = async (path, sha, { ref = this.branch, parseText = true } = {}) => {\n    const cacheKey = parseText ? `gl.${sha}` : `gl.${sha}.blob`;\n    const cachedFile = sha ? await localForage.getItem(cacheKey) : null;\n    if (cachedFile) {\n      return cachedFile;\n    }\n    const result = await this.request({\n      url: `${this.repoURL}/repository/files/${encodeURIComponent(path)}/raw`,\n      params: { ref },\n      cache: 'no-store',\n    }).then(parseText ? this.responseToText : this.responseToBlob);\n    if (sha) {\n      localForage.setItem(cacheKey, result);\n    }\n    return result;\n  };\n\n  getCursorFromHeaders = headers => {\n    // indices and page counts are assumed to be zero-based, but the\n    // indices and page counts returned from GitLab are one-based\n    const index = parseInt(headers.get('X-Page'), 10) - 1;\n    const pageCount = parseInt(headers.get('X-Total-Pages'), 10) - 1;\n    const pageSize = parseInt(headers.get('X-Per-Page'), 10);\n    const count = parseInt(headers.get('X-Total'), 10);\n    const linksRaw = headers.get('Link');\n    const links = List(linksRaw.split(','))\n      .map(str => str.trim().split(';'))\n      .map(([linkStr, keyStr]) => [\n        keyStr.match(/rel=\"(.*?)\"/)[1],\n        unsentRequest.fromURL(\n          linkStr\n            .trim()\n            .match(/<(.*?)>/)[1]\n            .replace(/\\+/g, '%20'),\n        ),\n      ])\n      .update(list => Map(list));\n    const actions = links\n      .keySeq()\n      .flatMap(key =>\n        (key === 'prev' && index > 0) ||\n        (key === 'next' && index < pageCount) ||\n        (key === 'first' && index > 0) ||\n        (key === 'last' && index < pageCount)\n          ? [key]\n          : [],\n      );\n    return Cursor.create({\n      actions,\n      meta: { index, count, pageSize, pageCount },\n      data: { links },\n    });\n  };\n\n  getCursor = ({ headers }) => this.getCursorFromHeaders(headers);\n\n  // Gets a cursor without retrieving the entries by using a HEAD\n  // request\n  fetchCursor = req =>\n    flow([unsentRequest.withMethod('HEAD'), this.request, then(this.getCursor)])(req);\n  fetchCursorAndEntries = req =>\n    flow([\n      unsentRequest.withMethod('GET'),\n      this.request,\n      p => Promise.all([p.then(this.getCursor), p.then(this.responseToJSON)]),\n      then(([cursor, entries]) => ({ cursor, entries })),\n    ])(req);\n  fetchRelativeCursor = async (cursor, action) => this.fetchCursor(cursor.data.links[action]);\n\n  reversableActions = Map({\n    first: 'last',\n    last: 'first',\n    next: 'prev',\n    prev: 'next',\n  });\n\n  reverseCursor = cursor => {\n    const pageCount = cursor.meta.get('pageCount', 0);\n    const currentIndex = cursor.meta.get('index', 0);\n    const newIndex = pageCount - currentIndex;\n\n    const links = cursor.data.get('links', Map());\n    const reversedLinks = links.mapEntries(([k, v]) => [this.reversableActions.get(k) || k, v]);\n\n    const reversedActions = cursor.actions.map(\n      action => this.reversableActions.get(action) || action,\n    );\n\n    return cursor.updateStore(store =>\n      store\n        .setIn(['meta', 'index'], newIndex)\n        .setIn(['data', 'links'], reversedLinks)\n        .set('actions', reversedActions),\n    );\n  };\n\n  // The exported listFiles and traverseCursor reverse the direction\n  // of the cursors, since GitLab's pagination sorts the opposite way\n  // we want to sort by default (it sorts by filename _descending_,\n  // while the CMS defaults to sorting by filename _ascending_, at\n  // least in the current GitHub backend). This should eventually be\n  // refactored.\n  listFiles = async path => {\n    const firstPageCursor = await this.fetchCursor({\n      url: `${this.repoURL}/repository/tree`,\n      params: { path, ref: this.branch },\n    });\n    const lastPageLink = firstPageCursor.data.getIn(['links', 'last']);\n    const { entries, cursor } = await this.fetchCursorAndEntries(lastPageLink);\n    return {\n      files: entries.filter(({ type }) => type === 'blob').reverse(),\n      cursor: this.reverseCursor(cursor),\n    };\n  };\n\n  traverseCursor = async (cursor, action) => {\n    const link = cursor.data.getIn(['links', action]);\n    const { entries, cursor: newCursor } = await this.fetchCursorAndEntries(link);\n    return { entries: entries.reverse(), cursor: this.reverseCursor(newCursor) };\n  };\n\n  listAllFiles = async path => {\n    const entries = [];\n    let { cursor, entries: initialEntries } = await this.fetchCursorAndEntries({\n      url: `${this.repoURL}/repository/tree`,\n      // Get the maximum number of entries per page\n      params: { path, ref: this.branch, per_page: 100 },\n    });\n    entries.push(...initialEntries);\n    while (cursor && cursor.actions.has('next')) {\n      const link = cursor.data.getIn(['links', 'next']);\n      const { cursor: newCursor, entries: newEntries } = await this.fetchCursorAndEntries(link);\n      entries.push(...newEntries);\n      cursor = newCursor;\n    }\n    return entries.filter(({ type }) => type === 'blob');\n  };\n\n  toBase64 = str => Promise.resolve(Base64.encode(str));\n  fromBase64 = str => Base64.decode(str);\n  uploadAndCommit = async (\n    item,\n    { commitMessage, updateFile = false, branch = this.branch, author = this.commitAuthor },\n  ) => {\n    const content = await result(item, 'toBase64', partial(this.toBase64, item.raw));\n    const file_path = item.path.replace(/^\\//, '');\n    const action = updateFile ? 'update' : 'create';\n    const encoding = 'base64';\n\n    const commitParams = {\n      branch,\n      commit_message: commitMessage,\n      actions: [{ action, file_path, content, encoding }],\n    };\n    if (author) {\n      const { name, email } = author;\n      commitParams.author_name = name;\n      commitParams.author_email = email;\n    }\n\n    await this.request({\n      url: `${this.repoURL}/repository/commits`,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(commitParams),\n    });\n\n    return { ...item, uploaded: true };\n  };\n\n  persistFiles = (files, { commitMessage, newEntry }) =>\n    Promise.all(\n      files.map(file =>\n        this.uploadAndCommit(file, { commitMessage, updateFile: newEntry === false }),\n      ),\n    );\n\n  deleteFile = (path, commit_message, options = {}) => {\n    const branch = options.branch || this.branch;\n    const commitParams = { commit_message, branch };\n    if (this.commitAuthor) {\n      const { name, email } = this.commitAuthor;\n      commitParams.author_name = name;\n      commitParams.author_email = email;\n    }\n    return flow([\n      unsentRequest.withMethod('DELETE'),\n      // TODO: only send author params if they are defined.\n      unsentRequest.withParams(commitParams),\n      this.request,\n    ])(`${this.repoURL}/repository/files/${encodeURIComponent(path)}`);\n  };\n}\n"],"file":"API.js"}