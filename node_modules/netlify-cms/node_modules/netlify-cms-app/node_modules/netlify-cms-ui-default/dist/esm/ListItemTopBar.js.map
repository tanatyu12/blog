{"version":3,"sources":["../../src/ListItemTopBar.js"],"names":["TopBar","lengths","borderRadius","TopBarButton","buttons","button","colors","controlLabel","TopBarButtonSpan","withComponent","DragIconContainer","DragHandle","dragHandleHOC","Handle","ListItemTopBar","className","collapsed","onCollapseToggle","onRemove","propTypes","PropTypes","string","bool","func","StyledListItemTopBar"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,MAAM;AAAA;AAAA;AAAA,4EAIOC,gBAAQC,YAJf,OAI+BD,gBAAQC,YAJvC,uiGAAZ;AAQA,MAAMC,YAAY;AAAA;AAAA;AAAA,GACdC,gBAAQC,MADM,aAEPC,eAAOC,YAFA,krGAAlB;AAeA,MAAMC,gBAAgB,GAAGL,YAAY,CAACM,aAAb,CAA2B,MAA3B;AAAA;AAAA;AAAA,EAAzB;AAEA,MAAMC,iBAAiB,GAAG;AAAA;AAAA,wBAAOF,gBAAP;AAAA;AAAA;AAAA,EAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAvB;;AAKA,MAAMG,UAAU,GAAG,UAAuB;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AACxC,QAAMC,MAAM,GAAGD,aAAa,CAAC,MAC3B,6BAAC,iBAAD,QACE,6BAAC,aAAD;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,IAAI,EAAC;AAA9B,IADF,CAD0B,CAA5B;AAKA,SAAO,6BAAC,MAAD,OAAP;AACD,CAPD;;AASA,MAAME,cAAc,GAAG;AAAA,MAAGC,SAAH,SAAGA,SAAH;AAAA,MAAcC,SAAd,SAAcA,SAAd;AAAA,MAAyBC,gBAAzB,SAAyBA,gBAAzB;AAAA,MAA2CC,QAA3C,SAA2CA,QAA3C;AAAA,MAAqDN,aAArD,SAAqDA,aAArD;AAAA,SACrB,6BAAC,MAAD;AAAQ,IAAA,SAAS,EAAEG;AAAnB,KACGE,gBAAgB,GACf,6BAAC,YAAD;AAAc,IAAA,OAAO,EAAEA;AAAvB,KACE,6BAAC,aAAD;AAAM,IAAA,IAAI,EAAC,SAAX;AAAqB,IAAA,IAAI,EAAC,OAA1B;AAAkC,IAAA,SAAS,EAAED,SAAS,GAAG,OAAH,GAAa;AAAnE,IADF,CADe,GAIb,IALN,EAMGJ,aAAa,GAAG,6BAAC,UAAD;AAAY,IAAA,aAAa,EAAEA;AAA3B,IAAH,GAAkD,IANlE,EAOGM,QAAQ,GACP,6BAAC,YAAD;AAAc,IAAA,OAAO,EAAEA;AAAvB,KACE,6BAAC,aAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,IAAI,EAAC;AAAxB,IADF,CADO,GAIL,IAXN,CADqB;AAAA,CAAvB;;AAgBAJ,cAAc,CAACK,SAAf,GAA2B;AACzBJ,EAAAA,SAAS,EAAEK,mBAAUC,MADI;AAEzBL,EAAAA,SAAS,EAAEI,mBAAUE,IAFI;AAGzBL,EAAAA,gBAAgB,EAAEG,mBAAUG,IAHH;AAIzBL,EAAAA,QAAQ,EAAEE,mBAAUG;AAJK,CAA3B;AAOA,MAAMC,oBAAoB,GAAG;AAAA;AAAA,wBAAOV,cAAP;AAAA;AAAA;AAAA,EAAH,0EAIPb,gBAAQC,YAJD,OAIiBD,gBAAQC,YAJzB,2iGAA1B;eAQesB,oB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport Icon from './Icon';\nimport { colors, lengths, buttons } from './styles';\n\nconst TopBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  height: 26px;\n  border-radius: ${lengths.borderRadius} ${lengths.borderRadius} 0 0;\n  position: relative;\n`;\n\nconst TopBarButton = styled.button`\n  ${buttons.button};\n  color: ${colors.controlLabel};\n  background: transparent;\n  font-size: 16px;\n  line-height: 1;\n  padding: 0;\n  width: 32px;\n  text-align: center;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TopBarButtonSpan = TopBarButton.withComponent('span');\n\nconst DragIconContainer = styled(TopBarButtonSpan)`\n  width: 100%;\n  cursor: move;\n`;\n\nconst DragHandle = ({ dragHandleHOC }) => {\n  const Handle = dragHandleHOC(() => (\n    <DragIconContainer>\n      <Icon type=\"drag-handle\" size=\"small\" />\n    </DragIconContainer>\n  ));\n  return <Handle />;\n};\n\nconst ListItemTopBar = ({ className, collapsed, onCollapseToggle, onRemove, dragHandleHOC }) => (\n  <TopBar className={className}>\n    {onCollapseToggle ? (\n      <TopBarButton onClick={onCollapseToggle}>\n        <Icon type=\"chevron\" size=\"small\" direction={collapsed ? 'right' : 'down'} />\n      </TopBarButton>\n    ) : null}\n    {dragHandleHOC ? <DragHandle dragHandleHOC={dragHandleHOC} /> : null}\n    {onRemove ? (\n      <TopBarButton onClick={onRemove}>\n        <Icon type=\"close\" size=\"small\" />\n      </TopBarButton>\n    ) : null}\n  </TopBar>\n);\n\nListItemTopBar.propTypes = {\n  className: PropTypes.string,\n  collapsed: PropTypes.bool,\n  onCollapseToggle: PropTypes.func,\n  onRemove: PropTypes.func,\n};\n\nconst StyledListItemTopBar = styled(ListItemTopBar)`\n  display: flex;\n  justify-content: space-between;\n  height: 26px;\n  border-radius: ${lengths.borderRadius} ${lengths.borderRadius} 0 0;\n  position: relative;\n`;\n\nexport default StyledListItemTopBar;\n"],"file":"ListItemTopBar.js"}