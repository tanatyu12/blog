{"version":3,"sources":["../../src/ObjectWidgetTopBar.js"],"names":["TopBarContainer","colors","textFieldBorder","ExpandButtonContainer","props","hasHeading","ExpandButton","buttons","button","AddButton","Icon","ObjectWidgetTopBar","React","Component","renderAddUI","allowAdd","types","size","renderTypesDropdown","renderAddButton","label","map","type","idx","get","onAddType","onAdd","render","onCollapseToggle","collapsed","heading","PropTypes","bool","ImmutablePropTypes","list","func","node","string"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,eAAe;AAAA;AAAA;AAAA,2CAECC,eAAOC,eAFR,g1IAArB;;;;;;;;;;;AASA,MAAMC,qBAAqB;AAAA;AAAA;AAAA,GACvBC,KAAK,IACLA,KAAK,CAACC,UAAN,QAFuB,ywIAA3B;AAYA,MAAMC,YAAY;AAAA;AAAA;AAAA,GACdC,gBAAQC,MADM,i2IAAlB;AAWA,MAAMC,SAAS;AAAA;AAAA;AAAA,GACXF,gBAAQC,MADG,iIAUXE,aAVW,0xIAAf;;AAeA,MAAMC,kBAAN,SAAiCC,eAAMC,SAAvC,CAAiD;AAY/CC,EAAAA,WAAW,GAAG;AACZ,QAAI,CAAC,KAAKV,KAAL,CAAWW,QAAhB,EAA0B;AACxB,aAAO,IAAP;AACD;;AACD,QAAI,KAAKX,KAAL,CAAWY,KAAX,IAAoB,KAAKZ,KAAL,CAAWY,KAAX,CAAiBC,IAAjB,GAAwB,CAAhD,EAAmD;AACjD,aAAO,KAAKC,mBAAL,CAAyB,KAAKd,KAAL,CAAWY,KAApC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKG,eAAL,EAAP;AACD;AACF;;AAEDD,EAAAA,mBAAmB,CAACF,KAAD,EAAQ;AACzB,WACE,6BAAC,iBAAD;AACE,MAAA,YAAY,EAAE,MACZ,6BAAC,8BAAD,gBAA2B,KAAKZ,KAAL,CAAWgB,KAAtC;AAFJ,OAKGJ,KAAK,CAACK,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,KACT,6BAAC,sBAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,KAAK,EAAED,IAAI,CAACE,GAAL,CAAS,OAAT,EAAkBF,IAAI,CAACE,GAAL,CAAS,MAAT,CAAlB,CAFT;AAGE,MAAA,OAAO,EAAE,MAAM,KAAKpB,KAAL,CAAWqB,SAAX,CAAqBH,IAAI,CAACE,GAAL,CAAS,MAAT,CAArB;AAHjB,MADD,CALH,CADF;AAeD;;AAEDL,EAAAA,eAAe,GAAG;AAChB,WACE,6BAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKf,KAAL,CAAWsB;AAA/B,eACO,KAAKtB,KAAL,CAAWgB,KADlB,OACyB,6BAAC,aAAD;AAAM,MAAA,IAAI,EAAC,KAAX;AAAiB,MAAA,IAAI,EAAC;AAAtB,MADzB,CADF;AAKD;;AAEDO,EAAAA,MAAM,GAAG;AAAA,wBACiD,KAAKvB,KADtD;AAAA,UACCwB,gBADD,eACCA,gBADD;AAAA,UACmBC,SADnB,eACmBA,SADnB;AAAA,4CAC8BC,OAD9B;AAAA,UAC8BA,OAD9B,oCACwC,IADxC;AAGP,WACE,6BAAC,eAAD,QACE,6BAAC,qBAAD;AAAuB,MAAA,UAAU,EAAE,CAAC,CAACA;AAArC,OACE,6BAAC,YAAD;AAAc,MAAA,OAAO,EAAEF;AAAvB,OACE,6BAAC,aAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,SAAS,EAAEC,SAAS,GAAG,OAAH,GAAa,MAAtD;AAA8D,MAAA,IAAI,EAAC;AAAnE,MADF,CADF,EAIGC,OAJH,CADF,EAOG,KAAKhB,WAAL,EAPH,CADF;AAWD;;AA/D8C;;gBAA3CH,kB,eACe;AACjBI,EAAAA,QAAQ,EAAEgB,mBAAUC,IADH;AAEjBhB,EAAAA,KAAK,EAAEiB,iCAAmBC,IAFT;AAGjBR,EAAAA,KAAK,EAAEK,mBAAUI,IAHA;AAIjBV,EAAAA,SAAS,EAAEM,mBAAUI,IAJJ;AAKjBP,EAAAA,gBAAgB,EAAEG,mBAAUI,IALX;AAMjBN,EAAAA,SAAS,EAAEE,mBAAUC,IANJ;AAOjBF,EAAAA,OAAO,EAAEC,mBAAUK,IAPF;AAQjBhB,EAAAA,KAAK,EAAEW,mBAAUM;AARA,C;;eAiEN1B,kB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\nimport Icon from './Icon';\nimport { colors, buttons } from './styles';\nimport Dropdown, { StyledDropdownButton, DropdownItem } from './Dropdown';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nconst TopBarContainer = styled.div`\n  align-items: center;\n  background-color: ${colors.textFieldBorder};\n  display: flex;\n  justify-content: space-between;\n  margin: 0 -14px;\n  padding: 13px;\n`;\n\nconst ExpandButtonContainer = styled.div`\n  ${props =>\n    props.hasHeading &&\n    css`\n      display: flex;\n      align-items: center;\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 1;\n    `};\n`;\n\nconst ExpandButton = styled.button`\n  ${buttons.button};\n  padding: 4px;\n  background-color: transparent;\n  color: inherit;\n\n  &:last-of-type {\n    margin-right: 4px;\n  }\n`;\n\nconst AddButton = styled.button`\n  ${buttons.button};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 2px 12px;\n  font-size: 12px;\n  font-weight: bold;\n  border-radius: 3px;\n\n  ${Icon} {\n    margin-left: 6px;\n  }\n`;\n\nclass ObjectWidgetTopBar extends React.Component {\n  static propTypes = {\n    allowAdd: PropTypes.bool,\n    types: ImmutablePropTypes.list,\n    onAdd: PropTypes.func,\n    onAddType: PropTypes.func,\n    onCollapseToggle: PropTypes.func,\n    collapsed: PropTypes.bool,\n    heading: PropTypes.node,\n    label: PropTypes.string,\n  };\n\n  renderAddUI() {\n    if (!this.props.allowAdd) {\n      return null;\n    }\n    if (this.props.types && this.props.types.size > 0) {\n      return this.renderTypesDropdown(this.props.types);\n    } else {\n      return this.renderAddButton();\n    }\n  }\n\n  renderTypesDropdown(types) {\n    return (\n      <Dropdown\n        renderButton={() => (\n          <StyledDropdownButton>Add {this.props.label} item</StyledDropdownButton>\n        )}\n      >\n        {types.map((type, idx) => (\n          <DropdownItem\n            key={idx}\n            label={type.get('label', type.get('name'))}\n            onClick={() => this.props.onAddType(type.get('name'))}\n          />\n        ))}\n      </Dropdown>\n    );\n  }\n\n  renderAddButton() {\n    return (\n      <AddButton onClick={this.props.onAdd}>\n        Add {this.props.label} <Icon type=\"add\" size=\"xsmall\" />\n      </AddButton>\n    );\n  }\n\n  render() {\n    const { onCollapseToggle, collapsed, heading = null } = this.props;\n\n    return (\n      <TopBarContainer>\n        <ExpandButtonContainer hasHeading={!!heading}>\n          <ExpandButton onClick={onCollapseToggle}>\n            <Icon type=\"chevron\" direction={collapsed ? 'right' : 'down'} size=\"small\" />\n          </ExpandButton>\n          {heading}\n        </ExpandButtonContainer>\n        {this.renderAddUI()}\n      </TopBarContainer>\n    );\n  }\n}\n\nexport default ObjectWidgetTopBar;\n"],"file":"ObjectWidgetTopBar.js"}