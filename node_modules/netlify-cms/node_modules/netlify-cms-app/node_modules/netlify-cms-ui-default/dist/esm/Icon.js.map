{"version":3,"sources":["../../src/Icon.js"],"names":["IconWrapper","props","size","rotation","getRotation","iconDirection","newDirection","rotations","right","down","left","up","degrees","sizes","xsmall","small","medium","large","Icon","type","direction","className","__html","icons","image","propTypes","PropTypes","string","isRequired","oneOf"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;AAEA,MAAMA,WAAW;AAAA;AAAA;AAAA,gDAGNC,KAAK,IAAIA,KAAK,CAACC,IAHT,cAILD,KAAK,IAAIA,KAAK,CAACC,IAJV,iBAKFD,KAAK,IAAK,UAASA,KAAK,CAACE,QAAS,GALhC,kxFAAjB;AAwBA;;;;;;;;;AAQA,MAAMC,WAAW,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACnD,MAAI,CAACD,aAAD,IAAkB,CAACC,YAAvB,EAAqC;AACnC,WAAO,MAAP;AACD;;AACD,QAAMC,SAAS,GAAG;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,IAAI,EAAE,GAAnB;AAAwBC,IAAAA,IAAI,EAAE,GAA9B;AAAmCC,IAAAA,EAAE,EAAE;AAAvC,GAAlB;AACA,QAAMC,OAAO,GAAGL,SAAS,CAACD,YAAD,CAAT,GAA0BC,SAAS,CAACF,aAAD,CAAnD;AACA,SAAQ,GAAEO,OAAQ,KAAlB;AACD,CAPD;;AASA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE,MADI;AAEZC,EAAAA,KAAK,EAAE,MAFK;AAGZC,EAAAA,MAAM,EAAE,MAHI;AAIZC,EAAAA,KAAK,EAAE;AAJK,CAAd;;AAOA,MAAMC,IAAI,GAAG;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,SAAT,QAASA,SAAT;AAAA,uBAAoBlB,IAApB;AAAA,MAAoBA,IAApB,0BAA2B,QAA3B;AAAA,MAAqCmB,SAArC,QAAqCA,SAArC;AAAA,SACX,6BAAC,WAAD;AACE,IAAA,SAAS,EAAEA,SADb;AAEE,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEC,eAAMJ,IAAN,EAAYK;AAAtB,KAF3B;AAGE,IAAA,IAAI,EAAEX,KAAK,CAACX,IAAD,CAAL,IAAeA,IAHvB;AAIE,IAAA,QAAQ,EAAEE,WAAW,CAACmB,eAAMJ,IAAN,EAAYC,SAAb,EAAwBA,SAAxB;AAJvB,IADW;AAAA,CAAb;;AASAF,IAAI,CAACO,SAAL,GAAiB;AACfN,EAAAA,IAAI,EAAEO,mBAAUC,MAAV,CAAiBC,UADR;AAEfR,EAAAA,SAAS,EAAEM,mBAAUG,KAAV,CAAgB,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,IAA1B,CAAhB,CAFI;AAGf3B,EAAAA,IAAI,EAAEwB,mBAAUC,MAHD;AAIfN,EAAAA,SAAS,EAAEK,mBAAUC;AAJN,CAAjB;;eAOe;AAAA;AAAA,wBAAOT,IAAP;AAAA;AAAA,E","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport icons from './Icon/icons';\n\nconst IconWrapper = styled.span`\n  display: inline-block;\n  line-height: 0;\n  width: ${props => props.size};\n  height: ${props => props.size};\n  transform: ${props => `rotate(${props.rotation})`};\n\n  & path:not(.no-fill),\n  & circle:not(.no-fill),\n  & polygon:not(.no-fill),\n  & rect:not(.no-fill) {\n    fill: currentColor;\n  }\n\n  & path.clipped {\n    fill: transparent;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\n/**\n * Calculates rotation for icons that have a `direction` property configured\n * in the imported icon definition object. If no direction is configured, a\n * neutral rotation value is returned.\n *\n * Returned value is a string of shape `${degrees}deg`, for use in a CSS\n * transform.\n */\nconst getRotation = (iconDirection, newDirection) => {\n  if (!iconDirection || !newDirection) {\n    return '0deg';\n  }\n  const rotations = { right: 90, down: 180, left: 270, up: 360 };\n  const degrees = rotations[newDirection] - rotations[iconDirection];\n  return `${degrees}deg`;\n};\n\nconst sizes = {\n  xsmall: '12px',\n  small: '18px',\n  medium: '24px',\n  large: '32px',\n};\n\nconst Icon = ({ type, direction, size = 'medium', className }) => (\n  <IconWrapper\n    className={className}\n    dangerouslySetInnerHTML={{ __html: icons[type].image }}\n    size={sizes[size] || size}\n    rotation={getRotation(icons[type].direction, direction)}\n  />\n);\n\nIcon.propTypes = {\n  type: PropTypes.string.isRequired,\n  direction: PropTypes.oneOf(['right', 'down', 'left', 'up']),\n  size: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default styled(Icon)``;\n"],"file":"Icon.js"}