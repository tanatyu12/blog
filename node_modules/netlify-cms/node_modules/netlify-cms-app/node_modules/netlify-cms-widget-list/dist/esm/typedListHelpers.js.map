{"version":3,"sources":["../../src/typedListHelpers.js"],"names":["TYPES_KEY","TYPE_KEY","DEFAULT_TYPE_KEY","getTypedFieldForValue","field","value","typeKey","resolveFieldKeyType","types","get","valueType","find","type","resolveFunctionForTypedField","getErrorMessageForTypedFieldAndValue","keyType","errorMessage"],"mappings":";;;;;;;;;;AAAO,MAAMA,SAAS,GAAG,OAAlB;;AACA,MAAMC,QAAQ,GAAG,SAAjB;;AACA,MAAMC,gBAAgB,GAAG,MAAzB;;;AAEA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,KAAtC,EAA6C;AAClD,QAAMC,OAAO,GAAGC,mBAAmB,CAACH,KAAD,CAAnC;AACA,QAAMI,KAAK,GAAGJ,KAAK,CAACK,GAAN,CAAUT,SAAV,CAAd;AACA,QAAMU,SAAS,GAAGL,KAAK,CAACI,GAAN,CAAUH,OAAV,CAAlB;AACA,SAAOE,KAAK,CAACG,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACH,GAAL,CAAS,MAAT,MAAqBC,SAAxC,CAAP;AACD;;AAEM,SAASG,4BAAT,CAAsCT,KAAtC,EAA6C;AAClD,QAAME,OAAO,GAAGC,mBAAmB,CAACH,KAAD,CAAnC;AACA,QAAMI,KAAK,GAAGJ,KAAK,CAACK,GAAN,CAAUT,SAAV,CAAd;AACA,SAAOK,KAAK,IAAI;AACd,UAAMK,SAAS,GAAGL,KAAK,CAACI,GAAN,CAAUH,OAAV,CAAlB;AACA,WAAOE,KAAK,CAACG,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACH,GAAL,CAAS,MAAT,MAAqBC,SAAxC,CAAP;AACD,GAHD;AAID;;AAEM,SAASH,mBAAT,CAA6BH,KAA7B,EAAoC;AACzC,SAAOA,KAAK,CAACK,GAAN,CAAUR,QAAV,EAAoBC,gBAApB,CAAP;AACD;;AAEM,SAASY,oCAAT,CAA8CV,KAA9C,EAAqDC,KAArD,EAA4D;AACjE,QAAMU,OAAO,GAAGR,mBAAmB,CAACH,KAAD,CAAnC;AACA,QAAMQ,IAAI,GAAGP,KAAK,CAACI,GAAN,CAAUM,OAAV,CAAb;AACA,MAAIC,YAAJ;;AACA,MAAI,CAACJ,IAAL,EAAW;AACTI,IAAAA,YAAY,GAAI,uBAAsBD,OAAQ,YAA9C;AACD,GAFD,MAEO;AACLC,IAAAA,YAAY,GAAI,4BAA2BD,OAAQ,gBAAeH,IAAK,GAAvE;AACD;;AACD,SAAOI,YAAP;AACD","sourcesContent":["export const TYPES_KEY = 'types';\nexport const TYPE_KEY = 'typeKey';\nexport const DEFAULT_TYPE_KEY = 'type';\n\nexport function getTypedFieldForValue(field, value) {\n  const typeKey = resolveFieldKeyType(field);\n  const types = field.get(TYPES_KEY);\n  const valueType = value.get(typeKey);\n  return types.find(type => type.get('name') === valueType);\n}\n\nexport function resolveFunctionForTypedField(field) {\n  const typeKey = resolveFieldKeyType(field);\n  const types = field.get(TYPES_KEY);\n  return value => {\n    const valueType = value.get(typeKey);\n    return types.find(type => type.get('name') === valueType);\n  };\n}\n\nexport function resolveFieldKeyType(field) {\n  return field.get(TYPE_KEY, DEFAULT_TYPE_KEY);\n}\n\nexport function getErrorMessageForTypedFieldAndValue(field, value) {\n  const keyType = resolveFieldKeyType(field);\n  const type = value.get(keyType);\n  let errorMessage;\n  if (!type) {\n    errorMessage = `Error: item has no '${keyType}' property`;\n  } else {\n    errorMessage = `Error: item has illegal '${keyType}' property: '${type}'`;\n  }\n  return errorMessage;\n}\n"],"file":"typedListHelpers.js"}