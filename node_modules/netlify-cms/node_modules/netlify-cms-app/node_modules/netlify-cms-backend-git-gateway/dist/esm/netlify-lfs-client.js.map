{"version":3,"sources":["../../src/netlify-lfs-client.js"],"names":["splitIntoLines","str","split","splitIntoWords","isNonEmptyString","withoutEmptyLines","trim","parsePointerFile","size","oid","rest","parseInt","sha","createPointerFile","removeGitAttributesCommentsFromLine","line","parseGitPatternAttribute","attributeString","includes","startsWith","slice","parseGitPatternAttributes","parseGitAttributesPatternLine","pattern","attributes","parseGitAttributesFileToPatternAttributePairs","getLargeMediaPatternsFromGitAttributesFile","filter","diff","merge","matchPath","path","patterns","some","matchBase","defaultContentHeaders","Accept","resourceExists","rootURL","makeAuthorizedRequest","response","url","method","headers","body","JSON","stringify","ok","status","getDownloadURL","t","transformImages","Object","keys","length","nf_resize","w","h","then","res","Promise","reject","blob","URL","createObjectURL","catch","err","console","error","resolve","getResourceDownloadURLArgs","clientConfig","objects","map","getResourceDownloadURLs","downloadURLArg","all","bind","uploadOperation","operation","transfers","getResourceUploadURLs","json","object","Error","message","actions","upload","href","uploadBlob","uploadURL","fetch","uploadResource","resource","existingFile","configureFn","config","fn","args","clientFns","getClient","key","configuredFns","enabled"],"mappings":";;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA,MAAMA,cAAc,GAAGC,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,IAAV,CAA9B;;AACA,MAAMC,cAAc,GAAGF,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU,MAAV,CAA9B;;AACA,MAAME,gBAAgB,GAAGH,GAAG,IAAIA,GAAG,KAAK,EAAxC;;AACA,MAAMI,iBAAiB,GAAG,oBAAK,CAAC,mBAAIJ,GAAG,IAAIA,GAAG,CAACK,IAAJ,EAAX,CAAD,EAAyB,sBAAOF,gBAAP,CAAzB,CAAL,CAA1B;AACO,MAAMG,gBAAgB,GAAG,oBAAK,CACnCP,cADmC,EAEnCK,iBAFmC,EAGnC,mBAAIF,cAAJ,CAHmC,uBAKnC;AAAA,MAAGK,IAAH,QAAGA,IAAH;AAAA,MAASC,GAAT,QAASA,GAAT;AAAA,MAAiBC,IAAjB;;AAAA;AACEF,IAAAA,IAAI,EAAEG,QAAQ,CAACH,IAAD,CADhB;AAEEI,IAAAA,GAAG,EAAEH,GAAG,CAACP,KAAJ,CAAU,GAAV,EAAe,CAAf;AAFP,KAGKQ,IAHL;AAAA,CALmC,CAAL,CAAzB;;;AAYA,MAAMG,iBAAiB,GAAG;AAAA,MAAGL,IAAH,SAAGA,IAAH;AAAA,MAASI,GAAT,SAASA,GAAT;AAAA,SAAoB;;aAExCA,GAAI;OACVJ,IAAK;CAHqB;AAAA,CAA1B,C,CAMP;AACA;;;;;AAEA,MAAMM,mCAAmC,GAAGC,IAAI,IAAIA,IAAI,CAACb,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAApD;;AAEA,MAAMc,wBAAwB,GAAGC,eAAe,IAAI;AAClD;AACA;AACA;AACA;AACA;AACA,MAAIA,eAAe,CAACC,QAAhB,CAAyB,GAAzB,CAAJ,EAAmC;AACjC,WAAOD,eAAe,CAACf,KAAhB,CAAsB,GAAtB,CAAP;AACD;;AACD,MAAIe,eAAe,CAACE,UAAhB,CAA2B,GAA3B,CAAJ,EAAqC;AACnC,WAAO,CAACF,eAAe,CAACG,KAAhB,CAAsB,CAAtB,CAAD,EAA2B,KAA3B,CAAP;AACD;;AACD,SAAO,CAACH,eAAD,EAAkB,IAAlB,CAAP;AACD,CAbD;;AAeA,MAAMI,yBAAyB,GAAG,oBAAK,CAAC,mBAAIL,wBAAJ,CAAD,sBAAL,CAAlC;AAEA,MAAMM,6BAA6B,GAAG,oBAAK,CACzCnB,cADyC,EAEzC;AAAA;AAAA,MAAEoB,OAAF;AAAA,MAAcC,UAAd;;AAAA,SAA8B,CAACD,OAAD,EAAUF,yBAAyB,CAACG,UAAD,CAAnC,CAA9B;AAAA,CAFyC,CAAL,CAAtC;AAKA,MAAMC,6CAA6C,GAAG,oBAAK,CACzDzB,cADyD,EAEzD,mBAAIc,mCAAJ,CAFyD,EAGzDT,iBAHyD,EAIzD,mBAAIiB,6BAAJ,CAJyD,CAAL,CAAtD;AAOO,MAAMI,0CAA0C,GAAG,oBAAK,CAC7DD,6CAD6D,EAE7D,uBACE;AACA;AAAA;AAAA,MAAEF,OAAF;AAAA,MAAWC,UAAX;;AAAA,SACEA,UAAU,CAACG,MAAX,KAAsB,KAAtB,IAA+BH,UAAU,CAACI,IAAX,KAAoB,KAAnD,IAA4DJ,UAAU,CAACK,KAAX,KAAqB,KADnF;AAAA,CAFF,CAF6D,EAO7D,mBAAI;AAAA;AAAA,MAAEN,OAAF;;AAAA,SAAeA,OAAf;AAAA,CAAJ,CAP6D,CAAL,CAAnD;;;AAUA,MAAMO,SAAS,GAAG,QAAeC,IAAf;AAAA,MAAGC,QAAH,SAAGA,QAAH;AAAA,SACvBA,QAAQ,CAACC,IAAT,CAAcV,OAAO,IAAI,wBAAUQ,IAAV,EAAgBR,OAAhB,EAAyB;AAAEW,IAAAA,SAAS,EAAE;AAAb,GAAzB,CAAzB,CADuB;AAAA,CAAlB,C,CAGP;AACA;;;;AAEA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,MAAM,EAAE,8BADoB;AAE5B,GAAC,cAAD,GAAkB;AAFU,CAA9B;;AAKA,MAAMC,cAAc,GAAG,0BAA6D;AAAA,MAApDC,OAAoD,UAApDA,OAAoD;AAAA,MAA3CC,qBAA2C,UAA3CA,qBAA2C;AAAA,MAAhB3B,GAAgB,UAAhBA,GAAgB;AAAA,MAAXJ,IAAW,UAAXA,IAAW;AAClF,QAAMgC,QAAQ,GAAG,MAAMD,qBAAqB,CAAC;AAC3CE,IAAAA,GAAG,EAAG,GAAEH,OAAQ,SAD2B;AAE3CI,IAAAA,MAAM,EAAE,MAFmC;AAG3CC,IAAAA,OAAO,EAAER,qBAHkC;AAI3CS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAErC,MAAAA,GAAG,EAAEG,GAAP;AAAYJ,MAAAA;AAAZ,KAAf;AAJqC,GAAD,CAA5C;;AAMA,MAAIgC,QAAQ,CAACO,EAAb,EAAiB;AACf,WAAO,IAAP;AACD;;AACD,MAAIP,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,WAAO,KAAP;AACD,GAZiF,CAclF;AACA;;AACD,CAhBD;;AAkBA,MAAMC,cAAc,GAAG;AAAA,MAAGX,OAAH,UAAGA,OAAH;AAAA,MAA6BY,CAA7B,UAAYC,eAAZ;AAAA,MAAgCZ,qBAAhC,UAAgCA,qBAAhC;AAAA,MAA2D3B,GAA3D,UAA2DA,GAA3D;AAAA,SACrB2B,qBAAqB,CAClB,GAAED,OAAQ,WAAU1B,GAAI,GACvBsC,CAAC,IAAIE,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeI,MAAf,GAAwB,CAA7B,GAAkC,cAAaJ,CAAC,CAACK,SAAU,MAAKL,CAAC,CAACM,CAAE,MAAKN,CAAC,CAACO,CAAE,EAA7E,GAAiF,EAClF,EAHkB,CAArB,CAKGC,IALH,CAKQC,GAAG,IAAKA,GAAG,CAACZ,EAAJ,GAASY,GAAT,GAAeC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAL/B,EAMGD,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACG,IAAJ,EANf,EAOGJ,IAPH,CAOQI,IAAI,IAAIC,GAAG,CAACC,eAAJ,CAAoBF,IAApB,CAPhB,EAQGG,KARH,CAQSC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,KAAsBN,OAAO,CAACS,OAAR,CAAgB,EAAhB,CARtC,CADqB;AAAA,CAAvB;;AAWA,MAAMC,0BAA0B,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC5D,SAAOZ,OAAO,CAACS,OAAR,CAAgBG,OAAO,CAACC,GAAR,CAAY;AAAA,QAAG7D,GAAH,UAAGA,GAAH;AAAA,WAAa,CAACA,GAAD,EAAM;AAAEA,MAAAA;AAAF,KAAN,CAAb;AAAA,GAAZ,CAAhB,CAAP;AACD,CAFD;;AAIA,MAAM8D,uBAAuB,GAAG,CAACH,YAAD,EAAeC,OAAf,KAC9BF,0BAA0B,CAACC,YAAD,EAAeC,OAAf,CAA1B,CACGd,IADH,CACQ,mBAAIiB,cAAc,IAAI1B,cAAc,CAAC0B,cAAD,CAApC,CADR,EAEGjB,IAFH,CAEQE,OAAO,CAACgB,GAAR,CAAYC,IAAZ,CAAiBjB,OAAjB,CAFR,CADF;;AAKA,MAAMkB,eAAe,GAAGN,OAAO,KAAK;AAClCO,EAAAA,SAAS,EAAE,QADuB;AAElCC,EAAAA,SAAS,EAAE,CAAC,OAAD,CAFuB;AAGlCR,EAAAA,OAAO,EAAEA,OAAO,CAACC,GAAR,CAAY;AAAA,QAAG7D,GAAH,UAAGA,GAAH;AAAA,QAAWF,IAAX;;AAAA,6BAA4BA,IAA5B;AAAkCD,MAAAA,GAAG,EAAEG;AAAvC;AAAA,GAAZ;AAHyB,CAAL,CAA/B;;AAMA,MAAMqE,qBAAqB,GAAG,eAA2CT,OAA3C,KAAuD;AAAA,MAA9ClC,OAA8C,UAA9CA,OAA8C;AAAA,MAArCC,qBAAqC,UAArCA,qBAAqC;AACnF,QAAMC,QAAQ,GAAG,MAAMD,qBAAqB,CAAC;AAC3CE,IAAAA,GAAG,EAAG,GAAEH,OAAQ,gBAD2B;AAE3CI,IAAAA,MAAM,EAAE,MAFmC;AAG3CC,IAAAA,OAAO,EAAER,qBAHkC;AAI3CS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAegC,eAAe,CAACN,OAAD,CAA9B;AAJqC,GAAD,CAA5C;AAMA,SAAO,CAAC,MAAMhC,QAAQ,CAAC0C,IAAT,EAAP,EAAwBV,OAAxB,CAAgCC,GAAhC,CAAoCU,MAAM,IAAI;AACnD,QAAIA,MAAM,CAACf,KAAX,EAAkB;AAChB,YAAM,IAAIgB,KAAJ,CAAUD,MAAM,CAACf,KAAP,CAAaiB,OAAvB,CAAN;AACD;;AACD,WAAOF,MAAM,CAACG,OAAP,CAAeC,MAAf,CAAsBC,IAA7B;AACD,GALM,CAAP;AAMD,CAbD;;AAeA,MAAMC,UAAU,GAAG,CAAClB,YAAD,EAAemB,SAAf,EAA0B5B,IAA1B,KACjB6B,KAAK,CAACD,SAAD,EAAY;AACfhD,EAAAA,MAAM,EAAE,KADO;AAEfE,EAAAA,IAAI,EAAEkB;AAFS,CAAZ,CADP;;AAMA,MAAM8B,cAAc,GAAG,OAAOrB,YAAP,UAAoCsB,QAApC,KAAiD;AAAA,MAA1BjF,GAA0B,UAA1BA,GAA0B;AAAA,MAArBJ,IAAqB,UAArBA,IAAqB;AACtE,QAAMsF,YAAY,GAAG,MAAMzD,cAAc,CAACkC,YAAD,EAAe;AAAE3D,IAAAA,GAAF;AAAOJ,IAAAA;AAAP,GAAf,CAAzC;;AACA,MAAIsF,YAAJ,EAAkB;AAChB,WAAOlF,GAAP;AACD;;AAJqE,iBAKlD,MAAMqE,qBAAqB,CAACV,YAAD,EAAe,CAAC;AAAE3D,IAAAA,GAAF;AAAOJ,IAAAA;AAAP,GAAD,CAAf,CALuB;AAAA;AAAA,QAK/DkF,SAL+D;;AAMtE,QAAMD,UAAU,CAAClB,YAAD,EAAemB,SAAf,EAA0BG,QAA1B,CAAhB;AACA,SAAOjF,GAAP;AACD,CARD,C,CAUA;AACA;;;AAEA,MAAMmF,WAAW,GAAG,CAACC,MAAD,EAASC,EAAT,KAAgB;AAAA,oCAAIC,IAAJ;AAAIA,IAAAA,IAAJ;AAAA;;AAAA,SAAaD,EAAE,CAACD,MAAD,EAAS,GAAGE,IAAZ,CAAf;AAAA,CAApC;;AACA,MAAMC,SAAS,GAAG;AAChB9D,EAAAA,cADgB;AAEhB4C,EAAAA,qBAFgB;AAGhBP,EAAAA,uBAHgB;AAIhBJ,EAAAA,0BAJgB;AAKhBrB,EAAAA,cALgB;AAMhB2C,EAAAA,cANgB;AAOhB9D,EAAAA;AAPgB,CAAlB;;AASO,MAAMsE,SAAS,GAAG7B,YAAY,IAAI;AACvC,SAAO,oBAAK,CACVnB,MAAM,CAACC,IADG,EAEV,mBAAIgD,GAAG,IAAI,CAACA,GAAD,EAAMN,WAAW,CAACxB,YAAD,EAAe4B,SAAS,CAACE,GAAD,CAAxB,CAAjB,CAAX,CAFU,uBAIVC,aAAa,sBACRA,aADQ;AAEXtE,IAAAA,QAAQ,EAAEuC,YAAY,CAACvC,QAFZ;AAGXuE,IAAAA,OAAO,EAAEhC,YAAY,CAACgC;AAHX,IAJH,CAAL,EASJJ,SATI,CAAP;AAUD,CAXM","sourcesContent":["import { filter, flow, fromPairs, map } from 'lodash/fp';\nimport minimatch from 'minimatch';\n\n//\n// Pointer file parsing\n\nconst splitIntoLines = str => str.split('\\n');\nconst splitIntoWords = str => str.split(/\\s+/g);\nconst isNonEmptyString = str => str !== '';\nconst withoutEmptyLines = flow([map(str => str.trim()), filter(isNonEmptyString)]);\nexport const parsePointerFile = flow([\n  splitIntoLines,\n  withoutEmptyLines,\n  map(splitIntoWords),\n  fromPairs,\n  ({ size, oid, ...rest }) => ({\n    size: parseInt(size),\n    sha: oid.split(':')[1],\n    ...rest,\n  }),\n]);\n\nexport const createPointerFile = ({ size, sha }) => `\\\nversion https://git-lfs.github.com/spec/v1\noid sha256:${sha}\nsize ${size}\n`;\n\n//\n// .gitattributes file parsing\n\nconst removeGitAttributesCommentsFromLine = line => line.split('#')[0];\n\nconst parseGitPatternAttribute = attributeString => {\n  // There are three kinds of attribute settings:\n  // - a key=val pair sets an attribute to a specific value\n  // - a key without a value and a leading hyphen sets an attribute to false\n  // - a key without a value and no leading hyphen sets an attribute\n  //   to true\n  if (attributeString.includes('=')) {\n    return attributeString.split('=');\n  }\n  if (attributeString.startsWith('-')) {\n    return [attributeString.slice(1), false];\n  }\n  return [attributeString, true];\n};\n\nconst parseGitPatternAttributes = flow([map(parseGitPatternAttribute), fromPairs]);\n\nconst parseGitAttributesPatternLine = flow([\n  splitIntoWords,\n  ([pattern, ...attributes]) => [pattern, parseGitPatternAttributes(attributes)],\n]);\n\nconst parseGitAttributesFileToPatternAttributePairs = flow([\n  splitIntoLines,\n  map(removeGitAttributesCommentsFromLine),\n  withoutEmptyLines,\n  map(parseGitAttributesPatternLine),\n]);\n\nexport const getLargeMediaPatternsFromGitAttributesFile = flow([\n  parseGitAttributesFileToPatternAttributePairs,\n  filter(\n    // eslint-disable-next-line no-unused-vars\n    ([pattern, attributes]) =>\n      attributes.filter === 'lfs' && attributes.diff === 'lfs' && attributes.merge === 'lfs',\n  ),\n  map(([pattern]) => pattern),\n]);\n\nexport const matchPath = ({ patterns }, path) =>\n  patterns.some(pattern => minimatch(path, pattern, { matchBase: true }));\n\n//\n// API interactions\n\nconst defaultContentHeaders = {\n  Accept: 'application/vnd.git-lfs+json',\n  ['Content-Type']: 'application/vnd.git-lfs+json',\n};\n\nconst resourceExists = async ({ rootURL, makeAuthorizedRequest }, { sha, size }) => {\n  const response = await makeAuthorizedRequest({\n    url: `${rootURL}/verify`,\n    method: 'POST',\n    headers: defaultContentHeaders,\n    body: JSON.stringify({ oid: sha, size }),\n  });\n  if (response.ok) {\n    return true;\n  }\n  if (response.status === 404) {\n    return false;\n  }\n\n  // TODO: what kind of error to throw here? APIError doesn't seem\n  // to fit\n};\n\nconst getDownloadURL = ({ rootURL, transformImages: t, makeAuthorizedRequest }, { sha }) =>\n  makeAuthorizedRequest(\n    `${rootURL}/origin/${sha}${\n      t && Object.keys(t).length > 0 ? `?nf_resize=${t.nf_resize}&w=${t.w}&h=${t.h}` : ''\n    }`,\n  )\n    .then(res => (res.ok ? res : Promise.reject(res)))\n    .then(res => res.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .catch(err => console.error(err) || Promise.resolve(''));\n\nconst getResourceDownloadURLArgs = (clientConfig, objects) => {\n  return Promise.resolve(objects.map(({ sha }) => [sha, { sha }]));\n};\n\nconst getResourceDownloadURLs = (clientConfig, objects) =>\n  getResourceDownloadURLArgs(clientConfig, objects)\n    .then(map(downloadURLArg => getDownloadURL(downloadURLArg)))\n    .then(Promise.all.bind(Promise));\n\nconst uploadOperation = objects => ({\n  operation: 'upload',\n  transfers: ['basic'],\n  objects: objects.map(({ sha, ...rest }) => ({ ...rest, oid: sha })),\n});\n\nconst getResourceUploadURLs = async ({ rootURL, makeAuthorizedRequest }, objects) => {\n  const response = await makeAuthorizedRequest({\n    url: `${rootURL}/objects/batch`,\n    method: 'POST',\n    headers: defaultContentHeaders,\n    body: JSON.stringify(uploadOperation(objects)),\n  });\n  return (await response.json()).objects.map(object => {\n    if (object.error) {\n      throw new Error(object.error.message);\n    }\n    return object.actions.upload.href;\n  });\n};\n\nconst uploadBlob = (clientConfig, uploadURL, blob) =>\n  fetch(uploadURL, {\n    method: 'PUT',\n    body: blob,\n  });\n\nconst uploadResource = async (clientConfig, { sha, size }, resource) => {\n  const existingFile = await resourceExists(clientConfig, { sha, size });\n  if (existingFile) {\n    return sha;\n  }\n  const [uploadURL] = await getResourceUploadURLs(clientConfig, [{ sha, size }]);\n  await uploadBlob(clientConfig, uploadURL, resource);\n  return sha;\n};\n\n//\n// Create Large Media client\n\nconst configureFn = (config, fn) => (...args) => fn(config, ...args);\nconst clientFns = {\n  resourceExists,\n  getResourceUploadURLs,\n  getResourceDownloadURLs,\n  getResourceDownloadURLArgs,\n  getDownloadURL,\n  uploadResource,\n  matchPath,\n};\nexport const getClient = clientConfig => {\n  return flow([\n    Object.keys,\n    map(key => [key, configureFn(clientConfig, clientFns[key])]),\n    fromPairs,\n    configuredFns => ({\n      ...configuredFns,\n      patterns: clientConfig.patterns,\n      enabled: clientConfig.enabled,\n    }),\n  ])(clientFns);\n};\n"],"file":"netlify-lfs-client.js"}