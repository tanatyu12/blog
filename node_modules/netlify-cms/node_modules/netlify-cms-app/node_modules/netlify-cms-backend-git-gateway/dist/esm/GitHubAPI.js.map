{"version":3,"sources":["../../src/GitHubAPI.js"],"names":["API","GithubAPI","constructor","config","api_root","tokenPromise","commitAuthor","repoURL","hasWriteAccess","getBranch","then","catch","error","status","message","APIError","undefined","console","getRequestHeaders","headers","jwtToken","baseHeader","Authorization","urlFor","path","options","cacheBuster","Date","getTime","params","key","push","encodeURIComponent","length","join","user","Promise","resolve","request","url","responseStatus","fetch","response","contentType","get","match","parseJsonResponse","text","ok","reject","msg","commit","changeTree","commitParams","tree","sha","parents","parentSha","author","date","toISOString","method","body","JSON","stringify"],"mappings":"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","sourcesContent":["import { API as GithubAPI } from 'netlify-cms-backend-github';\nimport { APIError } from 'netlify-cms-lib-util';\n\nexport default class API extends GithubAPI {\n  constructor(config) {\n    super(config);\n    this.api_root = config.api_root;\n    this.tokenPromise = config.tokenPromise;\n    this.commitAuthor = config.commitAuthor;\n    this.repoURL = '';\n  }\n\n  hasWriteAccess() {\n    return this.getBranch()\n      .then(() => true)\n      .catch(error => {\n        if (error.status === 401) {\n          if (error.message === 'Bad credentials') {\n            throw new APIError(\n              'Git Gateway Error: Please ask your site administrator to reissue the Git Gateway token.',\n              error.status,\n              'Git Gateway',\n            );\n          } else {\n            return false;\n          }\n        } else if (\n          error.status === 404 &&\n          (error.message === undefined || error.message === 'Unable to locate site configuration')\n        ) {\n          throw new APIError(\n            `Git Gateway Error: Please make sure Git Gateway is enabled on your site.`,\n            error.status,\n            'Git Gateway',\n          );\n        } else {\n          console.error('Problem fetching repo data from Git Gateway');\n          throw error;\n        }\n      });\n  }\n\n  getRequestHeaders(headers = {}) {\n    return this.tokenPromise().then(jwtToken => {\n      const baseHeader = {\n        Authorization: `Bearer ${jwtToken}`,\n        'Content-Type': 'application/json',\n        ...headers,\n      };\n\n      return baseHeader;\n    });\n  }\n\n  urlFor(path, options) {\n    const cacheBuster = new Date().getTime();\n    const params = [`ts=${cacheBuster}`];\n    if (options.params) {\n      for (const key in options.params) {\n        params.push(`${key}=${encodeURIComponent(options.params[key])}`);\n      }\n    }\n    if (params.length) {\n      path += `?${params.join('&')}`;\n    }\n    return this.api_root + path;\n  }\n\n  user() {\n    return Promise.resolve(this.commitAuthor);\n  }\n\n  request(path, options = {}) {\n    const url = this.urlFor(path, options);\n    let responseStatus;\n    return this.getRequestHeaders(options.headers || {})\n      .then(headers => fetch(url, { ...options, headers }))\n      .then(response => {\n        responseStatus = response.status;\n        const contentType = response.headers.get('Content-Type');\n        if (contentType && contentType.match(/json/)) {\n          return this.parseJsonResponse(response);\n        }\n        const text = response.text();\n        if (!response.ok) {\n          return Promise.reject(text);\n        }\n        return text;\n      })\n      .catch(error => {\n        throw new APIError(error.message || error.msg, responseStatus, 'Git Gateway');\n      });\n  }\n\n  commit(message, changeTree) {\n    const commitParams = {\n      message,\n      tree: changeTree.sha,\n      parents: changeTree.parentSha ? [changeTree.parentSha] : [],\n    };\n\n    if (this.commitAuthor) {\n      commitParams.author = {\n        ...this.commitAuthor,\n        date: new Date().toISOString(),\n      };\n    }\n\n    return this.request('/git/commits', {\n      method: 'POST',\n      body: JSON.stringify(commitParams),\n    });\n  }\n}\n"],"file":"GitHubAPI.js"}