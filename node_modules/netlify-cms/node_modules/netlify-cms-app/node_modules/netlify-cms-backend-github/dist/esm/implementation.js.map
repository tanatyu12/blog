{"version":3,"sources":["../../src/implementation.js"],"names":["MAX_CONCURRENT_DOWNLOADS","PREVIEW_CONTEXT_KEYWORDS","isPreviewContext","context","previewContext","some","keyword","includes","getPreviewStatus","statuses","config","getIn","find","GitHub","constructor","options","files","sem","promises","forEach","file","push","Promise","resolve","take","api","readFile","path","sha","then","data","leave","catch","err","console","error","all","loadedEntries","filter","loadedEntry","proxied","API","Error","repo","branch","trim","api_root","token","squash_merges","authComponent","AuthenticationPage","restoreUser","user","authenticate","state","initialWorkflowStatus","isCollab","hasWriteAccess","message","stripIndent","logout","getToken","entriesByFolder","collection","extension","listFiles","get","name","endsWith","fetchFiles","entriesByFiles","map","collectionFile","label","getEntry","slug","getMedia","size","download_url","url","URL","pathname","match","search","slice","id","displayURL","href","persistEntry","entry","mediaFiles","persistFiles","persistMedia","mediaFile","value","fileObj","createObjectURL","deleteFile","commitMessage","unpublishedEntries","listUnpublishedBranches","branches","ref","split","pop","readUnpublishedBranchFile","undefined","metaData","objects","fileData","isModification","unpublishedEntry","getDeployPreview","retrieveMetadata","getStatuses","pr","head","deployStatus","target_url","status","updateUnpublishedEntryStatus","newStatus","deleteUnpublishedEntry","publishUnpublishedEntry"],"mappings":"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","sourcesContent":["import trimStart from 'lodash/trimStart';\nimport semaphore from 'semaphore';\nimport { stripIndent } from 'common-tags';\nimport AuthenticationPage from './AuthenticationPage';\nimport API from './API';\n\nconst MAX_CONCURRENT_DOWNLOADS = 10;\n\n/**\n * Keywords for inferring a status that will provide a deploy preview URL.\n */\nconst PREVIEW_CONTEXT_KEYWORDS = ['deploy'];\n\n/**\n * Check a given status context string to determine if it provides a link to a\n * deploy preview. Checks for an exact match against `previewContext` if given,\n * otherwise checks for inclusion of a value from `PREVIEW_CONTEXT_KEYWORDS`.\n */\nfunction isPreviewContext(context, previewContext) {\n  if (previewContext) {\n    return context === previewContext;\n  }\n  return PREVIEW_CONTEXT_KEYWORDS.some(keyword => context.includes(keyword));\n}\n\n/**\n * Retrieve a deploy preview URL from an array of statuses. By default, a\n * matching status is inferred via `isPreviewContext`.\n */\nfunction getPreviewStatus(statuses, config) {\n  const previewContext = config.getIn(['backend', 'preview_context']);\n  return statuses.find(({ context }) => {\n    return isPreviewContext(context, previewContext);\n  });\n}\n\nexport default class GitHub {\n  constructor(config, options = {}) {\n    this.config = config;\n    this.options = {\n      proxied: false,\n      API: null,\n      ...options,\n    };\n\n    if (!this.options.proxied && config.getIn(['backend', 'repo']) == null) {\n      throw new Error('The GitHub backend needs a \"repo\" in the backend configuration.');\n    }\n\n    this.api = this.options.API || null;\n\n    this.repo = config.getIn(['backend', 'repo'], '');\n    this.branch = config.getIn(['backend', 'branch'], 'master').trim();\n    this.api_root = config.getIn(['backend', 'api_root'], 'https://api.github.com');\n    this.token = '';\n    this.squash_merges = config.getIn(['backend', 'squash_merges']);\n  }\n\n  authComponent() {\n    return AuthenticationPage;\n  }\n\n  restoreUser(user) {\n    return this.authenticate(user);\n  }\n\n  async authenticate(state) {\n    this.token = state.token;\n    this.api = new API({\n      token: this.token,\n      branch: this.branch,\n      repo: this.repo,\n      api_root: this.api_root,\n      squash_merges: this.squash_merges,\n      initialWorkflowStatus: this.options.initialWorkflowStatus,\n    });\n    const user = await this.api.user();\n    const isCollab = await this.api.hasWriteAccess().catch(error => {\n      error.message = stripIndent`\n        Repo \"${this.repo}\" not found.\n\n        Please ensure the repo information is spelled correctly.\n\n        If the repo is private, make sure you're logged into a GitHub account with access.\n\n        If your repo is under an organization, ensure the organization has granted access to Netlify\n        CMS.\n      `;\n      throw error;\n    });\n\n    // Unauthorized user\n    if (!isCollab) {\n      throw new Error('Your GitHub user account does not have access to this repo.');\n    }\n\n    // Authorized user\n    return { ...user, token: state.token };\n  }\n\n  logout() {\n    this.token = null;\n    return;\n  }\n\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n\n  entriesByFolder(collection, extension) {\n    return this.api\n      .listFiles(collection.get('folder'))\n      .then(files => files.filter(file => file.name.endsWith('.' + extension)))\n      .then(this.fetchFiles);\n  }\n\n  entriesByFiles(collection) {\n    const files = collection.get('files').map(collectionFile => ({\n      path: collectionFile.get('file'),\n      label: collectionFile.get('label'),\n    }));\n    return this.fetchFiles(files);\n  }\n\n  fetchFiles = files => {\n    const sem = semaphore(MAX_CONCURRENT_DOWNLOADS);\n    const promises = [];\n    files.forEach(file => {\n      promises.push(\n        new Promise(resolve =>\n          sem.take(() =>\n            this.api\n              .readFile(file.path, file.sha)\n              .then(data => {\n                resolve({ file, data });\n                sem.leave();\n              })\n              .catch((err = true) => {\n                sem.leave();\n                console.error(`failed to load file from GitHub: ${file.path}`);\n                resolve({ error: err });\n              }),\n          ),\n        ),\n      );\n    });\n    return Promise.all(promises).then(loadedEntries =>\n      loadedEntries.filter(loadedEntry => !loadedEntry.error),\n    );\n  };\n\n  // Fetches a single entry.\n  getEntry(collection, slug, path) {\n    return this.api.readFile(path).then(data => ({\n      file: { path },\n      data,\n    }));\n  }\n\n  getMedia() {\n    return this.api.listFiles(this.config.get('media_folder')).then(files =>\n      files.map(({ sha, name, size, download_url, path }) => {\n        const url = new URL(download_url);\n        if (url.pathname.match(/.svg$/)) {\n          url.search += (url.search.slice(1) === '' ? '?' : '&') + 'sanitize=true';\n        }\n        return { id: sha, name, size, displayURL: url.href, path };\n      }),\n    );\n  }\n\n  persistEntry(entry, mediaFiles = [], options = {}) {\n    return this.api.persistFiles(entry, mediaFiles, options);\n  }\n\n  async persistMedia(mediaFile, options = {}) {\n    try {\n      await this.api.persistFiles(null, [mediaFile], options);\n\n      const { sha, value, path, fileObj } = mediaFile;\n      const displayURL = URL.createObjectURL(fileObj);\n      return {\n        id: sha,\n        name: value,\n        size: fileObj.size,\n        displayURL,\n        path: trimStart(path, '/'),\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  deleteFile(path, commitMessage, options) {\n    return this.api.deleteFile(path, commitMessage, options);\n  }\n\n  unpublishedEntries() {\n    return this.api\n      .listUnpublishedBranches()\n      .then(branches => {\n        const sem = semaphore(MAX_CONCURRENT_DOWNLOADS);\n        const promises = [];\n        branches.map(branch => {\n          promises.push(\n            new Promise(resolve => {\n              const slug = branch.ref.split('refs/heads/cms/').pop();\n              return sem.take(() =>\n                this.api\n                  .readUnpublishedBranchFile(slug)\n                  .then(data => {\n                    if (data === null || data === undefined) {\n                      resolve(null);\n                      sem.leave();\n                    } else {\n                      const path = data.metaData.objects.entry.path;\n                      resolve({\n                        slug,\n                        file: { path },\n                        data: data.fileData,\n                        metaData: data.metaData,\n                        isModification: data.isModification,\n                      });\n                      sem.leave();\n                    }\n                  })\n                  .catch(() => {\n                    sem.leave();\n                    resolve(null);\n                  }),\n              );\n            }),\n          );\n        });\n        return Promise.all(promises);\n      })\n      .catch(error => {\n        if (error.message === 'Not Found') {\n          return Promise.resolve([]);\n        }\n        return error;\n      });\n  }\n\n  unpublishedEntry(collection, slug) {\n    return this.api.readUnpublishedBranchFile(slug).then(data => {\n      if (!data) return null;\n      return {\n        slug,\n        file: { path: data.metaData.objects.entry.path },\n        data: data.fileData,\n        metaData: data.metaData,\n        isModification: data.isModification,\n      };\n    });\n  }\n\n  /**\n   * Uses GitHub's Statuses API to retrieve statuses, infers which is for a\n   * deploy preview via `getPreviewStatus`. Returns the url provided by the\n   * status, as well as the status state, which should be one of 'success',\n   * 'pending', and 'failure'.\n   */\n  async getDeployPreview(collection, slug) {\n    const data = await this.api.retrieveMetadata(slug);\n\n    if (!data) {\n      return null;\n    }\n\n    const statuses = await this.api.getStatuses(data.pr.head);\n    const deployStatus = getPreviewStatus(statuses, this.config);\n\n    if (deployStatus) {\n      const { target_url, state } = deployStatus;\n      return { url: target_url, status: state };\n    }\n  }\n\n  updateUnpublishedEntryStatus(collection, slug, newStatus) {\n    return this.api.updateUnpublishedEntryStatus(collection, slug, newStatus);\n  }\n\n  deleteUnpublishedEntry(collection, slug) {\n    return this.api.deleteUnpublishedEntry(collection, slug);\n  }\n  publishUnpublishedEntry(collection, slug) {\n    return this.api.publishUnpublishedEntry(collection, slug);\n  }\n}\n"],"file":"implementation.js"}