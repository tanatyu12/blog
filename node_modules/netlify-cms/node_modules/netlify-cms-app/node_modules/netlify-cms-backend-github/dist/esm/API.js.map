{"version":3,"sources":["../../src/API.js"],"names":["CMS_BRANCH_PREFIX","API","constructor","config","api_root","token","branch","repo","repoURL","merge_method","squash_merges","initialWorkflowStatus","user","request","hasWriteAccess","then","permissions","push","catch","error","console","requestHeaders","headers","baseHeader","Authorization","parseJsonResponse","response","json","ok","Promise","reject","urlFor","path","options","cacheBuster","Date","getTime","params","key","encodeURIComponent","length","join","url","responseStatus","fetch","status","contentType","get","match","text","APIError","message","generateBranchName","basename","checkMetadataRef","now","cache","object","readme","raw","uploadBlob","item","method","body","JSON","stringify","tree","mode","type","sha","commit","createRef","storeMetadata","data","branchData","fileTree","file","updateTree","changeTree","patchRef","localForage","setItem","expires","retrieveMetadata","getItem","cached","log","ref","Accept","parse","readFile","getBlob","errors","code","dir","split","slice","listFiles","files","find","result","replace","Array","isArray","Error","filter","readUnpublishedBranchFile","contentKey","metaDataPromise","objects","entry","metaData","fileData","isModification","isUnpublishedEntryModification","EditorialWorkflowError","err","listUnpublishedBranches","branches","branchName","substring","head","state","base","prs","some","pr","getStatuses","resp","statuses","composeFileTree","filename","part","parts","subtree","forEach","uploaded","pop","shift","persistFiles","mediaFiles","uploadPromises","concat","all","useWorkflow","getBranch","commitMessage","patchBranch","mediaFilesList","map","editorialWorkflowGit","deleteFile","pathArray","directory","fileDataPath","fileDataURL","fileURL","opts","commitAuthor","author","date","toISOString","filesList","slug","unpublished","prResponse","commitResponse","createBranch","createPR","number","name","login","collection","collectionName","title","parsedData","description","timeStamp","newHead","metadata","metadataFiles","updatedMetadata","hasAssetStore","rebasePullRequest","prNumber","baseBranch","commits","getPullRequestCommits","finalCommits","assertHead","rebasedHead","rebaseSingleBlobCommits","force","baseCommit","pathToBlob","parents","resolve","newHeadPromise","reduce","lastCommitPromise","newParent","parent","normalizeCommit","commitToRebase","rebaseSingleBlobCommit","committer","getBlobInTree","blob","createTree","createCommit","getPullRequest","headToAssert","headIsMissing","headIsNotMissing","updateUnpublishedEntryStatus","deleteUnpublishedEntry","closePR","deleteBranch","publishUnpublishedEntry","mergePR","deleteRef","assertCmsBranch","startsWith","pullrequest","closed","headSha","commit_message","forceMergePR","getTree","treeSha","pathSegments","val","directories","baseTree","subTreePromise","treePromise","segment","subTreeSha","subTree","toBase64","str","Base64","encode","content","contentBase64","encoding","obj","fileOrDir","updates","added","i","len","parentSha","baseSha","base_tree"],"mappings":"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","sourcesContent":["import { Base64 } from 'js-base64';\nimport { uniq, initial, last, get, find, hasIn, partial, result } from 'lodash';\nimport {\n  localForage,\n  filterPromises,\n  resolvePromiseProperties,\n  APIError,\n  EditorialWorkflowError,\n} from 'netlify-cms-lib-util';\n\nconst CMS_BRANCH_PREFIX = 'cms/';\n\nexport default class API {\n  constructor(config) {\n    this.api_root = config.api_root || 'https://api.github.com';\n    this.token = config.token || false;\n    this.branch = config.branch || 'master';\n    this.repo = config.repo || '';\n    this.repoURL = `/repos/${this.repo}`;\n    this.merge_method = config.squash_merges ? 'squash' : 'merge';\n    this.initialWorkflowStatus = config.initialWorkflowStatus;\n  }\n\n  user() {\n    return this.request('/user');\n  }\n\n  hasWriteAccess() {\n    return this.request(this.repoURL)\n      .then(repo => repo.permissions.push)\n      .catch(error => {\n        console.error('Problem fetching repo data from GitHub');\n        throw error;\n      });\n  }\n\n  requestHeaders(headers = {}) {\n    const baseHeader = {\n      'Content-Type': 'application/json',\n      ...headers,\n    };\n\n    if (this.token) {\n      baseHeader.Authorization = `token ${this.token}`;\n      return baseHeader;\n    }\n\n    return baseHeader;\n  }\n\n  parseJsonResponse(response) {\n    return response.json().then(json => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      return json;\n    });\n  }\n\n  urlFor(path, options) {\n    const cacheBuster = new Date().getTime();\n    const params = [`ts=${cacheBuster}`];\n    if (options.params) {\n      for (const key in options.params) {\n        params.push(`${key}=${encodeURIComponent(options.params[key])}`);\n      }\n    }\n    if (params.length) {\n      path += `?${params.join('&')}`;\n    }\n    return this.api_root + path;\n  }\n\n  request(path, options = {}) {\n    const headers = this.requestHeaders(options.headers || {});\n    const url = this.urlFor(path, options);\n    let responseStatus;\n    return fetch(url, { ...options, headers })\n      .then(response => {\n        responseStatus = response.status;\n        const contentType = response.headers.get('Content-Type');\n        if (contentType && contentType.match(/json/)) {\n          return this.parseJsonResponse(response);\n        }\n        const text = response.text();\n        if (!response.ok) {\n          return Promise.reject(text);\n        }\n        return text;\n      })\n      .catch(error => {\n        throw new APIError(error.message, responseStatus, 'GitHub');\n      });\n  }\n\n  generateBranchName(basename) {\n    return `${CMS_BRANCH_PREFIX}${basename}`;\n  }\n\n  checkMetadataRef() {\n    return this.request(`${this.repoURL}/git/refs/meta/_netlify_cms?${Date.now()}`, {\n      cache: 'no-store',\n    })\n      .then(response => response.object)\n      .catch(() => {\n        // Meta ref doesn't exist\n        const readme = {\n          raw:\n            '# Netlify CMS\\n\\nThis tree is used by the Netlify CMS to store metadata information for specific files and branches.',\n        };\n\n        return this.uploadBlob(readme)\n          .then(item =>\n            this.request(`${this.repoURL}/git/trees`, {\n              method: 'POST',\n              body: JSON.stringify({\n                tree: [{ path: 'README.md', mode: '100644', type: 'blob', sha: item.sha }],\n              }),\n            }),\n          )\n          .then(tree => this.commit('First Commit', tree))\n          .then(response => this.createRef('meta', '_netlify_cms', response.sha))\n          .then(response => response.object);\n      });\n  }\n\n  storeMetadata(key, data) {\n    return this.checkMetadataRef().then(branchData => {\n      const fileTree = {\n        [`${key}.json`]: {\n          path: `${key}.json`,\n          raw: JSON.stringify(data),\n          file: true,\n        },\n      };\n\n      return this.uploadBlob(fileTree[`${key}.json`])\n        .then(() => this.updateTree(branchData.sha, '/', fileTree))\n        .then(changeTree => this.commit(`Updating “${key}” metadata`, changeTree))\n        .then(response => this.patchRef('meta', '_netlify_cms', response.sha))\n        .then(() => {\n          localForage.setItem(`gh.meta.${key}`, {\n            expires: Date.now() + 300000, // In 5 minutes\n            data,\n          });\n        });\n    });\n  }\n\n  retrieveMetadata(key) {\n    const cache = localForage.getItem(`gh.meta.${key}`);\n    return cache.then(cached => {\n      if (cached && cached.expires > Date.now()) {\n        return cached.data;\n      }\n      console.log(\n        '%c Checking for MetaData files',\n        'line-height: 30px;text-align: center;font-weight: bold',\n      );\n      return this.request(`${this.repoURL}/contents/${key}.json`, {\n        params: { ref: 'refs/meta/_netlify_cms' },\n        headers: { Accept: 'application/vnd.github.VERSION.raw' },\n        cache: 'no-store',\n      })\n        .then(response => JSON.parse(response))\n        .catch(() =>\n          console.log(\n            '%c %s does not have metadata',\n            'line-height: 30px;text-align: center;font-weight: bold',\n            key,\n          ),\n        );\n    });\n  }\n\n  readFile(path, sha, branch = this.branch) {\n    if (sha) {\n      return this.getBlob(sha);\n    } else {\n      return this.request(`${this.repoURL}/contents/${path}`, {\n        headers: { Accept: 'application/vnd.github.VERSION.raw' },\n        params: { ref: branch },\n        cache: 'no-store',\n      }).catch(error => {\n        if (hasIn(error, 'message.errors') && find(error.message.errors, { code: 'too_large' })) {\n          const dir = path\n            .split('/')\n            .slice(0, -1)\n            .join('/');\n          return this.listFiles(dir)\n            .then(files => files.find(file => file.path === path))\n            .then(file => this.getBlob(file.sha));\n        }\n        throw error;\n      });\n    }\n  }\n\n  getBlob(sha) {\n    return localForage.getItem(`gh.${sha}`).then(cached => {\n      if (cached) {\n        return cached;\n      }\n\n      return this.request(`${this.repoURL}/git/blobs/${sha}`, {\n        headers: { Accept: 'application/vnd.github.VERSION.raw' },\n      }).then(result => {\n        localForage.setItem(`gh.${sha}`, result);\n        return result;\n      });\n    });\n  }\n\n  listFiles(path) {\n    return this.request(`${this.repoURL}/contents/${path.replace(/\\/$/, '')}`, {\n      params: { ref: this.branch },\n    })\n      .then(files => {\n        if (!Array.isArray(files)) {\n          throw new Error(`Cannot list files, path ${path} is not a directory but a ${files.type}`);\n        }\n        return files;\n      })\n      .then(files => files.filter(file => file.type === 'file'));\n  }\n\n  readUnpublishedBranchFile(contentKey) {\n    const metaDataPromise = this.retrieveMetadata(contentKey).then(data =>\n      data.objects.entry.path ? data : Promise.reject(null),\n    );\n    return resolvePromiseProperties({\n      metaData: metaDataPromise,\n      fileData: metaDataPromise.then(data =>\n        this.readFile(data.objects.entry.path, null, data.branch),\n      ),\n      isModification: metaDataPromise.then(data =>\n        this.isUnpublishedEntryModification(data.objects.entry.path, this.branch),\n      ),\n    }).catch(() => {\n      throw new EditorialWorkflowError('content is not under editorial workflow', true);\n    });\n  }\n\n  isUnpublishedEntryModification(path, branch) {\n    return this.readFile(path, null, branch)\n      .then(() => true)\n      .catch(err => {\n        if (err.message && err.message === 'Not Found') {\n          return false;\n        }\n        throw err;\n      });\n  }\n\n  listUnpublishedBranches() {\n    console.log(\n      '%c Checking for Unpublished entries',\n      'line-height: 30px;text-align: center;font-weight: bold',\n    );\n    return this.request(`${this.repoURL}/git/refs/heads/cms`)\n      .then(branches =>\n        filterPromises(branches, branch => {\n          const branchName = branch.ref.substring('/refs/heads/'.length - 1);\n\n          // Get PRs with a `head` of `branchName`. Note that this is a\n          // substring match, so we need to check that the `head.ref` of\n          // at least one of the returned objects matches `branchName`.\n          return this.request(`${this.repoURL}/pulls`, {\n            params: {\n              head: branchName,\n              state: 'open',\n              base: this.branch,\n            },\n          }).then(prs => prs.some(pr => pr.head.ref === branchName));\n        }),\n      )\n      .catch(error => {\n        console.log(\n          '%c No Unpublished entries',\n          'line-height: 30px;text-align: center;font-weight: bold',\n        );\n        throw error;\n      });\n  }\n\n  /**\n   * Retrieve statuses for a given SHA. Unrelated to the editorial workflow\n   * concept of entry \"status\". Useful for things like deploy preview links.\n   */\n  async getStatuses(sha) {\n    const resp = await this.request(`${this.repoURL}/commits/${sha}/status`);\n    return resp.statuses;\n  }\n\n  composeFileTree(files) {\n    let filename;\n    let part;\n    let parts;\n    let subtree;\n    const fileTree = {};\n\n    files.forEach(file => {\n      if (file.uploaded) {\n        return;\n      }\n      parts = file.path.split('/').filter(part => part);\n      filename = parts.pop();\n      subtree = fileTree;\n      while ((part = parts.shift())) {\n        // eslint-disable-line no-cond-assign\n        subtree[part] = subtree[part] || {};\n        subtree = subtree[part];\n      }\n      subtree[filename] = file;\n      file.file = true;\n    });\n\n    return fileTree;\n  }\n\n  persistFiles(entry, mediaFiles, options) {\n    const uploadPromises = [];\n    const files = entry ? mediaFiles.concat(entry) : mediaFiles;\n\n    files.forEach(file => {\n      if (file.uploaded) {\n        return;\n      }\n      uploadPromises.push(this.uploadBlob(file));\n    });\n\n    const fileTree = this.composeFileTree(files);\n\n    return Promise.all(uploadPromises).then(() => {\n      if (!options.useWorkflow) {\n        return this.getBranch()\n          .then(branchData => this.updateTree(branchData.commit.sha, '/', fileTree))\n          .then(changeTree => this.commit(options.commitMessage, changeTree))\n          .then(response => this.patchBranch(this.branch, response.sha));\n      } else {\n        const mediaFilesList = mediaFiles.map(file => ({ path: file.path, sha: file.sha }));\n        return this.editorialWorkflowGit(fileTree, entry, mediaFilesList, options);\n      }\n    });\n  }\n\n  deleteFile(path, message, options = {}) {\n    const branch = options.branch || this.branch;\n    const pathArray = path.split('/');\n    const filename = last(pathArray);\n    const directory = initial(pathArray).join('/');\n    const fileDataPath = encodeURIComponent(directory);\n    const fileDataURL = `${this.repoURL}/git/trees/${branch}:${fileDataPath}`;\n    const fileURL = `${this.repoURL}/contents/${path}`;\n\n    /**\n     * We need to request the tree first to get the SHA. We use extended SHA-1\n     * syntax (<rev>:<path>) to get a blob from a tree without having to recurse\n     * through the tree.\n     */\n    return this.request(fileDataURL, { cache: 'no-store' }).then(resp => {\n      const { sha } = resp.tree.find(file => file.path === filename);\n      const opts = { method: 'DELETE', params: { sha, message, branch } };\n      if (this.commitAuthor) {\n        opts.params.author = {\n          ...this.commitAuthor,\n          date: new Date().toISOString(),\n        };\n      }\n      return this.request(fileURL, opts);\n    });\n  }\n\n  editorialWorkflowGit(fileTree, entry, filesList, options) {\n    const contentKey = entry.slug;\n    const branchName = this.generateBranchName(contentKey);\n    const unpublished = options.unpublished || false;\n    if (!unpublished) {\n      // Open new editorial review workflow for this entry - Create new metadata and commit to new branch`\n      let prResponse;\n\n      return this.getBranch()\n        .then(branchData => this.updateTree(branchData.commit.sha, '/', fileTree))\n        .then(changeTree => this.commit(options.commitMessage, changeTree))\n        .then(commitResponse => this.createBranch(branchName, commitResponse.sha))\n        .then(() => this.createPR(options.commitMessage, branchName))\n        .then(pr => {\n          prResponse = pr;\n          return this.user();\n        })\n        .then(user => {\n          return this.storeMetadata(contentKey, {\n            type: 'PR',\n            pr: {\n              number: prResponse.number,\n              head: prResponse.head && prResponse.head.sha,\n            },\n            user: user.name || user.login,\n            status: this.initialWorkflowStatus,\n            branch: branchName,\n            collection: options.collectionName,\n            title: options.parsedData && options.parsedData.title,\n            description: options.parsedData && options.parsedData.description,\n            objects: {\n              entry: {\n                path: entry.path,\n                sha: entry.sha,\n              },\n              files: filesList,\n            },\n            timeStamp: new Date().toISOString(),\n          });\n        });\n    } else {\n      // Entry is already on editorial review workflow - just update metadata and commit to existing branch\n      let newHead;\n      return this.getBranch(branchName)\n        .then(branchData => this.updateTree(branchData.commit.sha, '/', fileTree))\n        .then(changeTree => this.commit(options.commitMessage, changeTree))\n        .then(commit => {\n          newHead = commit;\n          return this.retrieveMetadata(contentKey);\n        })\n        .then(metadata => {\n          const { title, description } = options.parsedData || {};\n          const metadataFiles = get(metadata.objects, 'files', []);\n          const files = [...metadataFiles, ...filesList];\n          const pr = { ...metadata.pr, head: newHead.sha };\n          const objects = {\n            entry: { path: entry.path, sha: entry.sha },\n            files: uniq(files),\n          };\n          const updatedMetadata = { ...metadata, pr, title, description, objects };\n\n          /**\n           * If an asset store is in use, assets are always accessible, so we\n           * can just finish the persist operation here.\n           */\n          if (options.hasAssetStore) {\n            return this.storeMetadata(contentKey, updatedMetadata).then(() =>\n              this.patchBranch(branchName, newHead.sha),\n            );\n          }\n\n          /**\n           * If no asset store is in use, assets are being stored in the content\n           * repo, which means pull requests opened for editorial workflow\n           * entries must be rebased if assets have been added or removed.\n           */\n          return this.rebasePullRequest(pr.number, branchName, contentKey, metadata, newHead);\n        });\n    }\n  }\n\n  /**\n   * Rebase a pull request onto the latest HEAD of it's target base branch\n   * (should generally be the configured backend branch). Only rebases changes\n   * in the entry file.\n   */\n  async rebasePullRequest(prNumber, branchName, contentKey, metadata, head) {\n    const { path } = metadata.objects.entry;\n\n    try {\n      /**\n       * Get the published branch and create new commits over it. If the pull\n       * request is up to date, no rebase will occur.\n       */\n      const baseBranch = await this.getBranch();\n      const commits = await this.getPullRequestCommits(prNumber, head);\n\n      /**\n       * Sometimes the list of commits for a pull request isn't updated\n       * immediately after the PR branch is patched. There's also the possibility\n       * that the branch has changed unexpectedly. We account for both by adding\n       * the head if it's missing, or else throwing an error if the PR head is\n       * neither the head we expect nor its parent.\n       */\n      const finalCommits = this.assertHead(commits, head);\n      const rebasedHead = await this.rebaseSingleBlobCommits(baseBranch.commit, finalCommits, path);\n\n      /**\n       * Update metadata, then force update the pull request branch head.\n       */\n      const pr = { ...metadata.pr, head: rebasedHead.sha };\n      const timeStamp = new Date().toISOString();\n      const updatedMetadata = { ...metadata, pr, timeStamp };\n      await this.storeMetadata(contentKey, updatedMetadata);\n      return this.patchBranch(branchName, rebasedHead.sha, { force: true });\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Rebase an array of commits one-by-one, starting from a given base SHA. Can\n   * accept an array of commits as received from the GitHub API. All commits are\n   * expected to change the same, single blob.\n   */\n  rebaseSingleBlobCommits(baseCommit, commits, pathToBlob) {\n    /**\n     * If the parent of the first commit already matches the target base,\n     * return commits as is.\n     */\n    if (commits.length === 0 || commits[0].parents[0].sha === baseCommit.sha) {\n      return Promise.resolve(last(commits));\n    }\n\n    /**\n     * Re-create each commit over the new base, applying each to the previous,\n     * changing only the parent SHA and tree for each, but retaining all other\n     * info, such as the author/committer data.\n     */\n    const newHeadPromise = commits.reduce((lastCommitPromise, commit) => {\n      return lastCommitPromise.then(newParent => {\n        /**\n         * Normalize commit data to ensure it's not nested in `commit.commit`.\n         */\n        const parent = this.normalizeCommit(newParent);\n        const commitToRebase = this.normalizeCommit(commit);\n\n        return this.rebaseSingleBlobCommit(parent, commitToRebase, pathToBlob);\n      });\n    }, Promise.resolve(baseCommit));\n\n    /**\n     * Return a promise that resolves when all commits have been created.\n     */\n    return newHeadPromise;\n  }\n\n  /**\n   * Rebase a commit that changes a single blob. Also handles updating the tree.\n   */\n  rebaseSingleBlobCommit(baseCommit, commit, pathToBlob) {\n    /**\n     * Retain original commit metadata.\n     */\n    const { message, author, committer } = commit;\n\n    /**\n     * Set the base commit as the parent.\n     */\n    const parent = [baseCommit.sha];\n\n    /**\n     * Get the blob data by path.\n     */\n    return (\n      this.getBlobInTree(commit.tree.sha, pathToBlob)\n\n        /**\n         * Create a new tree consisting of the base tree and the single updated\n         * blob. Use the full path to indicate nesting, GitHub will take care of\n         * subtree creation.\n         */\n        .then(blob => this.createTree(baseCommit.tree.sha, [{ ...blob, path: pathToBlob }]))\n\n        /**\n         * Create a new commit with the updated tree and original commit metadata.\n         */\n        .then(tree => this.createCommit(message, tree.sha, parent, author, committer))\n    );\n  }\n\n  /**\n   * Get a pull request by PR number.\n   */\n  getPullRequest(prNumber) {\n    return this.request(`${this.repoURL}/pulls/${prNumber} }`);\n  }\n\n  /**\n   * Get the list of commits for a given pull request.\n   */\n  getPullRequestCommits(prNumber) {\n    return this.request(`${this.repoURL}/pulls/${prNumber}/commits`);\n  }\n\n  /**\n   * Returns `commits` with `headToAssert` appended if it's the child of the\n   * last commit in `commits`. Returns `commits` unaltered if `headToAssert` is\n   * already the last commit in `commits`. Otherwise throws an error.\n   */\n  assertHead(commits, headToAssert) {\n    const headIsMissing = headToAssert.parents[0].sha === last(commits).sha;\n    const headIsNotMissing = headToAssert.sha === last(commits).sha;\n\n    if (headIsMissing) {\n      return commits.concat(headToAssert);\n    } else if (headIsNotMissing) {\n      return commits;\n    }\n\n    throw Error('Editorial workflow branch changed unexpectedly.');\n  }\n\n  updateUnpublishedEntryStatus(collection, slug, status) {\n    const contentKey = slug;\n    return this.retrieveMetadata(contentKey)\n      .then(metadata => ({\n        ...metadata,\n        status,\n      }))\n      .then(updatedMetadata => this.storeMetadata(contentKey, updatedMetadata));\n  }\n\n  deleteUnpublishedEntry(collection, slug) {\n    const contentKey = slug;\n    const branchName = this.generateBranchName(contentKey);\n    return (\n      this.retrieveMetadata(contentKey)\n        .then(metadata => this.closePR(metadata.pr))\n        .then(() => this.deleteBranch(branchName))\n        // If the PR doesn't exist, then this has already been deleted -\n        // deletion should be idempotent, so we can consider this a\n        // success.\n        .catch(err => {\n          if (err.message === 'Reference does not exist') {\n            return Promise.resolve();\n          }\n          return Promise.reject(err);\n        })\n    );\n  }\n\n  publishUnpublishedEntry(collection, slug) {\n    const contentKey = slug;\n    const branchName = this.generateBranchName(contentKey);\n    return this.retrieveMetadata(contentKey)\n      .then(metadata => this.mergePR(metadata.pr, metadata.objects))\n      .then(() => this.deleteBranch(branchName));\n  }\n\n  createRef(type, name, sha) {\n    return this.request(`${this.repoURL}/git/refs`, {\n      method: 'POST',\n      body: JSON.stringify({ ref: `refs/${type}/${name}`, sha }),\n    });\n  }\n\n  patchRef(type, name, sha, opts = {}) {\n    const force = opts.force || false;\n    return this.request(`${this.repoURL}/git/refs/${type}/${encodeURIComponent(name)}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ sha, force }),\n    });\n  }\n\n  deleteRef(type, name) {\n    return this.request(`${this.repoURL}/git/refs/${type}/${encodeURIComponent(name)}`, {\n      method: 'DELETE',\n    });\n  }\n\n  getBranch(branch = this.branch) {\n    return this.request(`${this.repoURL}/branches/${encodeURIComponent(branch)}`);\n  }\n\n  createBranch(branchName, sha) {\n    return this.createRef('heads', branchName, sha);\n  }\n\n  assertCmsBranch(branchName) {\n    return branchName.startsWith(CMS_BRANCH_PREFIX);\n  }\n\n  patchBranch(branchName, sha, opts = {}) {\n    const force = opts.force || false;\n    if (force && !this.assertCmsBranch(branchName)) {\n      throw Error(`Only CMS branches can be force updated, cannot force update ${branchName}`);\n    }\n    return this.patchRef('heads', branchName, sha, { force });\n  }\n\n  deleteBranch(branchName) {\n    return this.deleteRef('heads', branchName);\n  }\n\n  createPR(title, head, base = this.branch) {\n    const body = 'Automatically generated by Netlify CMS';\n    return this.request(`${this.repoURL}/pulls`, {\n      method: 'POST',\n      body: JSON.stringify({ title, body, head, base }),\n    });\n  }\n\n  closePR(pullrequest) {\n    const prNumber = pullrequest.number;\n    console.log('%c Deleting PR', 'line-height: 30px;text-align: center;font-weight: bold');\n    return this.request(`${this.repoURL}/pulls/${prNumber}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        state: closed,\n      }),\n    });\n  }\n\n  mergePR(pullrequest, objects) {\n    const headSha = pullrequest.head;\n    const prNumber = pullrequest.number;\n    console.log('%c Merging PR', 'line-height: 30px;text-align: center;font-weight: bold');\n    return this.request(`${this.repoURL}/pulls/${prNumber}/merge`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        commit_message: 'Automatically generated. Merged on Netlify CMS.',\n        sha: headSha,\n        merge_method: this.merge_method,\n      }),\n    }).catch(error => {\n      if (error instanceof APIError && error.status === 405) {\n        return this.forceMergePR(pullrequest, objects);\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  forceMergePR(pullrequest, objects) {\n    const files = objects.files.concat(objects.entry);\n    const fileTree = this.composeFileTree(files);\n    let commitMessage = 'Automatically generated. Merged on Netlify CMS\\n\\nForce merge of:';\n    files.forEach(file => {\n      commitMessage += `\\n* \"${file.path}\"`;\n    });\n    console.log(\n      '%c Automatic merge not possible - Forcing merge.',\n      'line-height: 30px;text-align: center;font-weight: bold',\n    );\n    return this.getBranch()\n      .then(branchData => this.updateTree(branchData.commit.sha, '/', fileTree))\n      .then(changeTree => this.commit(commitMessage, changeTree))\n      .then(response => this.patchBranch(this.branch, response.sha));\n  }\n\n  getTree(sha) {\n    if (sha) {\n      return this.request(`${this.repoURL}/git/trees/${sha}`);\n    }\n    return Promise.resolve({ tree: [] });\n  }\n\n  /**\n   * Get a blob from a tree. Requests individual subtrees recursively if blob is\n   * nested within one or more directories.\n   */\n  getBlobInTree(treeSha, pathToBlob) {\n    const pathSegments = pathToBlob.split('/').filter(val => val);\n    const directories = pathSegments.slice(0, -1);\n    const filename = pathSegments.slice(-1)[0];\n    const baseTree = this.getTree(treeSha);\n    const subTreePromise = directories.reduce((treePromise, segment) => {\n      return treePromise.then(tree => {\n        const subTreeSha = find(tree.tree, { path: segment }).sha;\n        return this.getTree(subTreeSha);\n      });\n    }, baseTree);\n    return subTreePromise.then(subTree => find(subTree.tree, { path: filename }));\n  }\n\n  toBase64(str) {\n    return Promise.resolve(Base64.encode(str));\n  }\n\n  uploadBlob(item) {\n    const content = result(item, 'toBase64', partial(this.toBase64, item.raw));\n\n    return content.then(contentBase64 =>\n      this.request(`${this.repoURL}/git/blobs`, {\n        method: 'POST',\n        body: JSON.stringify({\n          content: contentBase64,\n          encoding: 'base64',\n        }),\n      }).then(response => {\n        item.sha = response.sha;\n        item.uploaded = true;\n        return item;\n      }),\n    );\n  }\n\n  updateTree(sha, path, fileTree) {\n    return this.getTree(sha).then(tree => {\n      let obj;\n      let filename;\n      let fileOrDir;\n      const updates = [];\n      const added = {};\n\n      for (let i = 0, len = tree.tree.length; i < len; i++) {\n        obj = tree.tree[i];\n        if ((fileOrDir = fileTree[obj.path])) {\n          // eslint-disable-line no-cond-assign\n          added[obj.path] = true;\n          if (fileOrDir.file) {\n            updates.push({ path: obj.path, mode: obj.mode, type: obj.type, sha: fileOrDir.sha });\n          } else {\n            updates.push(this.updateTree(obj.sha, obj.path, fileOrDir));\n          }\n        }\n      }\n      for (filename in fileTree) {\n        fileOrDir = fileTree[filename];\n        if (added[filename]) {\n          continue;\n        }\n        updates.push(\n          fileOrDir.file\n            ? { path: filename, mode: '100644', type: 'blob', sha: fileOrDir.sha }\n            : this.updateTree(null, filename, fileOrDir),\n        );\n      }\n      return Promise.all(updates)\n        .then(tree => this.createTree(sha, tree))\n        .then(response => ({\n          path,\n          mode: '040000',\n          type: 'tree',\n          sha: response.sha,\n          parentSha: sha,\n        }));\n    });\n  }\n\n  createTree(baseSha, tree) {\n    return this.request(`${this.repoURL}/git/trees`, {\n      method: 'POST',\n      body: JSON.stringify({ base_tree: baseSha, tree }),\n    });\n  }\n\n  /**\n   * Some GitHub API calls return commit data in a nested `commit` property,\n   * with the SHA outside of the nested property, while others return a\n   * flatter object with no nested `commit` property. This normalizes a commit\n   * to resemble the latter.\n   */\n  normalizeCommit(commit) {\n    if (commit.commit) {\n      return { ...commit.commit, sha: commit.sha };\n    }\n    return commit;\n  }\n\n  commit(message, changeTree) {\n    const parents = changeTree.parentSha ? [changeTree.parentSha] : [];\n    return this.createCommit(message, changeTree.sha, parents);\n  }\n\n  createCommit(message, treeSha, parents, author, committer) {\n    return this.request(`${this.repoURL}/git/commits`, {\n      method: 'POST',\n      body: JSON.stringify({ message, tree: treeSha, parents, author, committer }),\n    });\n  }\n}\n"],"file":"API.js"}