{"version":3,"sources":["../../../../../src/integrations/providers/algolia/implementation.js"],"names":["getSlug","path","split","pop","replace","Algolia","constructor","config","get","applicationID","apiKey","prefix","indexPrefix","searchURL","entriesCache","collection","page","entries","requestHeaders","headers","parseJsonResponse","response","json","then","ok","Promise","reject","urlFor","options","params","key","push","encodeURIComponent","length","join","request","url","fetch","contentType","match","text","search","collections","searchTerm","searchCollections","map","indexName","method","body","JSON","stringify","requests","results","result","index","hits","hit","slug","data","partial","pagination","searchBy","field","query","restrictSearchableAttributes","listEntries","resolve","getEntry","entry","filter"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { createEntry } from 'ValueObjects/Entry';\nimport { selectEntrySlug } from 'Reducers/collections';\n\nfunction getSlug(path) {\n  return path\n    .split('/')\n    .pop()\n    .replace(/\\.[^.]+$/, '');\n}\n\nexport default class Algolia {\n  constructor(config) {\n    this.config = config;\n    if (config.get('applicationID') == null || config.get('apiKey') == null) {\n      throw 'The Algolia search integration needs the credentials (applicationID and apiKey) in the integration configuration.';\n    }\n\n    this.applicationID = config.get('applicationID');\n    this.apiKey = config.get('apiKey');\n\n    const prefix = config.get('indexPrefix');\n    this.indexPrefix = prefix ? `${prefix}-` : '';\n\n    this.searchURL = `https://${this.applicationID}-dsn.algolia.net/1`;\n\n    this.entriesCache = {\n      collection: null,\n      page: null,\n      entries: [],\n    };\n  }\n\n  requestHeaders(headers = {}) {\n    return {\n      'X-Algolia-API-Key': this.apiKey,\n      'X-Algolia-Application-Id': this.applicationID,\n      'Content-Type': 'application/json',\n      ...headers,\n    };\n  }\n\n  parseJsonResponse(response) {\n    return response.json().then(json => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      return json;\n    });\n  }\n\n  urlFor(path, options) {\n    const params = [];\n    if (options.params) {\n      for (const key in options.params) {\n        params.push(`${key}=${encodeURIComponent(options.params[key])}`);\n      }\n    }\n    if (params.length) {\n      path += `?${params.join('&')}`;\n    }\n    return path;\n  }\n\n  request(path, options = {}) {\n    const headers = this.requestHeaders(options.headers || {});\n    const url = this.urlFor(path, options);\n    return fetch(url, { ...options, headers }).then(response => {\n      const contentType = response.headers.get('Content-Type');\n      if (contentType && contentType.match(/json/)) {\n        return this.parseJsonResponse(response);\n      }\n\n      return response.text();\n    });\n  }\n\n  search(collections, searchTerm, page) {\n    const searchCollections = collections.map(collection => ({\n      indexName: `${this.indexPrefix}${collection}`,\n      params: `query=${searchTerm}&page=${page}`,\n    }));\n\n    return this.request(`${this.searchURL}/indexes/*/queries`, {\n      method: 'POST',\n      body: JSON.stringify({ requests: searchCollections }),\n    }).then(response => {\n      const entries = response.results.map((result, index) =>\n        result.hits.map(hit => {\n          const slug = getSlug(hit.path);\n          return createEntry(collections[index], slug, hit.path, { data: hit.data, partial: true });\n        }),\n      );\n\n      return { entries: _.flatten(entries), pagination: page };\n    });\n  }\n\n  searchBy(field, collection, query) {\n    return this.request(`${this.searchURL}/indexes/${this.indexPrefix}${collection}`, {\n      params: {\n        restrictSearchableAttributes: field,\n        query,\n      },\n    });\n  }\n\n  listEntries(collection, page) {\n    if (this.entriesCache.collection === collection && this.entriesCache.page === page) {\n      return Promise.resolve({ page: this.entriesCache.page, entries: this.entriesCache.entries });\n    } else {\n      return this.request(\n        `${this.searchURL}/indexes/${this.indexPrefix}${collection.get('name')}`,\n        {\n          params: { page },\n        },\n      ).then(response => {\n        const entries = response.hits.map(hit => {\n          const slug = selectEntrySlug(collection, hit.path);\n          return createEntry(collection.get('name'), slug, hit.path, {\n            data: hit.data,\n            partial: true,\n          });\n        });\n        this.entriesCache = { collection, pagination: response.page, entries };\n        return { entries, pagination: response.page };\n      });\n    }\n  }\n\n  getEntry(collection, slug) {\n    return this.searchBy('slug', collection.get('name'), slug).then(response => {\n      const entry = response.hits.filter(hit => hit.slug === slug)[0];\n      return createEntry(collection.get('name'), slug, entry.path, {\n        data: entry.data,\n        partial: true,\n      });\n    });\n  }\n}\n"],"file":"implementation.js"}