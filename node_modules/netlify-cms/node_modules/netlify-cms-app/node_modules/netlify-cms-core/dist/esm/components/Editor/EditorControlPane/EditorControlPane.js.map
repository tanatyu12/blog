{"version":3,"sources":["../../../../../src/components/Editor/EditorControlPane/EditorControlPane.js"],"names":["ControlPaneContainer","ControlPane","React","Component","props","fields","forEach","field","get","componentValidate","controlRef","wrappedControl","name","widget","innerWrappedControl","validate","render","collection","entry","fieldsMetaData","fieldsErrors","onChange","onValidate","size","map","i","getIn","bind","propTypes","ImmutablePropTypes","isRequired","list","PropTypes","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport styled from '@emotion/styled';\nimport EditorControl from './EditorControl';\n\nconst ControlPaneContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding-bottom: 16px;\n  font-size: 16px;\n`;\n\nexport default class ControlPane extends React.Component {\n  componentValidate = {};\n\n  controlRef(field, wrappedControl) {\n    if (!wrappedControl) return;\n    const name = field.get('name');\n    const widget = field.get('widget');\n    if (widget === 'list' || widget === 'object') {\n      this.componentValidate[name] = wrappedControl.innerWrappedControl.validate;\n    } else {\n      this.componentValidate[name] = wrappedControl.validate;\n    }\n  }\n\n  validate = () => {\n    this.props.fields.forEach(field => {\n      if (field.get('widget') === 'hidden') return;\n      this.componentValidate[field.get('name')]();\n    });\n  };\n\n  render() {\n    const {\n      collection,\n      fields,\n      entry,\n      fieldsMetaData,\n      fieldsErrors,\n      onChange,\n      onValidate,\n    } = this.props;\n\n    if (!collection || !fields) {\n      return null;\n    }\n\n    if (entry.size === 0 || entry.get('partial') === true) {\n      return null;\n    }\n\n    return (\n      <ControlPaneContainer>\n        {fields.map((field, i) =>\n          field.get('widget') === 'hidden' ? null : (\n            <EditorControl\n              key={i}\n              field={field}\n              value={entry.getIn(['data', field.get('name')])}\n              fieldsMetaData={fieldsMetaData}\n              fieldsErrors={fieldsErrors}\n              onChange={onChange}\n              onValidate={onValidate}\n              processControlRef={this.controlRef.bind(this)}\n              controlRef={this.controlRef}\n            />\n          ),\n        )}\n      </ControlPaneContainer>\n    );\n  }\n}\n\nControlPane.propTypes = {\n  collection: ImmutablePropTypes.map.isRequired,\n  entry: ImmutablePropTypes.map.isRequired,\n  fields: ImmutablePropTypes.list.isRequired,\n  fieldsMetaData: ImmutablePropTypes.map.isRequired,\n  fieldsErrors: ImmutablePropTypes.map.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onValidate: PropTypes.func.isRequired,\n};\n"],"file":"EditorControlPane.js"}