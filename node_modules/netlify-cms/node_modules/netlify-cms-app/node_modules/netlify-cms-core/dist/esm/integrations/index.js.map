{"version":3,"sources":["../../../src/integrations/index.js"],"names":["resolveIntegrations","interationsConfig","getToken","integrationInstances","get","forEach","providerData","providerName","set","Algolia","AssetStore","getIntegrationProvider","integrations","provider"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AAEO,SAASA,mBAAT,CAA6BC,iBAA7B,EAAgDC,QAAhD,EAA0D;AAC/D,MAAIC,oBAAoB,GAAG,oBAAI,EAAJ,CAA3B;AACAF,EAAAA,iBAAiB,CAACG,GAAlB,CAAsB,WAAtB,EAAmCC,OAAnC,CAA2C,CAACC,YAAD,EAAeC,YAAf,KAAgC;AACzE,YAAQA,YAAR;AACE,WAAK,SAAL;AACEJ,QAAAA,oBAAoB,GAAGA,oBAAoB,CAACK,GAArB,CAAyB,SAAzB,EAAoC,IAAIC,uBAAJ,CAAYH,YAAZ,CAApC,CAAvB;AACA;;AACF,WAAK,YAAL;AACEH,QAAAA,oBAAoB,GAAGA,oBAAoB,CAACK,GAArB,CACrB,YADqB,EAErB,IAAIE,wBAAJ,CAAeJ,YAAf,EAA6BJ,QAA7B,CAFqB,CAAvB;AAIA;AATJ;AAWD,GAZD;AAaA,SAAOC,oBAAP;AACD;;AAEM,MAAMQ,sBAAsB,GAAI,YAAW;AAChD,MAAIC,YAAY,GAAG,IAAnB;AAEA,SAAO,CAACX,iBAAD,EAAoBC,QAApB,EAA8BW,QAA9B,KAA2C;AAChD,QAAID,YAAJ,EAAkB;AAChB,aAAOA,YAAY,CAACR,GAAb,CAAiBS,QAAjB,CAAP;AACD,KAFD,MAEO;AACLD,MAAAA,YAAY,GAAGZ,mBAAmB,CAACC,iBAAD,EAAoBC,QAApB,CAAlC;AACA,aAAOU,YAAY,CAACR,GAAb,CAAiBS,QAAjB,CAAP;AACD;AACF,GAPD;AAQD,CAXqC,EAA/B","sourcesContent":["import Algolia from './providers/algolia/implementation';\nimport AssetStore from './providers/assetStore/implementation';\nimport { Map } from 'immutable';\n\nexport function resolveIntegrations(interationsConfig, getToken) {\n  let integrationInstances = Map({});\n  interationsConfig.get('providers').forEach((providerData, providerName) => {\n    switch (providerName) {\n      case 'algolia':\n        integrationInstances = integrationInstances.set('algolia', new Algolia(providerData));\n        break;\n      case 'assetStore':\n        integrationInstances = integrationInstances.set(\n          'assetStore',\n          new AssetStore(providerData, getToken),\n        );\n        break;\n    }\n  });\n  return integrationInstances;\n}\n\nexport const getIntegrationProvider = (function() {\n  let integrations = null;\n\n  return (interationsConfig, getToken, provider) => {\n    if (integrations) {\n      return integrations.get(provider);\n    } else {\n      integrations = resolveIntegrations(interationsConfig, getToken);\n      return integrations.get(provider);\n    }\n  };\n})();\n"],"file":"index.js"}