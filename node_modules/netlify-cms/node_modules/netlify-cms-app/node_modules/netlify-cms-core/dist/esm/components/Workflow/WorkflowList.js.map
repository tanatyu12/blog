{"version":3,"sources":["../../../../src/components/Workflow/WorkflowList.js"],"names":["WorkflowListContainer","styles","columnPosition","idx","css","colors","textFieldBorder","column","columnHovered","active","ColumnHeader","lengths","borderRadius","props","name","statusDraftBackground","statusDraftText","statusReviewBackground","statusReviewText","statusReadyBackground","statusReadyText","ColumnCount","text","DNDNamespace","getColumnHeaderText","columnName","t","WorkflowList","React","Component","newStatus","dragProps","slug","collection","oldStatus","ownStatus","handleChangeStatus","window","confirm","handleDelete","status","last","alert","handlePublish","entries","entrySeq","map","currColumn","currEntries","bind","connect","isHovered","height","smart_count","size","renderColumns","entry","timestamp","getIn","format","editLink","get","isModification","canPublish","requestDelete","requestPublish","render","columns","ImmutablePropTypes","orderedMap","PropTypes","func","isRequired"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { jsx, css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\nimport { translate } from 'react-polyglot';\nimport { colors, lengths } from 'netlify-cms-ui-default';\nimport { status } from 'Constants/publishModes';\nimport { DragSource, DropTarget, HTML5DragDrop } from 'UI';\nimport WorkflowCard from './WorkflowCard';\n\nconst WorkflowListContainer = styled.div`\n  min-height: 60%;\n  display: grid;\n  grid-template-columns: 33.3% 33.3% 33.3%;\n`;\n\nconst styles = {\n  columnPosition: idx =>\n    (idx === 0 &&\n      css`\n        margin-left: 0;\n      `) ||\n    (idx === 2 &&\n      css`\n        margin-right: 0;\n      `) ||\n    css`\n      &:before,\n      &:after {\n        content: '';\n        display: block;\n        position: absolute;\n        width: 2px;\n        height: 80%;\n        top: 76px;\n        background-color: ${colors.textFieldBorder};\n      }\n\n      &:before {\n        left: -23px;\n      }\n\n      &:after {\n        right: -23px;\n      }\n    `,\n  column: css`\n    margin: 0 20px;\n    transition: background-color 0.5s ease;\n    border: 2px dashed transparent;\n    border-radius: 4px;\n    position: relative;\n    height: 100%;\n  `,\n  columnHovered: css`\n    border-color: ${colors.active};\n  `,\n};\n\nconst ColumnHeader = styled.h2`\n  font-size: 20px;\n  font-weight: normal;\n  padding: 4px 14px;\n  border-radius: ${lengths.borderRadius};\n  margin-bottom: 28px;\n\n  ${props =>\n    props.name === 'draft' &&\n    css`\n      background-color: ${colors.statusDraftBackground};\n      color: ${colors.statusDraftText};\n    `}\n\n  ${props =>\n    props.name === 'pending_review' &&\n    css`\n      background-color: ${colors.statusReviewBackground};\n      color: ${colors.statusReviewText};\n    `}\n\n  ${props =>\n    props.name === 'pending_publish' &&\n    css`\n      background-color: ${colors.statusReadyBackground};\n      color: ${colors.statusReadyText};\n    `}\n`;\n\nconst ColumnCount = styled.p`\n  font-size: 13px;\n  font-weight: 500;\n  color: ${colors.text};\n  text-transform: uppercase;\n  margin-bottom: 6px;\n`;\n\n// This is a namespace so that we can only drop these elements on a DropTarget with the same\nconst DNDNamespace = 'cms-workflow';\n\nconst getColumnHeaderText = (columnName, t) => {\n  switch (columnName) {\n    case 'draft':\n      return t('workflow.workflowList.draftHeader');\n    case 'pending_review':\n      return t('workflow.workflowList.inReviewHeader');\n    case 'pending_publish':\n      return t('workflow.workflowList.readyHeader');\n  }\n};\n\nclass WorkflowList extends React.Component {\n  static propTypes = {\n    entries: ImmutablePropTypes.orderedMap,\n    handleChangeStatus: PropTypes.func.isRequired,\n    handlePublish: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n    t: PropTypes.func.isRequired,\n  };\n\n  handleChangeStatus = (newStatus, dragProps) => {\n    const slug = dragProps.slug;\n    const collection = dragProps.collection;\n    const oldStatus = dragProps.ownStatus;\n    this.props.handleChangeStatus(collection, slug, oldStatus, newStatus);\n  };\n\n  requestDelete = (collection, slug, ownStatus) => {\n    if (window.confirm(this.props.t('workflow.workflowList.onDeleteEntry'))) {\n      this.props.handleDelete(collection, slug, ownStatus);\n    }\n  };\n\n  requestPublish = (collection, slug, ownStatus) => {\n    if (ownStatus !== status.last()) {\n      window.alert(this.props.t('workflow.workflowList.onPublishingNotReadyEntry'));\n      return;\n    } else if (!window.confirm(this.props.t('workflow.workflowList.onPublishEntry'))) {\n      return;\n    }\n    this.props.handlePublish(collection, slug);\n  };\n\n  // eslint-disable-next-line react/display-name\n  renderColumns = (entries, column) => {\n    if (!entries) return null;\n\n    if (!column) {\n      return entries.entrySeq().map(([currColumn, currEntries], idx) => (\n        <DropTarget\n          namespace={DNDNamespace}\n          key={currColumn}\n          onDrop={this.handleChangeStatus.bind(this, currColumn)}\n        >\n          {(connect, { isHovered }) =>\n            connect(\n              <div style={{ height: '100%' }}>\n                <div\n                  css={[\n                    styles.column,\n                    styles.columnPosition(idx),\n                    isHovered && styles.columnHovered,\n                  ]}\n                >\n                  <ColumnHeader name={currColumn}>\n                    {getColumnHeaderText(currColumn, this.props.t)}\n                  </ColumnHeader>\n                  <ColumnCount>\n                    {this.props.t('workflow.workflowList.currentEntries', {\n                      smart_count: currEntries.size,\n                    })}\n                  </ColumnCount>\n                  {this.renderColumns(currEntries, currColumn)}\n                </div>\n              </div>,\n            )\n          }\n        </DropTarget>\n      ));\n    }\n    return (\n      <div>\n        {entries.map(entry => {\n          const timestamp = moment(entry.getIn(['metaData', 'timeStamp'])).format('MMMM D');\n          const editLink = `collections/${entry.getIn([\n            'metaData',\n            'collection',\n          ])}/entries/${entry.get('slug')}`;\n          const slug = entry.get('slug');\n          const ownStatus = entry.getIn(['metaData', 'status']);\n          const collection = entry.getIn(['metaData', 'collection']);\n          const isModification = entry.get('isModification');\n          const canPublish = ownStatus === status.last() && !entry.get('isPersisting', false);\n          return (\n            <DragSource\n              namespace={DNDNamespace}\n              key={`${collection}-${slug}`}\n              slug={slug}\n              collection={collection}\n              ownStatus={ownStatus}\n            >\n              {connect =>\n                connect(\n                  <div>\n                    <WorkflowCard\n                      collectionName={collection}\n                      title={entry.getIn(['data', 'title'])}\n                      authorLastChange={entry.getIn(['metaData', 'user'])}\n                      body={entry.getIn(['data', 'body'])}\n                      isModification={isModification}\n                      editLink={editLink}\n                      timestamp={timestamp}\n                      onDelete={this.requestDelete.bind(this, collection, slug, ownStatus)}\n                      canPublish={canPublish}\n                      onPublish={this.requestPublish.bind(this, collection, slug, ownStatus)}\n                    />\n                  </div>,\n                )\n              }\n            </DragSource>\n          );\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    const columns = this.renderColumns(this.props.entries);\n    return <WorkflowListContainer>{columns}</WorkflowListContainer>;\n  }\n}\n\nexport default HTML5DragDrop(translate()(WorkflowList));\n"],"file":"WorkflowList.js"}