{"version":3,"sources":["../../../src/reducers/entryDraft.js"],"names":["initialState","entry","mediaFiles","fieldsMetaData","fieldsErrors","hasChanged","entryDraftReducer","state","action","type","DRAFT_CREATE_FROM_ENTRY","withMutations","set","payload","setIn","metadata","DRAFT_CREATE_EMPTY","DRAFT_CREATE_FROM_LOCAL_BACKUP","backupEntry","get","delete","DRAFT_DISCARD","DRAFT_LOCAL_BACKUP_RETRIEVED","DRAFT_CHANGE_FIELD","field","value","mergeDeepIn","DRAFT_VALIDATION_ERRORS","errors","length","deleteIn","uniquefieldId","DRAFT_CLEAR_ERRORS","ENTRY_PERSIST_REQUEST","UNPUBLISHED_ENTRY_PERSIST_REQUEST","ENTRY_PERSIST_FAILURE","UNPUBLISHED_ENTRY_PERSIST_FAILURE","ENTRY_PERSIST_SUCCESS","UNPUBLISHED_ENTRY_PERSIST_SUCCESS","getIn","slug","ENTRY_DELETE_SUCCESS","ADD_ASSET","has","update","list","push","public_path","REMOVE_ASSET","filterNot","path"],"mappings":"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","sourcesContent":["import { Map, List, fromJS } from 'immutable';\nimport {\n  DRAFT_CREATE_FROM_ENTRY,\n  DRAFT_CREATE_EMPTY,\n  DRAFT_DISCARD,\n  DRAFT_CHANGE_FIELD,\n  DRAFT_VALIDATION_ERRORS,\n  DRAFT_CLEAR_ERRORS,\n  DRAFT_LOCAL_BACKUP_RETRIEVED,\n  DRAFT_CREATE_FROM_LOCAL_BACKUP,\n  ENTRY_PERSIST_REQUEST,\n  ENTRY_PERSIST_SUCCESS,\n  ENTRY_PERSIST_FAILURE,\n  ENTRY_DELETE_SUCCESS,\n} from 'Actions/entries';\nimport {\n  UNPUBLISHED_ENTRY_PERSIST_REQUEST,\n  UNPUBLISHED_ENTRY_PERSIST_SUCCESS,\n  UNPUBLISHED_ENTRY_PERSIST_FAILURE,\n} from 'Actions/editorialWorkflow';\nimport { ADD_ASSET, REMOVE_ASSET } from 'Actions/media';\n\nconst initialState = Map({\n  entry: Map(),\n  mediaFiles: List(),\n  fieldsMetaData: Map(),\n  fieldsErrors: Map(),\n  hasChanged: false,\n});\n\nconst entryDraftReducer = (state = Map(), action) => {\n  switch (action.type) {\n    case DRAFT_CREATE_FROM_ENTRY:\n      // Existing Entry\n      return state.withMutations(state => {\n        state.set('entry', action.payload.entry);\n        state.setIn(['entry', 'newRecord'], false);\n        state.set('mediaFiles', List());\n        // An existing entry may already have metadata. If we surfed away and back to its\n        // editor page, the metadata will have been fetched already, so we shouldn't\n        // clear it as to not break relation lists.\n        state.set('fieldsMetaData', action.payload.metadata || Map());\n        state.set('fieldsErrors', Map());\n        state.set('hasChanged', false);\n      });\n    case DRAFT_CREATE_EMPTY:\n      // New Entry\n      return state.withMutations(state => {\n        state.set('entry', fromJS(action.payload));\n        state.setIn(['entry', 'newRecord'], true);\n        state.set('mediaFiles', List());\n        state.set('fieldsMetaData', Map());\n        state.set('fieldsErrors', Map());\n        state.set('hasChanged', false);\n      });\n    case DRAFT_CREATE_FROM_LOCAL_BACKUP:\n      // Local Backup\n      return state.withMutations(state => {\n        const backupEntry = state.get('localBackup');\n        state.delete('localBackup');\n        state.set('entry', backupEntry);\n        state.setIn(['entry', 'newRecord'], !backupEntry.get('path'));\n        state.set('mediaFiles', List());\n        state.set('fieldsMetaData', Map());\n        state.set('fieldsErrors', Map());\n        state.set('hasChanged', true);\n      });\n    case DRAFT_DISCARD:\n      return initialState;\n    case DRAFT_LOCAL_BACKUP_RETRIEVED:\n      return state.set('localBackup', fromJS(action.payload.entry));\n    case DRAFT_CHANGE_FIELD:\n      return state.withMutations(state => {\n        state.setIn(['entry', 'data', action.payload.field], action.payload.value);\n        state.mergeDeepIn(['fieldsMetaData'], fromJS(action.payload.metadata));\n        state.set('hasChanged', true);\n      });\n\n    case DRAFT_VALIDATION_ERRORS:\n      if (action.payload.errors.length === 0) {\n        return state.deleteIn(['fieldsErrors', action.payload.uniquefieldId]);\n      } else {\n        return state.setIn(['fieldsErrors', action.payload.uniquefieldId], action.payload.errors);\n      }\n\n    case DRAFT_CLEAR_ERRORS: {\n      return state.set('fieldsErrors', Map());\n    }\n\n    case ENTRY_PERSIST_REQUEST:\n    case UNPUBLISHED_ENTRY_PERSIST_REQUEST: {\n      return state.setIn(['entry', 'isPersisting'], true);\n    }\n\n    case ENTRY_PERSIST_FAILURE:\n    case UNPUBLISHED_ENTRY_PERSIST_FAILURE: {\n      return state.deleteIn(['entry', 'isPersisting']);\n    }\n\n    case ENTRY_PERSIST_SUCCESS:\n    case UNPUBLISHED_ENTRY_PERSIST_SUCCESS:\n      return state.withMutations(state => {\n        state.deleteIn(['entry', 'isPersisting']);\n        state.set('hasChanged', false);\n        if (!state.getIn(['entry', 'slug'])) {\n          state.setIn(['entry', 'slug'], action.payload.slug);\n        }\n      });\n\n    case ENTRY_DELETE_SUCCESS:\n      return state.withMutations(state => {\n        state.deleteIn(['entry', 'isPersisting']);\n        state.set('hasChanged', false);\n      });\n\n    case ADD_ASSET:\n      if (state.has('mediaFiles')) {\n        return state.update('mediaFiles', list => list.push(action.payload.public_path));\n      }\n      return state;\n\n    case REMOVE_ASSET:\n      return state.update('mediaFiles', list => list.filterNot(path => path === action.payload));\n\n    default:\n      return state;\n  }\n};\n\nexport default entryDraftReducer;\n"],"file":"entryDraft.js"}