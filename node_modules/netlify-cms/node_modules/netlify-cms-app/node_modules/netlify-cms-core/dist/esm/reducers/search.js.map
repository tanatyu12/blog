{"version":3,"sources":["../../../src/reducers/search.js"],"names":["loadedEntries","response","page","searchTerm","defaultState","isFetching","term","entryIds","queryHits","entries","state","action","type","SEARCH_CLEAR","SEARCH_ENTRIES_REQUEST","payload","get","withMutations","map","set","SEARCH_ENTRIES_SUCCESS","entry","collection","slug","isNaN","concat","QUERY_REQUEST","namespace","QUERY_SUCCESS","mergeIn","hits"],"mappings":"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","sourcesContent":["import { Map, List } from 'immutable';\n\nimport {\n  SEARCH_ENTRIES_REQUEST,\n  SEARCH_ENTRIES_SUCCESS,\n  QUERY_REQUEST,\n  QUERY_SUCCESS,\n  SEARCH_CLEAR,\n} from 'Actions/search';\n\nlet loadedEntries;\nlet response;\nlet page;\nlet searchTerm;\n\nconst defaultState = Map({\n  isFetching: false,\n  term: null,\n  page: 0,\n  entryIds: List([]),\n  queryHits: Map({}),\n});\n\nconst entries = (state = defaultState, action) => {\n  switch (action.type) {\n    case SEARCH_CLEAR:\n      return defaultState;\n\n    case SEARCH_ENTRIES_REQUEST:\n      if (action.payload.searchTerm !== state.get('term')) {\n        return state.withMutations(map => {\n          map.set('isFetching', true);\n          map.set('term', action.payload.searchTerm);\n        });\n      }\n      return state;\n\n    case SEARCH_ENTRIES_SUCCESS:\n      loadedEntries = action.payload.entries;\n      page = action.payload.page;\n      searchTerm = action.payload.searchTerm;\n      return state.withMutations(map => {\n        const entryIds = List(\n          loadedEntries.map(entry => ({ collection: entry.collection, slug: entry.slug })),\n        );\n        map.set('isFetching', false);\n        map.set('fetchID', null);\n        map.set('page', page);\n        map.set('term', searchTerm);\n        map.set(\n          'entryIds',\n          !page || isNaN(page) || page === 0\n            ? entryIds\n            : map.get('entryIds', List()).concat(entryIds),\n        );\n      });\n\n    case QUERY_REQUEST:\n      if (action.payload.searchTerm !== state.get('term')) {\n        return state.withMutations(map => {\n          map.set('isFetching', action.payload.namespace ? true : false);\n          map.set('fetchID', action.payload.namespace);\n          map.set('term', action.payload.searchTerm);\n        });\n      }\n      return state;\n\n    case QUERY_SUCCESS:\n      searchTerm = action.payload.searchTerm;\n      response = action.payload.response;\n      return state.withMutations(map => {\n        map.set('isFetching', false);\n        map.set('fetchID', null);\n        map.set('term', searchTerm);\n        map.mergeIn(['queryHits'], Map({ [action.payload.namespace]: response.hits }));\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default entries;\n"],"file":"search.js"}