{"version":3,"sources":["../../../../../src/components/Editor/EditorControlPane/EditorControl.js"],"names":["styleStrings","label","colors","controlLabel","textFieldBorder","transitions","main","labelActive","active","textLight","labelError","errorText","colorsRaw","white","widget","lengths","inputPadding","borders","textField","borderRadius","inputBackground","widgetActive","widgetError","ControlContainer","ControlErrorsList","ControlHint","props","error","EditorControl","React","Component","activeLabel","field","get","render","value","fieldsMetaData","fieldsErrors","mediaPaths","boundGetAsset","onChange","openMediaLibrary","clearMediaControl","removeMediaControl","addAsset","removeInsertedMedia","onValidate","processControlRef","controlRef","query","queryHits","isFetching","clearSearch","clearFieldErrors","loadEntry","t","widgetName","fieldName","fieldHint","isFieldOptional","onValidateObject","metadata","errors","uniqueFieldId","css","cx","globalStyles","coreCss","map","message","trim","replace","state","styleActive","control","newValue","newMetadata","setState","resolveWidget","getEditorComponents","ConnectedEditorControl","PropTypes","oneOfType","node","object","string","bool","ImmutablePropTypes","isRequired","func","array","mapStateToProps","mediaLibrary","getAsset","bind","search","mapDispatchToProps","collectionName","slug","dispatch","getState","collection","collections","withRef"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { translate } from 'react-polyglot';\nimport { jsx, ClassNames, Global, css as coreCss } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { partial, uniqueId } from 'lodash';\nimport { connect } from 'react-redux';\nimport { colors, colorsRaw, transitions, lengths, borders } from 'netlify-cms-ui-default';\nimport { resolveWidget, getEditorComponents } from 'Lib/registry';\nimport { clearFieldErrors, loadEntry } from 'Actions/entries';\nimport { addAsset } from 'Actions/media';\nimport { query, clearSearch } from 'Actions/search';\nimport {\n  openMediaLibrary,\n  removeInsertedMedia,\n  clearMediaControl,\n  removeMediaControl,\n} from 'Actions/mediaLibrary';\nimport { getAsset } from 'Reducers';\nimport Widget from './Widget';\n\n/**\n * This is a necessary bridge as we are still passing classnames to widgets\n * for styling. Once that changes we can stop storing raw style strings like\n * this.\n */\nconst styleStrings = {\n  label: `\n    color: ${colors.controlLabel};\n    background-color: ${colors.textFieldBorder};\n    display: inline-block;\n    font-size: 12px;\n    text-transform: uppercase;\n    font-weight: 600;\n    border: 0;\n    border-radius: 3px 3px 0 0;\n    padding: 3px 6px 2px;\n    margin: 0;\n    transition: all ${transitions.main};\n    position: relative;\n\n    /**\n     * Faux outside curve into top of input\n     */\n    &:before,\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: -4px;\n      height: 100%;\n      width: 4px;\n      background-color: inherit;\n    }\n\n    &:after {\n      border-bottom-left-radius: 3px;\n      background-color: #fff;\n    }\n  `,\n  labelActive: `\n    background-color: ${colors.active};\n    color: ${colors.textLight};\n  `,\n  labelError: `\n    background-color: ${colors.errorText};\n    color: ${colorsRaw.white};\n  `,\n  widget: `\n    display: block;\n    width: 100%;\n    padding: ${lengths.inputPadding};\n    margin: 0;\n    border: ${borders.textField};\n    border-radius: ${lengths.borderRadius};\n    border-top-left-radius: 0;\n    outline: 0;\n    box-shadow: none;\n    background-color: ${colors.inputBackground};\n    color: #444a57;\n    transition: border-color ${transitions.main};\n    position: relative;\n    font-size: 15px;\n    line-height: 1.5;\n\n    select& {\n      text-indent: 14px;\n      height: 58px;\n    }\n  `,\n  widgetActive: `\n    border-color: ${colors.active};\n  `,\n  widgetError: `\n    border-color: ${colors.errorText};\n  `,\n};\n\nconst ControlContainer = styled.div`\n  margin-top: 16px;\n\n  &:first-of-type {\n    margin-top: 36px;\n  }\n`;\n\nconst ControlErrorsList = styled.ul`\n  list-style-type: none;\n  font-size: 12px;\n  color: ${colors.errorText};\n  margin-bottom: 5px;\n  text-align: right;\n  text-transform: uppercase;\n  position: relative;\n  font-weight: 600;\n  top: 20px;\n`;\n\nexport const ControlHint = styled.p`\n  margin-bottom: 0;\n  padding: 3px 0;\n  font-size: 12px;\n  color: ${props =>\n    props.error ? colors.errorText : props.active ? colors.active : colors.controlLabel};\n  transition: color ${transitions.main};\n`;\n\nclass EditorControl extends React.Component {\n  static propTypes = {\n    value: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    field: ImmutablePropTypes.map.isRequired,\n    fieldsMetaData: ImmutablePropTypes.map,\n    fieldsErrors: ImmutablePropTypes.map,\n    mediaPaths: ImmutablePropTypes.map.isRequired,\n    boundGetAsset: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n    openMediaLibrary: PropTypes.func.isRequired,\n    addAsset: PropTypes.func.isRequired,\n    removeInsertedMedia: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n    processControlRef: PropTypes.func,\n    controlRef: PropTypes.func,\n    query: PropTypes.func.isRequired,\n    queryHits: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n    isFetching: PropTypes.bool,\n    clearSearch: PropTypes.func.isRequired,\n    clearFieldErrors: PropTypes.func.isRequired,\n    loadEntry: PropTypes.func.isRequired,\n    t: PropTypes.func.isRequired,\n  };\n\n  state = {\n    activeLabel: false,\n  };\n\n  uniqueFieldId = uniqueId(`${this.props.field.get('name')}-field-`);\n\n  render() {\n    const {\n      value,\n      field,\n      fieldsMetaData,\n      fieldsErrors,\n      mediaPaths,\n      boundGetAsset,\n      onChange,\n      openMediaLibrary,\n      clearMediaControl,\n      removeMediaControl,\n      addAsset,\n      removeInsertedMedia,\n      onValidate,\n      processControlRef,\n      controlRef,\n      query,\n      queryHits,\n      isFetching,\n      clearSearch,\n      clearFieldErrors,\n      loadEntry,\n      t,\n    } = this.props;\n    const widgetName = field.get('widget');\n    const widget = resolveWidget(widgetName);\n    const fieldName = field.get('name');\n    const fieldHint = field.get('hint');\n    const isFieldOptional = field.get('required') === false;\n    const onValidateObject = onValidate;\n    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);\n    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);\n    return (\n      <ClassNames>\n        {({ css, cx }) => (\n          <ControlContainer>\n            {widget.globalStyles && <Global styles={coreCss`${widget.globalStyles}`} />}\n            <ControlErrorsList>\n              {errors &&\n                errors.map(\n                  error =>\n                    error.message &&\n                    typeof error.message === 'string' && (\n                      <li key={error.message.trim().replace(/[^a-z0-9]+/gi, '-')}>\n                        {error.message}\n                      </li>\n                    ),\n                )}\n            </ControlErrorsList>\n            <label\n              className={cx(\n                css`\n                  ${styleStrings.label};\n                `,\n                this.state.styleActive &&\n                  css`\n                    ${styleStrings.labelActive};\n                  `,\n                !!errors &&\n                  css`\n                    ${styleStrings.labelError};\n                  `,\n              )}\n              htmlFor={this.uniqueFieldId}\n            >\n              {`${field.get('label', field.get('name'))}${isFieldOptional ? ' (optional)' : ''}`}\n            </label>\n            <Widget\n              classNameWrapper={cx(\n                css`\n                  ${styleStrings.widget};\n                `,\n                {\n                  [css`\n                    ${styleStrings.widgetActive};\n                  `]: this.state.styleActive,\n                },\n                {\n                  [css`\n                    ${styleStrings.widgetError};\n                  `]: !!errors,\n                },\n              )}\n              classNameWidget={css`\n                ${styleStrings.widget};\n              `}\n              classNameWidgetActive={css`\n                ${styleStrings.widgetActive};\n              `}\n              classNameLabel={css`\n                ${styleStrings.label};\n              `}\n              classNameLabelActive={css`\n                ${styleStrings.labelActive};\n              `}\n              controlComponent={widget.control}\n              field={field}\n              uniqueFieldId={this.uniqueFieldId}\n              value={value}\n              mediaPaths={mediaPaths}\n              metadata={metadata}\n              onChange={(newValue, newMetadata) => onChange(fieldName, newValue, newMetadata)}\n              onValidate={onValidate && partial(onValidate, this.uniqueFieldId)}\n              onOpenMediaLibrary={openMediaLibrary}\n              onClearMediaControl={clearMediaControl}\n              onRemoveMediaControl={removeMediaControl}\n              onRemoveInsertedMedia={removeInsertedMedia}\n              onAddAsset={addAsset}\n              getAsset={boundGetAsset}\n              hasActiveStyle={this.state.styleActive}\n              setActiveStyle={() => this.setState({ styleActive: true })}\n              setInactiveStyle={() => this.setState({ styleActive: false })}\n              resolveWidget={resolveWidget}\n              getEditorComponents={getEditorComponents}\n              ref={processControlRef && partial(processControlRef, field)}\n              controlRef={controlRef}\n              editorControl={ConnectedEditorControl}\n              query={query}\n              loadEntry={loadEntry}\n              queryHits={queryHits}\n              clearSearch={clearSearch}\n              clearFieldErrors={clearFieldErrors}\n              isFetching={isFetching}\n              fieldsErrors={fieldsErrors}\n              onValidateObject={onValidateObject}\n              t={t}\n            />\n            {fieldHint && (\n              <ControlHint active={this.state.styleActive} error={!!errors}>\n                {fieldHint}\n              </ControlHint>\n            )}\n          </ControlContainer>\n        )}\n      </ClassNames>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mediaPaths: state.mediaLibrary.get('controlMedia'),\n  boundGetAsset: getAsset.bind(null, state),\n  isFetching: state.search.get('isFetching'),\n  queryHits: state.search.get('queryHits'),\n});\n\nconst mapDispatchToProps = {\n  openMediaLibrary,\n  clearMediaControl,\n  removeMediaControl,\n  removeInsertedMedia,\n  addAsset,\n  query,\n  loadEntry: (collectionName, slug) => (dispatch, getState) => {\n    const collection = getState().collections.get(collectionName);\n    return loadEntry(collection, slug)(dispatch, getState);\n  },\n  clearSearch,\n  clearFieldErrors,\n};\n\nconst ConnectedEditorControl = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  { withRef: true },\n)(translate()(EditorControl));\n\nexport default ConnectedEditorControl;\n"],"file":"EditorControl.js"}