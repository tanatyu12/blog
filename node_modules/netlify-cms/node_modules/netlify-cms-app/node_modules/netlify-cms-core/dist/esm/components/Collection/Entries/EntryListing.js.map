{"version":3,"sources":["../../../../../src/components/Collection/Entries/EntryListing.js"],"names":["CardsGrid","EntryListing","React","Component","props","cursor","handleCursorActions","Cursor","create","actions","has","collection","titleField","descriptionField","imageField","fields","inferedFields","remainingFields","filter","f","indexOf","get","collections","entries","publicFolder","viewStyle","inferFields","entryCardProps","map","entry","idx","collectionName","find","coll","collectionLabel","render","Map","isMap","renderCardsForSingleCollection","renderCardsForMultipleCollections","handleLoadMore","PropTypes","string","isRequired","ImmutablePropTypes","iterable","list","any","func"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAf;;AAOe,MAAMC,YAAN,SAA2BC,eAAMC,SAAjC,CAA2C;AAAA;AAAA;;AAAA,4CAUvC,MAAM;AAAA,0BACmB,KAAKC,KADxB;AAAA,YACbC,MADa,eACbA,MADa;AAAA,YACLC,mBADK,eACLA,mBADK;;AAErB,UAAIC,0BAAOC,MAAP,CAAcH,MAAd,EAAsBI,OAAtB,CAA8BC,GAA9B,CAAkC,aAAlC,CAAJ,EAAsD;AACpDJ,QAAAA,mBAAmB,CAAC,aAAD,CAAnB;AACD;AACF,KAfuD;;AAAA,yCAiB1CK,UAAU,IAAI;AAC1B,YAAMC,UAAU,GAAG,qCAAmBD,UAAnB,EAA+B,OAA/B,CAAnB;AACA,YAAME,gBAAgB,GAAG,qCAAmBF,UAAnB,EAA+B,aAA/B,CAAzB;AACA,YAAMG,UAAU,GAAG,qCAAmBH,UAAnB,EAA+B,OAA/B,CAAnB;AACA,YAAMI,MAAM,GAAG,+BAAaJ,UAAb,CAAf;AACA,YAAMK,aAAa,GAAG,CAACJ,UAAD,EAAaC,gBAAb,EAA+BC,UAA/B,CAAtB;AACA,YAAMG,eAAe,GACnBF,MAAM,IAAIA,MAAM,CAACG,MAAP,CAAcC,CAAC,IAAIH,aAAa,CAACI,OAAd,CAAsBD,CAAC,CAACE,GAAF,CAAM,MAAN,CAAtB,MAAyC,CAAC,CAA7D,CADZ;AAEA,aAAO;AAAET,QAAAA,UAAF;AAAcC,QAAAA,gBAAd;AAAgCC,QAAAA,UAAhC;AAA4CG,QAAAA;AAA5C,OAAP;AACD,KA1BuD;;AAAA,4DA4BvB,MAAM;AAAA,2BACqB,KAAKb,KAD1B;AAAA,YAC7BkB,WAD6B,gBAC7BA,WAD6B;AAAA,YAChBC,OADgB,gBAChBA,OADgB;AAAA,YACPC,YADO,gBACPA,YADO;AAAA,YACOC,SADP,gBACOA,SADP;AAErC,YAAMT,aAAa,GAAG,KAAKU,WAAL,CAAiBJ,WAAjB,CAAtB;AACA,YAAMK,cAAc,GAAG;AAAEhB,QAAAA,UAAU,EAAEW,WAAd;AAA2BN,QAAAA,aAA3B;AAA0CQ,QAAAA,YAA1C;AAAwDC,QAAAA;AAAxD,OAAvB;AACA,aAAOF,OAAO,CAACK,GAAR,CAAY,CAACC,KAAD,EAAQC,GAAR,KAAgB,6BAAC,kBAAD,eAAeH,cAAf;AAA+B,QAAA,KAAK,EAAEE,KAAtC;AAA6C,QAAA,GAAG,EAAEC;AAAlD,SAA5B,CAAP;AACD,KAjCuD;;AAAA,+DAmCpB,MAAM;AAAA,2BACO,KAAK1B,KADZ;AAAA,YAChCkB,WADgC,gBAChCA,WADgC;AAAA,YACnBC,OADmB,gBACnBA,OADmB;AAAA,YACVC,YADU,gBACVA,YADU;AAExC,aAAOD,OAAO,CAACK,GAAR,CAAY,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjC,cAAMC,cAAc,GAAGF,KAAK,CAACR,GAAN,CAAU,YAAV,CAAvB;AACA,cAAMV,UAAU,GAAGW,WAAW,CAACU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACZ,GAAL,CAAS,MAAT,MAAqBU,cAA9C,CAAnB;AACA,cAAMG,eAAe,GAAGvB,UAAU,CAACU,GAAX,CAAe,OAAf,CAAxB;AACA,cAAML,aAAa,GAAG,KAAKU,WAAL,CAAiBf,UAAjB,CAAtB;AACA,cAAMgB,cAAc,GAAG;AAAEhB,UAAAA,UAAF;AAAckB,UAAAA,KAAd;AAAqBb,UAAAA,aAArB;AAAoCQ,UAAAA,YAApC;AAAkDU,UAAAA;AAAlD,SAAvB;AACA,eAAO,6BAAC,kBAAD,eAAeP,cAAf;AAA+B,UAAA,GAAG,EAAEG;AAApC,WAAP;AACD,OAPM,CAAP;AAQD,KA7CuD;AAAA;;AA+CxDK,EAAAA,MAAM,GAAG;AAAA,UACCb,WADD,GACiB,KAAKlB,KADtB,CACCkB,WADD;AAGP,WACE,0CACE,6BAAC,SAAD,QACGc,eAAIC,KAAJ,CAAUf,WAAV,IACG,KAAKgB,8BAAL,EADH,GAEG,KAAKC,iCAAL,EAHN,EAIE,6BAAC,sBAAD;AAAU,MAAA,OAAO,EAAE,KAAKC;AAAxB,MAJF,CADF,CADF;AAUD;;AA5DuD;;;;gBAArCvC,Y,eACA;AACjBuB,EAAAA,YAAY,EAAEiB,mBAAUC,MAAV,CAAiBC,UADd;AAEjBrB,EAAAA,WAAW,EAAEsB,iCAAmBC,QAAnB,CAA4BF,UAFxB;AAGjBpB,EAAAA,OAAO,EAAEqB,iCAAmBE,IAHX;AAIjBrB,EAAAA,SAAS,EAAEgB,mBAAUC,MAJJ;AAKjBrC,EAAAA,MAAM,EAAEoC,mBAAUM,GAAV,CAAcJ,UALL;AAMjBrC,EAAAA,mBAAmB,EAAEmC,mBAAUO,IAAV,CAAeL;AANnB,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport styled from '@emotion/styled';\nimport Waypoint from 'react-waypoint';\nimport { Map } from 'immutable';\nimport { Cursor } from 'netlify-cms-lib-util';\nimport { selectFields, selectInferedField } from 'Reducers/collections';\nimport EntryCard from './EntryCard';\n\nconst CardsGrid = styled.ul`\n  display: flex;\n  flex-flow: row wrap;\n  list-style-type: none;\n  margin-left: -12px;\n`;\n\nexport default class EntryListing extends React.Component {\n  static propTypes = {\n    publicFolder: PropTypes.string.isRequired,\n    collections: ImmutablePropTypes.iterable.isRequired,\n    entries: ImmutablePropTypes.list,\n    viewStyle: PropTypes.string,\n    cursor: PropTypes.any.isRequired,\n    handleCursorActions: PropTypes.func.isRequired,\n  };\n\n  handleLoadMore = () => {\n    const { cursor, handleCursorActions } = this.props;\n    if (Cursor.create(cursor).actions.has('append_next')) {\n      handleCursorActions('append_next');\n    }\n  };\n\n  inferFields = collection => {\n    const titleField = selectInferedField(collection, 'title');\n    const descriptionField = selectInferedField(collection, 'description');\n    const imageField = selectInferedField(collection, 'image');\n    const fields = selectFields(collection);\n    const inferedFields = [titleField, descriptionField, imageField];\n    const remainingFields =\n      fields && fields.filter(f => inferedFields.indexOf(f.get('name')) === -1);\n    return { titleField, descriptionField, imageField, remainingFields };\n  };\n\n  renderCardsForSingleCollection = () => {\n    const { collections, entries, publicFolder, viewStyle } = this.props;\n    const inferedFields = this.inferFields(collections);\n    const entryCardProps = { collection: collections, inferedFields, publicFolder, viewStyle };\n    return entries.map((entry, idx) => <EntryCard {...entryCardProps} entry={entry} key={idx} />);\n  };\n\n  renderCardsForMultipleCollections = () => {\n    const { collections, entries, publicFolder } = this.props;\n    return entries.map((entry, idx) => {\n      const collectionName = entry.get('collection');\n      const collection = collections.find(coll => coll.get('name') === collectionName);\n      const collectionLabel = collection.get('label');\n      const inferedFields = this.inferFields(collection);\n      const entryCardProps = { collection, entry, inferedFields, publicFolder, collectionLabel };\n      return <EntryCard {...entryCardProps} key={idx} />;\n    });\n  };\n\n  render() {\n    const { collections } = this.props;\n\n    return (\n      <div>\n        <CardsGrid>\n          {Map.isMap(collections)\n            ? this.renderCardsForSingleCollection()\n            : this.renderCardsForMultipleCollections()}\n          <Waypoint onEnter={this.handleLoadMore} />\n        </CardsGrid>\n      </div>\n    );\n  }\n}\n"],"file":"EntryListing.js"}