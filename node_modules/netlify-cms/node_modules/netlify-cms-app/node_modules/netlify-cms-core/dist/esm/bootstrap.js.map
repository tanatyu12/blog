{"version":3,"sources":["../../src/bootstrap.js"],"names":["ROOT_ID","bootstrap","opts","config","console","log","getRoot","existingRoot","document","getElementById","newRoot","createElement","id","body","appendChild","store","dispatch","Root","history","App"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,OAAO,GAAG,SAAhB;;AAEA,SAASC,SAAT,GAA8B;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AAAA,QACpBC,MADoB,GACTD,IADS,CACpBC,MADoB;AAG5B;;;;AAGA,MAAI,oBAAoC,QAAxC,EAAkD;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAD,QAA6C,EAAzD;AACD;AAED;;;;;AAGA,WAASC,OAAT,GAAmB;AACjB;;;AAGA,UAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwBT,OAAxB,CAArB;;AACA,QAAIO,YAAJ,EAAkB;AAChB,aAAOA,YAAP;AACD;AAED;;;;;AAGA,UAAMG,OAAO,GAAGF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAAhB;AACAD,IAAAA,OAAO,CAACE,EAAR,GAAaZ,OAAb;AACAQ,IAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BJ,OAA1B;AACA,WAAOA,OAAP;AACD;AAED;;;;;;;AAKA,MAAIP,MAAJ,EAAY;AACVY,mBAAMC,QAAN,CAAe,yBAAYb,MAAZ,CAAf;AACD;AAED;;;;;AAGA,QAAMc,IAAI,GAAG,MACX,4DACE,6BAAC,iCAAD,OADF,EAEE,6BAAC,mBAAD;AAAM,IAAA,MAAM,EAAE,IAAd;AAAoB,IAAA,QAAQ,EAAE;AAA9B,KACE,6BAAC,iBAAD;AAAe,IAAA,UAAU;AAAzB,KACE,6BAAC,oBAAD;AAAU,IAAA,KAAK,EAAEF;AAAjB,KACE,6BAAC,iCAAD;AAAiB,IAAA,OAAO,EAAEG;AAA1B,KACE,6BAAC,qBAAD;AAAO,IAAA,SAAS,EAAEC;AAAlB,IADF,CADF,CADF,CADF,CAFF,CADF;AAeA;;;;;AAGA,wBAAO,6BAAC,IAAD,OAAP,EAAiBb,OAAO,EAAxB;AACD;;eAEcL,S","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { ConnectedRouter } from 'react-router-redux';\nimport history from 'Routing/history';\nimport store from 'ReduxStore';\nimport { mergeConfig } from 'Actions/config';\nimport { getPhrases } from 'Constants/defaultPhrases';\nimport { I18n } from 'react-polyglot';\nimport { GlobalStyles } from 'netlify-cms-ui-default';\nimport { ErrorBoundary } from 'UI';\nimport App from 'App/App';\nimport 'EditorWidgets';\nimport 'coreSrc/mediaLibrary';\nimport 'what-input';\n\nconst ROOT_ID = 'nc-root';\n\nfunction bootstrap(opts = {}) {\n  const { config } = opts;\n\n  /**\n   * Log the version number.\n   */\n  if (typeof NETLIFY_CMS_CORE_VERSION === 'string') {\n    console.log(`netlify-cms-core ${NETLIFY_CMS_CORE_VERSION}`);\n  }\n\n  /**\n   * Get DOM element where app will mount.\n   */\n  function getRoot() {\n    /**\n     * Return existing root if found.\n     */\n    const existingRoot = document.getElementById(ROOT_ID);\n    if (existingRoot) {\n      return existingRoot;\n    }\n\n    /**\n     * If no existing root, create and return a new root.\n     */\n    const newRoot = document.createElement('div');\n    newRoot.id = ROOT_ID;\n    document.body.appendChild(newRoot);\n    return newRoot;\n  }\n\n  /**\n   * Dispatch config to store if received. This config will be merged into\n   * config.yml if it exists, and any portion that produces a conflict will be\n   * overwritten.\n   */\n  if (config) {\n    store.dispatch(mergeConfig(config));\n  }\n\n  /**\n   * Create connected root component.\n   */\n  const Root = () => (\n    <>\n      <GlobalStyles />\n      <I18n locale={'en'} messages={getPhrases()}>\n        <ErrorBoundary showBackup>\n          <Provider store={store}>\n            <ConnectedRouter history={history}>\n              <Route component={App} />\n            </ConnectedRouter>\n          </Provider>\n        </ErrorBoundary>\n      </I18n>\n    </>\n  );\n\n  /**\n   * Render application root.\n   */\n  render(<Root />, getRoot());\n}\n\nexport default bootstrap;\n"],"file":"bootstrap.js"}