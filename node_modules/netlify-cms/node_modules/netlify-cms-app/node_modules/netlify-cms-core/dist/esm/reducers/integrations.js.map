{"version":3,"sources":["../../../src/reducers/integrations.js"],"names":["integrations","state","action","type","CONFIG_SUCCESS","payload","get","toJS","newState","reduce","acc","integration","hooks","collections","provider","providerData","providers","forEach","hook","integrationCollections","map","collection","name","selectIntegration","getIn"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,MAAMA,YAAY,GAAG,SAAfA,YAAe,GAA0B;AAAA,MAAzBC,KAAyB,uEAAjB,IAAiB;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,sBAAL;AAAqB;AACnB,cAAMJ,YAAY,GAAGE,MAAM,CAACG,OAAP,CAAeC,GAAf,CAAmB,cAAnB,EAAmC,sBAAnC,EAA2CC,IAA3C,MAAqD,EAA1E;AACA,cAAMC,QAAQ,GAAGR,YAAY,CAACS,MAAb,CACf,CAACC,GAAD,EAAMC,WAAN,KAAsB;AAAA,gBACZC,KADY,GACsCD,WADtC,CACZC,KADY;AAAA,gBACLC,WADK,GACsCF,WADtC,CACLE,WADK;AAAA,gBACQC,QADR,GACsCH,WADtC,CACQG,QADR;AAAA,gBACqBC,YADrB,4BACsCJ,WADtC;;AAEpBD,UAAAA,GAAG,CAACM,SAAJ,CAAcF,QAAd,sBAA+BC,YAA/B;;AACA,cAAI,CAACF,WAAL,EAAkB;AAChBD,YAAAA,KAAK,CAACK,OAAN,CAAcC,IAAI,IAAI;AACpBR,cAAAA,GAAG,CAACE,KAAJ,CAAUM,IAAV,IAAkBJ,QAAlB;AACD,aAFD;AAGA,mBAAOJ,GAAP;AACD;;AACD,gBAAMS,sBAAsB,GAC1BN,WAAW,KAAK,GAAhB,GACIX,MAAM,CAACG,OAAP,CAAeQ,WAAf,CAA2BO,GAA3B,CAA+BC,UAAU,IAAIA,UAAU,CAACC,IAAxD,CADJ,GAEIT,WAHN;AAIAM,UAAAA,sBAAsB,CAACF,OAAvB,CAA+BI,UAAU,IAAI;AAC3CT,YAAAA,KAAK,CAACK,OAAN,CAAcC,IAAI,IAAI;AACpBR,cAAAA,GAAG,CAACE,KAAJ,CAAUS,UAAV,IACKX,GAAG,CAACE,KAAJ,CAAUS,UAAV,EAAsBH,IAAtB,IAA8BJ,QADnC,GAEKJ,GAAG,CAACE,KAAJ,CAAUS,UAAV,IAAwB;AAAE,iBAACH,IAAD,GAAQJ;AAAV,eAF7B;AAGD,aAJD;AAKD,WAND;AAOA,iBAAOJ,GAAP;AACD,SAtBc,EAuBf;AAAEM,UAAAA,SAAS,EAAE,EAAb;AAAiBJ,UAAAA,KAAK,EAAE;AAAxB,SAvBe,CAAjB;AAyBA,eAAO,uBAAOJ,QAAP,CAAP;AACD;;AACD;AACE,aAAOP,KAAP;AA/BJ;AAiCD,CAlCD;;AAoCO,MAAMsB,iBAAiB,GAAG,CAACtB,KAAD,EAAQoB,UAAR,EAAoBH,IAApB,KAC/BG,UAAU,GACNpB,KAAK,CAACuB,KAAN,CAAY,CAAC,OAAD,EAAUH,UAAV,EAAsBH,IAAtB,CAAZ,EAAyC,KAAzC,CADM,GAENjB,KAAK,CAACuB,KAAN,CAAY,CAAC,OAAD,EAAUN,IAAV,CAAZ,EAA6B,KAA7B,CAHC;;;eAKQlB,Y","sourcesContent":["import { fromJS, List } from 'immutable';\nimport { CONFIG_SUCCESS } from 'Actions/config';\n\nconst integrations = (state = null, action) => {\n  switch (action.type) {\n    case CONFIG_SUCCESS: {\n      const integrations = action.payload.get('integrations', List()).toJS() || [];\n      const newState = integrations.reduce(\n        (acc, integration) => {\n          const { hooks, collections, provider, ...providerData } = integration;\n          acc.providers[provider] = { ...providerData };\n          if (!collections) {\n            hooks.forEach(hook => {\n              acc.hooks[hook] = provider;\n            });\n            return acc;\n          }\n          const integrationCollections =\n            collections === '*'\n              ? action.payload.collections.map(collection => collection.name)\n              : collections;\n          integrationCollections.forEach(collection => {\n            hooks.forEach(hook => {\n              acc.hooks[collection]\n                ? (acc.hooks[collection][hook] = provider)\n                : (acc.hooks[collection] = { [hook]: provider });\n            });\n          });\n          return acc;\n        },\n        { providers: {}, hooks: {} },\n      );\n      return fromJS(newState);\n    }\n    default:\n      return state;\n  }\n};\n\nexport const selectIntegration = (state, collection, hook) =>\n  collection\n    ? state.getIn(['hooks', collection, hook], false)\n    : state.getIn(['hooks', hook], false);\n\nexport default integrations;\n"],"file":"integrations.js"}