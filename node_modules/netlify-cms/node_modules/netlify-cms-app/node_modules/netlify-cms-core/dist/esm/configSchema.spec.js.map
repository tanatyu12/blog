{"version":3,"sources":["../../src/constants/__tests__/configSchema.spec.js"],"names":["describe","beforeEach","jest","spyOn","console","it","config","foo","backend","name","media_folder","collections","label","folder","fields","widget","expect","not","toThrowError"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvB;;;;AAIAC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,IAAI,CAACC,KAAL,CAAWC,OAAX,EAAoB,OAApB;AACD,GAFS,CAAV;AAIAJ,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BK,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxC,YAAMC,MAAM,GAAG;AACbC,QAAAA,GAAG,EAAE,KADQ;AAEbC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAFI;AAGbC,QAAAA,YAAY,EAAE,KAHD;AAIbC,QAAAA,WAAW,EAAE,CACX;AACEF,UAAAA,IAAI,EAAE,OADR;AAEEG,UAAAA,KAAK,EAAE,OAFT;AAGEC,UAAAA,MAAM,EAAE,QAHV;AAIEC,UAAAA,MAAM,EAAE,CAAC;AAAEL,YAAAA,IAAI,EAAE,OAAR;AAAiBG,YAAAA,KAAK,EAAE,OAAxB;AAAiCG,YAAAA,MAAM,EAAE;AAAzC,WAAD;AAJV,SADW;AAJA,OAAf;AAaAC,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAeV,MAAf;AACD,OAFK,CAAN,CAEGW,GAFH,CAEOC,YAFP;AAGD,KAjBC,CAAF;AAmBAb,IAAAA,EAAE,CAAC,kDAAD,EAAqD,MAAM;AAC3DW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AAAET,UAAAA,GAAG,EAAE;AAAP,SAAf;AACD,OAFK,CAAN,CAEGW,YAFH,CAEgB,gDAFhB;AAGD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAChEW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AAAET,UAAAA,GAAG,EAAE,KAAP;AAAcC,UAAAA,OAAO,EAAE;AAAvB,SAAf;AACD,OAFK,CAAN,CAEGU,YAFH,CAEgB,gDAFhB;AAGD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,wDAAD,EAA2D,MAAM;AACjEW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AAAET,UAAAA,GAAG,EAAE,KAAP;AAAcC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAAvB,SAAf;AACD,OAFK,CAAN,CAEGS,YAFH,CAEgB,iCAFhB;AAGD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAChEW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AAAET,UAAAA,GAAG,EAAE,KAAP;AAAcC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAAvB,SAAf;AACD,OAFK,CAAN,CAEGS,YAFH,CAEgB,qDAFhB;AAGD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,wDAAD,EAA2D,MAAM;AACjEW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AAAET,UAAAA,GAAG,EAAE,KAAP;AAAcC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAAvB;AAAwCC,UAAAA,YAAY,EAAE;AAAtD,SAAf;AACD,OAFK,CAAN,CAEGQ,YAFH,CAEgB,iCAFhB;AAGD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,sDAAD,EAAyD,MAAM;AAC/DW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AAAET,UAAAA,GAAG,EAAE,KAAP;AAAcC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAAvB;AAAwCC,UAAAA,YAAY,EAAE;AAAtD,SAAf;AACD,OAFK,CAAN,CAEGQ,YAFH,CAEgB,oDAFhB;AAGD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAC7DW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AACbT,UAAAA,GAAG,EAAE,KADQ;AAEbC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAFI;AAGbC,UAAAA,YAAY,EAAE,KAHD;AAIbC,UAAAA,WAAW,EAAE;AAJA,SAAf;AAMD,OAPK,CAAN,CAOGO,YAPH,CAOgB,+BAPhB;AAQD,KATC,CAAF;AAWAb,IAAAA,EAAE,CAAC,yDAAD,EAA4D,MAAM;AAClEW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AACbT,UAAAA,GAAG,EAAE,KADQ;AAEbC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAFI;AAGbC,UAAAA,YAAY,EAAE,KAHD;AAIbC,UAAAA,WAAW,EAAE;AAJA,SAAf;AAMD,OAPK,CAAN,CAOGO,YAPH,CAOgB,kDAPhB;AAQD,KATC,CAAF;AAWAb,IAAAA,EAAE,CAAC,8EAAD,EAAiF,MAAM;AACvFW,MAAAA,MAAM,CAAC,MAAM;AACX,0CAAe;AACbT,UAAAA,GAAG,EAAE,KADQ;AAEbC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAFI;AAGbC,UAAAA,YAAY,EAAE,KAHD;AAIbC,UAAAA,WAAW,EAAE,CAAC,IAAD;AAJA,SAAf;AAMD,OAPK,CAAN,CAOGO,YAPH,CAOgB,mCAPhB;AAQD,KATC,CAAF;AAUD,GAxFO,CAAR;AAyFD,CAlGO,CAAR","sourcesContent":["import { validateConfig } from '../configSchema';\n\ndescribe('config', () => {\n  /**\n   * Suppress error logging to reduce noise during testing. Jest will still\n   * log test failures and associated errors as expected.\n   */\n  beforeEach(() => {\n    jest.spyOn(console, 'error');\n  });\n\n  describe('validateConfig', () => {\n    it('should not throw if no errors', () => {\n      const config = {\n        foo: 'bar',\n        backend: { name: 'bar' },\n        media_folder: 'baz',\n        collections: [\n          {\n            name: 'posts',\n            label: 'Posts',\n            folder: '_posts',\n            fields: [{ name: 'title', label: 'title', widget: 'string' }],\n          },\n        ],\n      };\n      expect(() => {\n        validateConfig(config);\n      }).not.toThrowError();\n    });\n\n    it('should throw if backend is not defined in config', () => {\n      expect(() => {\n        validateConfig({ foo: 'bar' });\n      }).toThrowError(\"config should have required property 'backend'\");\n    });\n\n    it('should throw if backend name is not defined in config', () => {\n      expect(() => {\n        validateConfig({ foo: 'bar', backend: {} });\n      }).toThrowError(\"'backend' should have required property 'name'\");\n    });\n\n    it('should throw if backend name is not a string in config', () => {\n      expect(() => {\n        validateConfig({ foo: 'bar', backend: { name: {} } });\n      }).toThrowError(\"'backend.name' should be string\");\n    });\n\n    it('should throw if media_folder is not defined in config', () => {\n      expect(() => {\n        validateConfig({ foo: 'bar', backend: { name: 'bar' } });\n      }).toThrowError(\"config should have required property 'media_folder'\");\n    });\n\n    it('should throw if media_folder is not a string in config', () => {\n      expect(() => {\n        validateConfig({ foo: 'bar', backend: { name: 'bar' }, media_folder: {} });\n      }).toThrowError(\"'media_folder' should be string\");\n    });\n\n    it('should throw if collections is not defined in config', () => {\n      expect(() => {\n        validateConfig({ foo: 'bar', backend: { name: 'bar' }, media_folder: 'baz' });\n      }).toThrowError(\"config should have required property 'collections'\");\n    });\n\n    it('should throw if collections not an array in config', () => {\n      expect(() => {\n        validateConfig({\n          foo: 'bar',\n          backend: { name: 'bar' },\n          media_folder: 'baz',\n          collections: {},\n        });\n      }).toThrowError(\"'collections' should be array\");\n    });\n\n    it('should throw if collections is an empty array in config', () => {\n      expect(() => {\n        validateConfig({\n          foo: 'bar',\n          backend: { name: 'bar' },\n          media_folder: 'baz',\n          collections: [],\n        });\n      }).toThrowError(\"'collections' should NOT have fewer than 1 items\");\n    });\n\n    it('should throw if collections is an array with a single null element in config', () => {\n      expect(() => {\n        validateConfig({\n          foo: 'bar',\n          backend: { name: 'bar' },\n          media_folder: 'baz',\n          collections: [null],\n        });\n      }).toThrowError(\"'collections[0]' should be object\");\n    });\n  });\n});\n"],"file":"configSchema.spec.js"}