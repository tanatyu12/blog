{"version":3,"sources":["../../../src/actions/search.js"],"names":["SEARCH_ENTRIES_REQUEST","SEARCH_ENTRIES_SUCCESS","SEARCH_ENTRIES_FAILURE","QUERY_REQUEST","QUERY_SUCCESS","QUERY_FAILURE","SEARCH_CLEAR","searchingEntries","searchTerm","type","payload","searchSuccess","entries","page","searchFailure","error","querying","namespace","collection","searchFields","querySuccess","response","queryFailure","clearSearch","searchEntries","dispatch","getState","state","backend","config","allCollections","collections","keySeq","toArray","filter","integration","searchPromise","integrations","getToken","search","valueSeq","then","pagination","query","collectionName","find","get","queryPromise","searchBy","map","f"],"mappings":"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","sourcesContent":["import { currentBackend } from 'coreSrc/backend';\nimport { getIntegrationProvider } from 'Integrations';\nimport { selectIntegration } from 'Reducers';\n\n/*\n * Contant Declarations\n */\nexport const SEARCH_ENTRIES_REQUEST = 'SEARCH_ENTRIES_REQUEST';\nexport const SEARCH_ENTRIES_SUCCESS = 'SEARCH_ENTRIES_SUCCESS';\nexport const SEARCH_ENTRIES_FAILURE = 'SEARCH_ENTRIES_FAILURE';\n\nexport const QUERY_REQUEST = 'INIT_QUERY';\nexport const QUERY_SUCCESS = 'QUERY_OK';\nexport const QUERY_FAILURE = 'QUERY_ERROR';\n\nexport const SEARCH_CLEAR = 'SEARCH_CLEAR';\n\n/*\n * Simple Action Creators (Internal)\n * We still need to export them for tests\n */\nexport function searchingEntries(searchTerm) {\n  return {\n    type: SEARCH_ENTRIES_REQUEST,\n    payload: { searchTerm },\n  };\n}\n\nexport function searchSuccess(searchTerm, entries, page) {\n  return {\n    type: SEARCH_ENTRIES_SUCCESS,\n    payload: {\n      searchTerm,\n      entries,\n      page,\n    },\n  };\n}\n\nexport function searchFailure(searchTerm, error) {\n  return {\n    type: SEARCH_ENTRIES_FAILURE,\n    payload: {\n      searchTerm,\n      error,\n    },\n  };\n}\n\nexport function querying(namespace, collection, searchFields, searchTerm) {\n  return {\n    type: QUERY_REQUEST,\n    payload: {\n      namespace,\n      collection,\n      searchFields,\n      searchTerm,\n    },\n  };\n}\n\nexport function querySuccess(namespace, collection, searchFields, searchTerm, response) {\n  return {\n    type: QUERY_SUCCESS,\n    payload: {\n      namespace,\n      collection,\n      searchFields,\n      searchTerm,\n      response,\n    },\n  };\n}\n\nexport function queryFailure(namespace, collection, searchFields, searchTerm, error) {\n  return {\n    type: QUERY_SUCCESS,\n    payload: {\n      namespace,\n      collection,\n      searchFields,\n      searchTerm,\n      error,\n    },\n  };\n}\n\n/*\n * Exported simple Action Creators\n */\n\nexport function clearSearch() {\n  return { type: SEARCH_CLEAR };\n}\n\n/*\n * Exported Thunk Action Creators\n */\n\n// SearchEntries will search for complete entries in all collections.\nexport function searchEntries(searchTerm, page = 0) {\n  return (dispatch, getState) => {\n    dispatch(searchingEntries(searchTerm));\n\n    const state = getState();\n    const backend = currentBackend(state.config);\n    const allCollections = state.collections.keySeq().toArray();\n    const collections = allCollections.filter(collection =>\n      selectIntegration(state, collection, 'search'),\n    );\n    const integration = selectIntegration(state, collections[0], 'search');\n\n    const searchPromise = integration\n      ? getIntegrationProvider(state.integrations, backend.getToken, integration).search(\n          collections,\n          searchTerm,\n          page,\n        )\n      : backend.search(state.collections.valueSeq().toArray(), searchTerm);\n\n    return searchPromise.then(\n      response => dispatch(searchSuccess(searchTerm, response.entries, response.pagination)),\n      error => dispatch(searchFailure(searchTerm, error)),\n    );\n  };\n}\n\n// Instead of searching for complete entries, query will search for specific fields\n// in specific collections and return raw data (no entries).\nexport function query(namespace, collectionName, searchFields, searchTerm) {\n  return (dispatch, getState) => {\n    dispatch(querying(namespace, collectionName, searchFields, searchTerm));\n\n    const state = getState();\n    const backend = currentBackend(state.config);\n    const integration = selectIntegration(state, collectionName, 'search');\n    const collection = state.collections.find(\n      collection => collection.get('name') === collectionName,\n    );\n\n    const queryPromise = integration\n      ? getIntegrationProvider(state.integrations, backend.getToken, integration).searchBy(\n          searchFields.map(f => `data.${f}`),\n          collectionName,\n          searchTerm,\n        )\n      : backend.query(collection, searchFields, searchTerm);\n\n    return queryPromise.then(\n      response =>\n        dispatch(querySuccess(namespace, collectionName, searchFields, searchTerm, response)),\n      error => dispatch(queryFailure(namespace, collectionName, searchFields, searchTerm, error)),\n    );\n  };\n}\n"],"file":"search.js"}