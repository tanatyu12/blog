"use strict";

var _backend = require("../backend");

var _registry = _interopRequireDefault(require("../lib/registry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock("../lib/registry");

const configWrapper = inputObject => ({
  get: prop => inputObject[prop]
});

describe('Backend', () => {
  describe('filterEntries', () => {
    let backend;
    beforeEach(() => {
      _registry.default.getBackend.mockReturnValue({
        init: jest.fn()
      });

      backend = (0, _backend.resolveBackend)({
        getIn: jest.fn().mockReturnValue('git-gateway')
      });
    });
    it('filters string values', () => {
      const result = backend.filterEntries({
        entries: [{
          data: {
            testField: 'testValue'
          }
        }, {
          data: {
            testField: 'testValue2'
          }
        }]
      }, configWrapper({
        field: 'testField',
        value: 'testValue'
      }));
      expect(result.length).toBe(1);
    });
    it('filters number values', () => {
      const result = backend.filterEntries({
        entries: [{
          data: {
            testField: 42
          }
        }, {
          data: {
            testField: 5
          }
        }]
      }, configWrapper({
        field: 'testField',
        value: 42
      }));
      expect(result.length).toBe(1);
    });
    it('filters boolean values', () => {
      const result = backend.filterEntries({
        entries: [{
          data: {
            testField: false
          }
        }, {
          data: {
            testField: true
          }
        }]
      }, configWrapper({
        field: 'testField',
        value: false
      }));
      expect(result.length).toBe(1);
    });
    it('filters list values', () => {
      const result = backend.filterEntries({
        entries: [{
          data: {
            testField: ['valueOne', 'valueTwo', 'testValue']
          }
        }, {
          data: {
            testField: ['valueThree']
          }
        }]
      }, configWrapper({
        field: 'testField',
        value: 'testValue'
      }));
      expect(result.length).toBe(1);
    });
  });
});
//# sourceMappingURL=backend.spec.js.map