{"version":3,"sources":["../../../../src/redux/middleware/waitUntilAction.js"],"names":["WAIT_UNTIL_ACTION","waitUntilAction","dispatch","getState","pending","checkPending","action","readyRequests","stillPending","request","predicate","push","run","next","type","result"],"mappings":";;;;;;;AAAA;AACA;;AAEA;;;;;;AAMO,MAAMA,iBAAiB,GAAG,mBAA1B;;;AAEQ,SAASC,eAAT,OAAiD;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAAZC,QAAY,QAAZA,QAAY;AAC9D,MAAIC,OAAO,GAAG,EAAd;;AAEA,WAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,UAAMC,aAAa,GAAG,EAAtB;AACA,UAAMC,YAAY,GAAG,EAArB,CAF4B,CAI5B;AACA;AACA;AACA;AACA;;AACA,SAAK,MAAMC,OAAX,IAAsBL,OAAtB,EAA+B;AAC7B,UAAIK,OAAO,CAACC,SAAR,CAAkBJ,MAAlB,CAAJ,EAA+B;AAC7BC,QAAAA,aAAa,CAACI,IAAd,CAAmBF,OAAnB;AACD,OAFD,MAEO;AACLD,QAAAA,YAAY,CAACG,IAAb,CAAkBF,OAAlB;AACD;AACF;;AAEDL,IAAAA,OAAO,GAAGI,YAAV;;AACA,SAAK,MAAMC,OAAX,IAAsBF,aAAtB,EAAqC;AACnCE,MAAAA,OAAO,CAACG,GAAR,CAAYV,QAAZ,EAAsBC,QAAtB,EAAgCG,MAAhC;AACD;AACF;;AAED,SAAOO,IAAI,IAAIP,MAAM,IAAI;AACvB,QAAIA,MAAM,CAACQ,IAAP,KAAgBd,iBAApB,EAAuC;AACrCI,MAAAA,OAAO,CAACO,IAAR,CAAaL,MAAb;AACA,aAAO,IAAP;AACD;;AACD,UAAMS,MAAM,GAAGF,IAAI,CAACP,MAAD,CAAnB;AACAD,IAAAA,YAAY,CAACC,MAAD,CAAZ;AACA,WAAOS,MAAP;AACD,GARD;AASD","sourcesContent":["// Based on wait-service by Mozilla:\n// https://github.com/mozilla/gecko-dev/blob/master/devtools/client/shared/redux/middleware/wait-service.js\n\n/**\n * A middleware that provides the ability for actions to install a\n * function to be run once when a specific condition is met by an\n * action coming through the system. Think of it as a thunk that\n * blocks until the condition is met.\n */\nexport const WAIT_UNTIL_ACTION = 'WAIT_UNTIL_ACTION';\n\nexport default function waitUntilAction({ dispatch, getState }) {\n  let pending = [];\n\n  function checkPending(action) {\n    const readyRequests = [];\n    const stillPending = [];\n\n    // Find the pending requests whose predicates are satisfied with\n    // this action. Wait to run the requests until after we update the\n    // pending queue because the request handler may synchronously\n    // dispatch again and run this service (that use case is\n    // completely valid).\n    for (const request of pending) {\n      if (request.predicate(action)) {\n        readyRequests.push(request);\n      } else {\n        stillPending.push(request);\n      }\n    }\n\n    pending = stillPending;\n    for (const request of readyRequests) {\n      request.run(dispatch, getState, action);\n    }\n  }\n\n  return next => action => {\n    if (action.type === WAIT_UNTIL_ACTION) {\n      pending.push(action);\n      return null;\n    }\n    const result = next(action);\n    checkPending(action);\n    return result;\n  };\n}\n"],"file":"waitUntilAction.js"}