{"version":3,"sources":["../../../../src/components/UI/SettingsDropdown.js"],"names":["styles","avatarImage","AvatarDropdownButton","DropdownButton","AvatarImage","AvatarPlaceholderIcon","Icon","colors","textFieldBorder","AppHeaderSiteLink","Avatar","imageUrl","propTypes","PropTypes","string","SettingsDropdown","displayUrl","onLogoutClick","t","func","isRequired"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAG;AACbC,EAAAA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADE,CAAf;AAOA,MAAMC,oBAAoB,GAAG;AAAA;AAAA,wBAAOC,mCAAP;AAAA;AAAA;AAAA,EAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA1B;AAQA,MAAMC,WAAW;AAAA;AAAA;AAAA,GACbJ,MAAM,CAACC,WADM,6hGAAjB;AAIA,MAAMI,qBAAqB,GAAG;AAAA;AAAA,wBAAOC,yBAAP;AAAA;AAAA;AAAA,EAAH,CACvBN,MAAM,CAACC,WADgB,kDAILM,4BAAOC,eAJF,6hGAA3B;AAOA,MAAMC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAvB;;AAOA,MAAMC,MAAM,GAAG;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SACbA,QAAQ,GAAG,6BAAC,WAAD;AAAa,IAAA,GAAG,EAAEA;AAAlB,IAAH,GAAoC,6BAAC,qBAAD;AAAuB,IAAA,IAAI,EAAC,MAA5B;AAAmC,IAAA,IAAI,EAAC;AAAxC,IAD/B;AAAA,CAAf;;AAGAD,MAAM,CAACE,SAAP,GAAmB;AACjBD,EAAAA,QAAQ,EAAEE,mBAAUC;AADH,CAAnB;;AAIA,MAAMC,gBAAgB,GAAG;AAAA,MAAGC,UAAH,SAAGA,UAAH;AAAA,MAAeL,QAAf,SAAeA,QAAf;AAAA,MAAyBM,aAAzB,SAAyBA,aAAzB;AAAA,MAAwCC,CAAxC,SAAwCA,CAAxC;AAAA,SACvB,6BAAC,cAAD,CAAO,QAAP,QACGF,UAAU,GACT,6BAAC,iBAAD;AAAmB,IAAA,IAAI,EAAEA,UAAzB;AAAqC,IAAA,MAAM,EAAC;AAA5C,KACG,8BAAcA,UAAd,CADH,CADS,GAIP,IALN,EAME,6BAAC,6BAAD;AACE,IAAA,kBAAkB,EAAC,MADrB;AAEE,IAAA,aAAa,EAAC,OAFhB;AAGE,IAAA,gBAAgB,EAAC,OAHnB;AAIE,IAAA,YAAY,EAAE,MACZ,6BAAC,oBAAD,QACE,6BAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEL;AAAlB,MADF;AALJ,KAUE,6BAAC,iCAAD;AAAc,IAAA,KAAK,EAAEO,CAAC,CAAC,4BAAD,CAAtB;AAAsD,IAAA,OAAO,EAAED;AAA/D,IAVF,CANF,CADuB;AAAA,CAAzB;;AAsBAF,gBAAgB,CAACH,SAAjB,GAA6B;AAC3BI,EAAAA,UAAU,EAAEH,mBAAUC,MADK;AAE3BH,EAAAA,QAAQ,EAAEE,mBAAUC,MAFO;AAG3BG,EAAAA,aAAa,EAAEJ,mBAAUM,IAAV,CAAeC,UAHH;AAI3BF,EAAAA,CAAC,EAAEL,mBAAUM,IAAV,CAAeC;AAJS,CAA7B;;eAOe,gCAAYL,gBAAZ,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { translate } from 'react-polyglot';\nimport { Icon, Dropdown, DropdownItem, DropdownButton, colors } from 'netlify-cms-ui-default';\nimport { stripProtocol } from 'Lib/urlHelper';\n\nconst styles = {\n  avatarImage: css`\n    width: 32px;\n    border-radius: 32px;\n  `,\n};\n\nconst AvatarDropdownButton = styled(DropdownButton)`\n  display: inline-block;\n  padding: 8px;\n  cursor: pointer;\n  color: #1e2532;\n  background-color: transparent;\n`;\n\nconst AvatarImage = styled.img`\n  ${styles.avatarImage};\n`;\n\nconst AvatarPlaceholderIcon = styled(Icon)`\n  ${styles.avatarImage};\n  height: 32px;\n  color: #1e2532;\n  background-color: ${colors.textFieldBorder};\n`;\n\nconst AppHeaderSiteLink = styled.a`\n  font-size: 14px;\n  font-weight: 400;\n  color: #7b8290;\n  padding: 10px 16px;\n`;\n\nconst Avatar = ({ imageUrl }) =>\n  imageUrl ? <AvatarImage src={imageUrl} /> : <AvatarPlaceholderIcon type=\"user\" size=\"large\" />;\n\nAvatar.propTypes = {\n  imageUrl: PropTypes.string,\n};\n\nconst SettingsDropdown = ({ displayUrl, imageUrl, onLogoutClick, t }) => (\n  <React.Fragment>\n    {displayUrl ? (\n      <AppHeaderSiteLink href={displayUrl} target=\"_blank\">\n        {stripProtocol(displayUrl)}\n      </AppHeaderSiteLink>\n    ) : null}\n    <Dropdown\n      dropdownTopOverlap=\"50px\"\n      dropdownWidth=\"100px\"\n      dropdownPosition=\"right\"\n      renderButton={() => (\n        <AvatarDropdownButton>\n          <Avatar imageUrl={imageUrl} />\n        </AvatarDropdownButton>\n      )}\n    >\n      <DropdownItem label={t('ui.settingsDropdown.logOut')} onClick={onLogoutClick} />\n    </Dropdown>\n  </React.Fragment>\n);\n\nSettingsDropdown.propTypes = {\n  displayUrl: PropTypes.string,\n  imageUrl: PropTypes.string,\n  onLogoutClick: PropTypes.func.isRequired,\n  t: PropTypes.func.isRequired,\n};\n\nexport default translate()(SettingsDropdown);\n"],"file":"SettingsDropdown.js"}