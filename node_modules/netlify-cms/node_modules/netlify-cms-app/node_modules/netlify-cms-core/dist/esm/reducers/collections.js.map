{"version":3,"sources":["../../../src/reducers/collections.js"],"names":["collections","state","action","type","CONFIG_SUCCESS","configCollections","payload","get","toOrderedMap","map","collection","has","set","FOLDER","FILES","mapKeys","key","selectors","entryExtension","formatExtensions","replace","fields","entryPath","slug","entrySlug","path","split","pop","RegExp","listMethod","allowNewEntries","allowDeletion","templateName","fileForEntry","files","filter","f","file","selectFields","selectFolderEntryExtension","selectEntryPath","selectEntrySlug","selectListMethod","selectAllowNewEntries","selectAllowDeletion","selectTemplateName","selectIdentifier","identifier","identifierFields","IDENTIFIER_FIELDS","fieldNames","field","find","id","name","toLowerCase","trim","selectInferedField","fieldName","inferableField","INFERABLE_FIELDS","mainTypeFields","synonyms","indexOf","size","first","secondaryTypeFields","secondaryTypes","fallbackToFirstField","showError"],"mappings":"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","sourcesContent":["import { List } from 'immutable';\nimport { get, escapeRegExp } from 'lodash';\nimport consoleError from 'Lib/consoleError';\nimport { CONFIG_SUCCESS } from 'Actions/config';\nimport { FILES, FOLDER } from 'Constants/collectionTypes';\nimport { INFERABLE_FIELDS, IDENTIFIER_FIELDS } from 'Constants/fieldInference';\nimport { formatExtensions } from 'Formats/formats';\n\nconst collections = (state = null, action) => {\n  switch (action.type) {\n    case CONFIG_SUCCESS: {\n      const configCollections = action.payload ? action.payload.get('collections') : List();\n      return configCollections\n        .toOrderedMap()\n        .map(collection => {\n          if (collection.has('folder')) {\n            return collection.set('type', FOLDER);\n          }\n          if (collection.has('files')) {\n            return collection.set('type', FILES);\n          }\n        })\n        .mapKeys((key, collection) => collection.get('name'));\n    }\n    default:\n      return state;\n  }\n};\n\nconst selectors = {\n  [FOLDER]: {\n    entryExtension(collection) {\n      return (\n        collection.get('extension') ||\n        get(formatExtensions, collection.get('format') || 'frontmatter')\n      ).replace(/^\\./, '');\n    },\n    fields(collection) {\n      return collection.get('fields');\n    },\n    entryPath(collection, slug) {\n      return `${collection.get('folder').replace(/\\/$/, '')}/${slug}.${this.entryExtension(\n        collection,\n      )}`;\n    },\n    entrySlug(collection, path) {\n      return path\n        .split('/')\n        .pop()\n        .replace(new RegExp(`\\\\.${escapeRegExp(this.entryExtension(collection))}$`), '');\n    },\n    listMethod() {\n      return 'entriesByFolder';\n    },\n    allowNewEntries(collection) {\n      return collection.get('create');\n    },\n    allowDeletion(collection) {\n      return collection.get('delete', true);\n    },\n    templateName(collection) {\n      return collection.get('name');\n    },\n  },\n  [FILES]: {\n    fileForEntry(collection, slug) {\n      const files = collection.get('files');\n      return files.filter(f => f.get('name') === slug).get(0);\n    },\n    fields(collection, slug) {\n      const file = this.fileForEntry(collection, slug);\n      return file && file.get('fields');\n    },\n    entryPath(collection, slug) {\n      const file = this.fileForEntry(collection, slug);\n      return file && file.get('file');\n    },\n    entrySlug(collection, path) {\n      const file = collection\n        .get('files')\n        .filter(f => f.get('file') === path)\n        .get(0);\n      return file && file.get('name');\n    },\n    listMethod() {\n      return 'entriesByFiles';\n    },\n    allowNewEntries() {\n      return false;\n    },\n    allowDeletion(collection) {\n      return collection.get('delete', true);\n    },\n    templateName(collection, slug) {\n      return slug;\n    },\n  },\n};\n\nexport const selectFields = (collection, slug) =>\n  selectors[collection.get('type')].fields(collection, slug);\nexport const selectFolderEntryExtension = collection =>\n  selectors[FOLDER].entryExtension(collection);\nexport const selectEntryPath = (collection, slug) =>\n  selectors[collection.get('type')].entryPath(collection, slug);\nexport const selectEntrySlug = (collection, path) =>\n  selectors[collection.get('type')].entrySlug(collection, path);\nexport const selectListMethod = collection => selectors[collection.get('type')].listMethod();\nexport const selectAllowNewEntries = collection =>\n  selectors[collection.get('type')].allowNewEntries(collection);\nexport const selectAllowDeletion = collection =>\n  selectors[collection.get('type')].allowDeletion(collection);\nexport const selectTemplateName = (collection, slug) =>\n  selectors[collection.get('type')].templateName(collection, slug);\nexport const selectIdentifier = collection => {\n  const identifier = collection.get('identifier_field');\n  const identifierFields = identifier ? [identifier, ...IDENTIFIER_FIELDS] : IDENTIFIER_FIELDS;\n  const fieldNames = collection.get('fields').map(field => field.get('name'));\n  return identifierFields.find(id =>\n    fieldNames.find(name => name.toLowerCase().trim() === id.toLowerCase().trim()),\n  );\n};\nexport const selectInferedField = (collection, fieldName) => {\n  if (fieldName === 'title' && collection.get('identifier_field')) {\n    return selectIdentifier(collection);\n  }\n  const inferableField = INFERABLE_FIELDS[fieldName];\n  const fields = collection.get('fields');\n  let field;\n\n  // If colllection has no fields or fieldName is not defined within inferables list, return null\n  if (!fields || !inferableField) return null;\n  // Try to return a field of the specified type with one of the synonyms\n  const mainTypeFields = fields\n    .filter(f => f.get('widget', 'string') === inferableField.type)\n    .map(f => f.get('name'));\n  field = mainTypeFields.filter(f => inferableField.synonyms.indexOf(f) !== -1);\n  if (field && field.size > 0) return field.first();\n\n  // Try to return a field for each of the specified secondary types\n  const secondaryTypeFields = fields\n    .filter(f => inferableField.secondaryTypes.indexOf(f.get('widget', 'string')) !== -1)\n    .map(f => f.get('name'));\n  field = secondaryTypeFields.filter(f => inferableField.synonyms.indexOf(f) !== -1);\n  if (field && field.size > 0) return field.first();\n\n  // Try to return the first field of the specified type\n  if (inferableField.fallbackToFirstField && mainTypeFields.size > 0) return mainTypeFields.first();\n\n  // Coundn't infer the field. Show error and return null.\n  if (inferableField.showError) {\n    consoleError(\n      `The Field ${fieldName} is missing for the collection “${collection.get('name')}”`,\n      `Netlify CMS tries to infer the entry ${fieldName} automatically, but one couldn't be found for entries of the collection “${collection.get(\n        'name',\n      )}”. Please check your site configuration.`,\n    );\n  }\n\n  return null;\n};\n\nexport default collections;\n"],"file":"collections.js"}