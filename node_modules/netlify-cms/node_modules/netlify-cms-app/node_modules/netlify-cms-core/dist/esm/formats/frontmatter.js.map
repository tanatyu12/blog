{"version":3,"sources":["../../../src/formats/frontmatter.js"],"names":["parsers","toml","parse","input","tomlFormatter","fromFile","stringify","metadata","sortedKeys","toFile","json","JSONinput","trim","substr","jsonFormatter","JSONoutput","substring","length","yaml","yamlFormatter","inferFrontmatterFormat","str","firstLine","indexOf","getFormatOpts","console","warn","format","language","delimiters","FrontmatterFormatter","constructor","customDelimiter","content","result","engines","data","body","meta","matter","FrontmatterInfer","frontmatterYAML","frontmatterTOML","frontmatterJSON"],"mappings":"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","sourcesContent":["import matter from 'gray-matter';\nimport tomlFormatter from './toml';\nimport yamlFormatter from './yaml';\nimport jsonFormatter from './json';\n\nconst parsers = {\n  toml: {\n    parse: input => tomlFormatter.fromFile(input),\n    stringify: (metadata, { sortedKeys }) => tomlFormatter.toFile(metadata, sortedKeys),\n  },\n  json: {\n    parse: input => {\n      let JSONinput = input.trim();\n      // Fix JSON if leading and trailing brackets were trimmed.\n      if (JSONinput.substr(0, 1) !== '{') {\n        JSONinput = '{' + JSONinput;\n      }\n      if (JSONinput.substr(-1) !== '}') {\n        JSONinput = JSONinput + '}';\n      }\n      return jsonFormatter.fromFile(JSONinput);\n    },\n    stringify: (metadata, { sortedKeys }) => {\n      let JSONoutput = jsonFormatter.toFile(metadata, sortedKeys).trim();\n      // Trim leading and trailing brackets.\n      if (JSONoutput.substr(0, 1) === '{' && JSONoutput.substr(-1) === '}') {\n        JSONoutput = JSONoutput.substring(1, JSONoutput.length - 1);\n      }\n      return JSONoutput;\n    },\n  },\n  yaml: {\n    parse: input => yamlFormatter.fromFile(input),\n    stringify: (metadata, { sortedKeys }) => yamlFormatter.toFile(metadata, sortedKeys),\n  },\n};\n\nfunction inferFrontmatterFormat(str) {\n  const firstLine = str.substr(0, str.indexOf('\\n')).trim();\n  if (firstLine.length > 3 && firstLine.substr(0, 3) === '---') {\n    // No need to infer, `gray-matter` will handle things like `---toml` for us.\n    return;\n  }\n  switch (firstLine) {\n    case '---':\n      return getFormatOpts('yaml');\n    case '+++':\n      return getFormatOpts('toml');\n    case '{':\n      return getFormatOpts('json');\n    default:\n      console.warn('Unrecognized front-matter format.');\n  }\n}\n\nexport const getFormatOpts = format =>\n  ({\n    yaml: { language: 'yaml', delimiters: '---' },\n    toml: { language: 'toml', delimiters: '+++' },\n    json: { language: 'json', delimiters: ['{', '}'] },\n  }[format]);\n\nclass FrontmatterFormatter {\n  constructor(format, customDelimiter) {\n    this.format = getFormatOpts(format);\n    this.customDelimiter = customDelimiter;\n  }\n\n  fromFile(content) {\n    const format = this.format || inferFrontmatterFormat(content);\n    if (this.customDelimiter) this.format.delimiters = this.customDelimiter;\n    const result = matter(content, { engines: parsers, ...format });\n    return {\n      ...result.data,\n      body: result.content,\n    };\n  }\n\n  toFile(data, sortedKeys) {\n    const { body = '', ...meta } = data;\n\n    // Stringify to YAML if the format was not set\n    const format = this.format || getFormatOpts('yaml');\n    if (this.customDelimiter) this.format.delimiters = this.customDelimiter;\n\n    // `sortedKeys` is not recognized by gray-matter, so it gets passed through to the parser\n    return matter.stringify(body, meta, { engines: parsers, sortedKeys, ...format });\n  }\n}\n\nexport const FrontmatterInfer = new FrontmatterFormatter();\nexport const frontmatterYAML = customDelimiter => new FrontmatterFormatter('yaml', customDelimiter);\nexport const frontmatterTOML = customDelimiter => new FrontmatterFormatter('toml', customDelimiter);\nexport const frontmatterJSON = customDelimiter => new FrontmatterFormatter('json', customDelimiter);\n"],"file":"frontmatter.js"}