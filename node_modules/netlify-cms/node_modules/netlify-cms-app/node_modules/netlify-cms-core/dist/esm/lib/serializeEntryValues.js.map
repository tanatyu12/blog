{"version":3,"sources":["../../../src/lib/serializeEntryValues.js"],"names":["runSerializer","values","fields","method","reduce","acc","field","fieldName","get","value","serializer","nestedFields","List","isList","set","map","val","Map","isMap","serializeValues","deserializeValues"],"mappings":";;;;;;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,MAAMA,aAAa,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,KAA4B;AAChD;;;;;;AAMA,SAAOD,MAAM,CAACE,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACnC,UAAMC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAU,MAAV,CAAlB;AACA,UAAMC,KAAK,GAAGR,MAAM,CAACO,GAAP,CAAWD,SAAX,CAAd;AACA,UAAMG,UAAU,GAAG,wCAAyBJ,KAAK,CAACE,GAAN,CAAU,QAAV,CAAzB,CAAnB;AACA,UAAMG,YAAY,GAAGL,KAAK,CAACE,GAAN,CAAU,QAAV,CAArB,CAJmC,CAMnC;;AACA,QAAIG,YAAY,IAAIC,gBAAKC,MAAL,CAAYJ,KAAZ,CAApB,EAAwC;AACtC,aAAOJ,GAAG,CAACS,GAAJ,CAAQP,SAAR,EAAmBE,KAAK,CAACM,GAAN,CAAUC,GAAG,IAAIhB,aAAa,CAACgB,GAAD,EAAML,YAAN,EAAoBR,MAApB,CAA9B,CAAnB,CAAP;AACD,KATkC,CAWnC;;;AACA,QAAIQ,YAAY,IAAIM,eAAIC,KAAJ,CAAUT,KAAV,CAApB,EAAsC;AACpC,aAAOJ,GAAG,CAACS,GAAJ,CAAQP,SAAR,EAAmBP,aAAa,CAACS,KAAD,EAAQE,YAAR,EAAsBR,MAAtB,CAAhC,CAAP;AACD,KAdkC,CAgBnC;;;AACA,QAAIO,UAAU,IAAI,CAAC,qBAAMD,KAAN,CAAnB,EAAiC;AAC/B,aAAOJ,GAAG,CAACS,GAAJ,CAAQP,SAAR,EAAmBG,UAAU,CAACP,MAAD,CAAV,CAAmBM,KAAnB,CAAnB,CAAP;AACD,KAnBkC,CAqBnC;;;AACA,QAAI,CAAC,qBAAMA,KAAN,CAAL,EAAmB;AACjB,aAAOJ,GAAG,CAACS,GAAJ,CAAQP,SAAR,EAAmBE,KAAnB,CAAP;AACD;;AAED,WAAOJ,GAAP;AACD,GA3BM,EA2BJ,qBA3BI,CAAP;AA4BD,CAnCD;;AAqCO,MAAMc,eAAe,GAAG,CAAClB,MAAD,EAASC,MAAT,KAAoB;AACjD,SAAOF,aAAa,CAACC,MAAD,EAASC,MAAT,EAAiB,WAAjB,CAApB;AACD,CAFM;;;;AAIA,MAAMkB,iBAAiB,GAAG,CAACnB,MAAD,EAASC,MAAT,KAAoB;AACnD,SAAOF,aAAa,CAACC,MAAD,EAASC,MAAT,EAAiB,aAAjB,CAApB;AACD,CAFM","sourcesContent":["import { isNil } from 'lodash';\nimport { Map, List } from 'immutable';\nimport { getWidgetValueSerializer } from './registry';\n\n/**\n * Methods for serializing/deserializing entry field values. Most widgets don't\n * require this for their values, and those that do can typically serialize/\n * deserialize on every change from within the widget. The serialization\n * handlers here are for widgets whose values require heavy serialization that\n * would hurt performance if run for every change.\n\n * An example of this is the markdown widget, whose value is stored as a\n * markdown string. Instead of stringifying on every change of that field, a\n * deserialization method is registered from the widget's control module that\n * converts the stored markdown string to an AST, and that AST serves as the\n * widget model during editing.\n *\n * Serialization handlers should be registered for each widget that requires\n * them, and the registration method is exposed through the registry. Any\n * registered deserialization handlers run on entry load, and serialization\n * handlers run on persist.\n */\nconst runSerializer = (values, fields, method) => {\n  /**\n   * Reduce the list of fields to a map where keys are field names and values\n   * are field values, serializing the values of fields whose widgets have\n   * registered serializers.  If the field is a list or object, call recursively\n   * for nested fields.\n   */\n  return fields.reduce((acc, field) => {\n    const fieldName = field.get('name');\n    const value = values.get(fieldName);\n    const serializer = getWidgetValueSerializer(field.get('widget'));\n    const nestedFields = field.get('fields');\n\n    // Call recursively for fields within lists\n    if (nestedFields && List.isList(value)) {\n      return acc.set(fieldName, value.map(val => runSerializer(val, nestedFields, method)));\n    }\n\n    // Call recursively for fields within objects\n    if (nestedFields && Map.isMap(value)) {\n      return acc.set(fieldName, runSerializer(value, nestedFields, method));\n    }\n\n    // Run serialization method on value if not null or undefined\n    if (serializer && !isNil(value)) {\n      return acc.set(fieldName, serializer[method](value));\n    }\n\n    // If no serializer is registered for the field's widget, use the field as is\n    if (!isNil(value)) {\n      return acc.set(fieldName, value);\n    }\n\n    return acc;\n  }, Map());\n};\n\nexport const serializeValues = (values, fields) => {\n  return runSerializer(values, fields, 'serialize');\n};\n\nexport const deserializeValues = (values, fields) => {\n  return runSerializer(values, fields, 'deserialize');\n};\n"],"file":"serializeEntryValues.js"}