{"version":3,"sources":["../../../src/actions/config.js"],"names":["CONFIG_REQUEST","CONFIG_SUCCESS","CONFIG_FAILURE","CONFIG_MERGE","getConfigUrl","validTypes","configLinkEl","document","querySelector","isValidLink","type","link","console","log","defaults","publish_mode","publishModes","SIMPLE","applyDefaults","config","mergeDeep","withMutations","map","get","set","defaultPublicFolder","collection","folder","files","file","mergePreloadedConfig","preloadedConfig","loadedConfig","parseConfig","data","yaml","safeLoad","CMS_ENV","Object","keys","forEach","key","getConfig","isPreloaded","response","fetch","credentials","catch","err","Error","status","contentType","headers","isYaml","indexOf","text","configLoaded","payload","configLoading","configFailed","error","configDidLoad","dispatch","mergeConfig","loadConfig","window","CMS_CONFIG","getState","configUrl","size","mergedConfig","toJS"],"mappings":"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","sourcesContent":["import yaml from 'js-yaml';\nimport { Map, fromJS } from 'immutable';\nimport { trimStart, get } from 'lodash';\nimport { authenticateUser } from 'Actions/auth';\nimport * as publishModes from 'Constants/publishModes';\nimport { validateConfig } from 'Constants/configSchema';\n\nexport const CONFIG_REQUEST = 'CONFIG_REQUEST';\nexport const CONFIG_SUCCESS = 'CONFIG_SUCCESS';\nexport const CONFIG_FAILURE = 'CONFIG_FAILURE';\nexport const CONFIG_MERGE = 'CONFIG_MERGE';\n\nconst getConfigUrl = () => {\n  const validTypes = { 'text/yaml': 'yaml', 'application/x-yaml': 'yaml' };\n  const configLinkEl = document.querySelector('link[rel=\"cms-config-url\"]');\n  const isValidLink = configLinkEl && validTypes[configLinkEl.type] && get(configLinkEl, 'href');\n  if (isValidLink) {\n    const link = get(configLinkEl, 'href');\n    console.log(`Using config file path: \"${link}\"`);\n    return link;\n  }\n  return 'config.yml';\n};\n\nconst defaults = {\n  publish_mode: publishModes.SIMPLE,\n};\n\nexport function applyDefaults(config) {\n  return Map(defaults)\n    .mergeDeep(config)\n    .withMutations(map => {\n      // Use `site_url` as default `display_url`.\n      if (!map.get('display_url') && map.get('site_url')) {\n        map.set('display_url', map.get('site_url'));\n      }\n\n      // Use media_folder as default public_folder.\n      const defaultPublicFolder = `/${trimStart(map.get('media_folder'), '/')}`;\n      if (!map.get('public_folder')) {\n        map.set('public_folder', defaultPublicFolder);\n      }\n\n      // Strip leading slash from collection folders and files\n      map.set(\n        'collections',\n        map.get('collections').map(collection => {\n          const folder = collection.get('folder');\n          if (folder) {\n            return collection.set('folder', trimStart(folder, '/'));\n          }\n\n          const files = collection.get('files');\n          if (files) {\n            return collection.set(\n              'files',\n              files.map(file => {\n                return file.set('file', trimStart(file.get('file'), '/'));\n              }),\n            );\n          }\n        }),\n      );\n    });\n}\n\nfunction mergePreloadedConfig(preloadedConfig, loadedConfig) {\n  const map = fromJS(loadedConfig) || Map();\n  return preloadedConfig ? preloadedConfig.mergeDeep(map) : map;\n}\n\nfunction parseConfig(data) {\n  const config = yaml.safeLoad(data);\n  if (typeof CMS_ENV === 'string' && config[CMS_ENV]) {\n    Object.keys(config[CMS_ENV]).forEach(key => {\n      config[key] = config[CMS_ENV][key];\n    });\n  }\n  return config;\n}\n\nasync function getConfig(file, isPreloaded) {\n  const response = await fetch(file, { credentials: 'same-origin' }).catch(err => err);\n  if (response instanceof Error || response.status !== 200) {\n    if (isPreloaded) return parseConfig('');\n    throw new Error(`Failed to load config.yml (${response.status || response})`);\n  }\n  const contentType = response.headers.get('Content-Type') || 'Not-Found';\n  const isYaml = contentType.indexOf('yaml') !== -1;\n  if (!isYaml) {\n    console.log(`Response for ${file} was not yaml. (Content-Type: ${contentType})`);\n    if (isPreloaded) return parseConfig('');\n  }\n  return parseConfig(await response.text());\n}\n\nexport function configLoaded(config) {\n  return {\n    type: CONFIG_SUCCESS,\n    payload: config,\n  };\n}\n\nexport function configLoading() {\n  return {\n    type: CONFIG_REQUEST,\n  };\n}\n\nexport function configFailed(err) {\n  return {\n    type: CONFIG_FAILURE,\n    error: 'Error loading config',\n    payload: err,\n  };\n}\n\nexport function configDidLoad(config) {\n  return dispatch => {\n    dispatch(configLoaded(config));\n  };\n}\n\nexport function mergeConfig(config) {\n  return { type: CONFIG_MERGE, payload: config };\n}\n\nexport function loadConfig() {\n  if (window.CMS_CONFIG) {\n    return configDidLoad(fromJS(window.CMS_CONFIG));\n  }\n  return async (dispatch, getState) => {\n    dispatch(configLoading());\n\n    try {\n      const preloadedConfig = getState().config;\n      const configUrl = getConfigUrl();\n      const loadedConfig =\n        preloadedConfig && preloadedConfig.get('load_config_file') === false\n          ? {}\n          : await getConfig(configUrl, preloadedConfig && preloadedConfig.size > 1);\n\n      /**\n       * Merge any existing configuration so the result can be validated.\n       */\n      const mergedConfig = mergePreloadedConfig(preloadedConfig, loadedConfig);\n      validateConfig(mergedConfig.toJS());\n\n      const config = applyDefaults(mergedConfig);\n\n      dispatch(configDidLoad(config));\n      dispatch(authenticateUser());\n    } catch (err) {\n      dispatch(configFailed(err));\n      throw err;\n    }\n  };\n}\n"],"file":"config.js"}