{"version":3,"sources":["../../../../../src/components/Editor/EditorPreviewPane/EditorPreviewPane.js"],"names":["PreviewPaneFrame","Frame","lengths","borderRadius","PreviewPane","React","Component","field","value","metadata","props","idx","getAsset","entry","widget","get","key","preview","Map","isMap","name","fields","values","fieldsMetaData","find","f","nestedFields","singleField","set","getNestedWidgets","getSingleNested","labelledWidgets","Object","keys","inferedFields","indexOf","defaultPreview","toString","length","getWidget","List","isList","map","widgetsForNestedFields","widgetFor","getIn","val","widgets","i","data","inferFields","titleField","collection","shortTitleField","authorField","INFERABLE_FIELDS","title","shortTitle","author","render","previewComponent","EditorPreview","previewProps","widgetsFor","styleEls","style","raw","initialContent","propTypes","ImmutablePropTypes","isRequired","list","PropTypes","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { List, Map } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Frame from 'react-frame-component';\nimport { lengths } from 'netlify-cms-ui-default';\nimport { resolveWidget, getPreviewTemplate, getPreviewStyles } from 'Lib/registry';\nimport { ErrorBoundary } from 'UI';\nimport { selectTemplateName, selectInferedField } from 'Reducers/collections';\nimport { INFERABLE_FIELDS } from 'Constants/fieldInference';\nimport EditorPreviewContent from './EditorPreviewContent.js';\nimport PreviewHOC from './PreviewHOC';\nimport EditorPreview from './EditorPreview';\n\nconst PreviewPaneFrame = styled(Frame)`\n  width: 100%;\n  height: 100%;\n  border: none;\n  background: #fff;\n  border-radius: ${lengths.borderRadius};\n`;\n\nexport default class PreviewPane extends React.Component {\n  getWidget = (field, value, metadata, props, idx = null) => {\n    const { getAsset, entry } = props;\n    const widget = resolveWidget(field.get('widget'));\n    const key = idx ? field.get('name') + '_' + idx : field.get('name');\n\n    /**\n     * Use an HOC to provide conditional updates for all previews.\n     */\n    return !widget.preview ? null : (\n      <PreviewHOC\n        previewComponent={widget.preview}\n        key={key}\n        field={field}\n        getAsset={getAsset}\n        value={value && Map.isMap(value) ? value.get(field.get('name')) : value}\n        entry={entry}\n        fieldsMetaData={metadata}\n      />\n    );\n  };\n\n  inferedFields = {};\n\n  inferFields() {\n    const titleField = selectInferedField(this.props.collection, 'title');\n    const shortTitleField = selectInferedField(this.props.collection, 'shortTitle');\n    const authorField = selectInferedField(this.props.collection, 'author');\n\n    this.inferedFields = {};\n    if (titleField) this.inferedFields[titleField] = INFERABLE_FIELDS.title;\n    if (shortTitleField) this.inferedFields[shortTitleField] = INFERABLE_FIELDS.shortTitle;\n    if (authorField) this.inferedFields[authorField] = INFERABLE_FIELDS.author;\n  }\n\n  /**\n   * Returns the widget component for a named field, and makes recursive calls\n   * to retrieve components for nested and deeply nested fields, which occur in\n   * object and list type fields. Used internally to retrieve widgets, and also\n   * exposed for use in custom preview templates.\n   */\n  widgetFor = (\n    name,\n    fields = this.props.fields,\n    values = this.props.entry.get('data'),\n    fieldsMetaData = this.props.fieldsMetaData,\n  ) => {\n    // We retrieve the field by name so that this function can also be used in\n    // custom preview templates, where the field object can't be passed in.\n    let field = fields && fields.find(f => f.get('name') === name);\n    let value = values && values.get(field.get('name'));\n    let nestedFields = field.get('fields');\n    let singleField = field.get('field');\n    let metadata = fieldsMetaData && fieldsMetaData.get(field.get('name'), Map());\n\n    if (nestedFields) {\n      field = field.set('fields', this.getNestedWidgets(nestedFields, value, metadata));\n    }\n\n    if (singleField) {\n      field = field.set('field', this.getSingleNested(singleField, value, metadata));\n    }\n\n    const labelledWidgets = ['string', 'text', 'number'];\n    if (Object.keys(this.inferedFields).indexOf(name) !== -1) {\n      value = this.inferedFields[name].defaultPreview(value);\n    } else if (\n      value &&\n      labelledWidgets.indexOf(field.get('widget')) !== -1 &&\n      value.toString().length < 50\n    ) {\n      value = (\n        <div>\n          <strong>{field.get('label', field.get('name'))}:</strong> {value}\n        </div>\n      );\n    }\n\n    return value ? this.getWidget(field, value, metadata, this.props) : null;\n  };\n\n  /**\n   * Retrieves widgets for nested fields (children of object/list fields)\n   */\n  getNestedWidgets = (fields, values, fieldsMetaData) => {\n    // Fields nested within a list field will be paired with a List of value Maps.\n    if (List.isList(values)) {\n      return values.map(value => this.widgetsForNestedFields(fields, value, fieldsMetaData));\n    }\n    // Fields nested within an object field will be paired with a single Map of values.\n    return this.widgetsForNestedFields(fields, values, fieldsMetaData);\n  };\n\n  getSingleNested = (field, values, fieldsMetaData) => {\n    if (List.isList(values)) {\n      return values.map((value, idx) =>\n        this.getWidget(field, value, fieldsMetaData.get(field.get('name')), this.props, idx),\n      );\n    }\n    return this.getWidget(field, values, fieldsMetaData.get(field.get('name')), this.props);\n  };\n\n  /**\n   * Use widgetFor as a mapping function for recursive widget retrieval\n   */\n  widgetsForNestedFields = (fields, values, fieldsMetaData) => {\n    return fields.map(field => this.widgetFor(field.get('name'), fields, values, fieldsMetaData));\n  };\n\n  /**\n   * This function exists entirely to expose nested widgets for object and list\n   * fields to custom preview templates.\n   *\n   * TODO: see if widgetFor can now provide this functionality for preview templates\n   */\n  widgetsFor = name => {\n    const { fields, entry, fieldsMetaData } = this.props;\n    const field = fields.find(f => f.get('name') === name);\n    const nestedFields = field && field.get('fields');\n    const value = entry.getIn(['data', field.get('name')]);\n    const metadata = fieldsMetaData.get(field.get('name'), Map());\n\n    if (List.isList(value)) {\n      return value.map(val => {\n        const widgets =\n          nestedFields &&\n          Map(\n            nestedFields.map((f, i) => [\n              f.get('name'),\n              <div key={i}>{this.getWidget(f, val, metadata.get(f.get('name')), this.props)}</div>,\n            ]),\n          );\n        return Map({ data: val, widgets });\n      });\n    }\n\n    return Map({\n      data: value,\n      widgets:\n        nestedFields &&\n        Map(\n          nestedFields.map(f => [\n            f.get('name'),\n            this.getWidget(f, value, metadata.get(f.get('name')), this.props),\n          ]),\n        ),\n    });\n  };\n\n  render() {\n    const { entry, collection } = this.props;\n\n    if (!entry || !entry.get('data')) {\n      return null;\n    }\n\n    const previewComponent =\n      getPreviewTemplate(selectTemplateName(collection, entry.get('slug'))) || EditorPreview;\n\n    this.inferFields();\n\n    const previewProps = {\n      ...this.props,\n      widgetFor: this.widgetFor,\n      widgetsFor: this.widgetsFor,\n    };\n\n    const styleEls = getPreviewStyles().map((style, i) => {\n      if (style.raw) {\n        return <style key={i}>{style.value}</style>;\n      }\n      return <link key={i} href={style.value} type=\"text/css\" rel=\"stylesheet\" />;\n    });\n\n    if (!collection) {\n      <PreviewPaneFrame head={styleEls} />;\n    }\n\n    const initialContent = `\n<!DOCTYPE html>\n<html>\n  <head><base target=\"_blank\"/></head>\n  <body><div></div></body>\n</html>\n`;\n\n    return (\n      <ErrorBoundary>\n        <PreviewPaneFrame head={styleEls} initialContent={initialContent}>\n          <EditorPreviewContent {...{ previewComponent, previewProps }} />\n        </PreviewPaneFrame>\n      </ErrorBoundary>\n    );\n  }\n}\n\nPreviewPane.propTypes = {\n  collection: ImmutablePropTypes.map.isRequired,\n  fields: ImmutablePropTypes.list.isRequired,\n  entry: ImmutablePropTypes.map.isRequired,\n  fieldsMetaData: ImmutablePropTypes.map.isRequired,\n  getAsset: PropTypes.func.isRequired,\n};\n"],"file":"EditorPreviewPane.js"}