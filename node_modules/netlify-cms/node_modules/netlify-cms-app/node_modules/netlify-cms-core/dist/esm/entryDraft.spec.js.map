{"version":3,"sources":["../../src/reducers/__tests__/entryDraft.spec.js"],"names":["initialState","entry","mediaFiles","fieldsMetaData","fieldsErrors","hasChanged","collection","slug","path","partial","raw","data","metaData","describe","it","expect","actions","createDraftFromEntry","toEqual","newRecord","emptyDraftCreated","discardDraft","skip","newEntry","changeDraft","beforeEach","entities","pages","newState","entryPersisting","name","getIn","toBe","entryPersisted","toBeUndefined","entryPersistFail"],"mappings":"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","sourcesContent":["import { Map, List, fromJS } from 'immutable';\nimport * as actions from 'Actions/entries';\nimport reducer from '../entryDraft';\n\nlet initialState = Map({\n  entry: Map(),\n  mediaFiles: List(),\n  fieldsMetaData: Map(),\n  fieldsErrors: Map(),\n  hasChanged: false,\n});\n\nconst entry = {\n  collection: 'posts',\n  slug: 'slug',\n  path: 'content/blog/art-and-wine-festival.md',\n  partial: false,\n  raw: '',\n  data: {},\n  metaData: null,\n};\n\ndescribe('entryDraft reducer', () => {\n  describe('DRAFT_CREATE_FROM_ENTRY', () => {\n    it('should create draft from the entry', () => {\n      expect(reducer(initialState, actions.createDraftFromEntry(fromJS(entry)))).toEqual(\n        fromJS({\n          entry: {\n            ...entry,\n            newRecord: false,\n          },\n          mediaFiles: [],\n          fieldsMetaData: Map(),\n          fieldsErrors: Map(),\n          hasChanged: false,\n        }),\n      );\n    });\n  });\n\n  describe('DRAFT_CREATE_EMPTY', () => {\n    it('should create a new draft ', () => {\n      expect(reducer(initialState, actions.emptyDraftCreated(fromJS(entry)))).toEqual(\n        fromJS({\n          entry: {\n            ...entry,\n            newRecord: true,\n          },\n          mediaFiles: [],\n          fieldsMetaData: Map(),\n          fieldsErrors: Map(),\n          hasChanged: false,\n        }),\n      );\n    });\n  });\n\n  describe('DRAFT_DISCARD', () => {\n    it('should discard the draft and return initial state', () => {\n      expect(reducer(initialState, actions.discardDraft())).toEqual(initialState);\n    });\n  });\n\n  describe('DRAFT_CHANGE', () => {\n    it.skip('should update the draft', () => {\n      const newEntry = {\n        ...entry,\n        raw: 'updated',\n      };\n      expect(reducer(initialState, actions.changeDraft(newEntry))).toEqual(\n        fromJS({\n          entry: {\n            ...entry,\n            raw: 'updated',\n          },\n          mediaFiles: [],\n          hasChanged: true,\n        }),\n      );\n    });\n  });\n\n  describe('persisting', () => {\n    beforeEach(() => {\n      initialState = fromJS({\n        entities: {\n          'posts.slug': {\n            collection: 'posts',\n            slug: 'slug',\n            path: 'content/blog/art-and-wine-festival.md',\n            partial: false,\n            raw: '',\n            data: {},\n            metaData: null,\n          },\n        },\n        pages: {},\n      });\n    });\n\n    it('should handle persisting request', () => {\n      const newState = reducer(\n        initialState,\n        actions.entryPersisting(Map({ name: 'posts' }), Map({ slug: 'slug' })),\n      );\n      expect(newState.getIn(['entry', 'isPersisting'])).toBe(true);\n    });\n\n    it('should handle persisting success', () => {\n      let newState = reducer(\n        initialState,\n        actions.entryPersisting(Map({ name: 'posts' }), Map({ slug: 'slug' })),\n      );\n      newState = reducer(\n        newState,\n        actions.entryPersisted(Map({ name: 'posts' }), Map({ slug: 'slug' })),\n      );\n      expect(newState.getIn(['entry', 'isPersisting'])).toBeUndefined();\n    });\n\n    it('should handle persisting error', () => {\n      let newState = reducer(\n        initialState,\n        actions.entryPersisting(Map({ name: 'posts' }), Map({ slug: 'slug' })),\n      );\n      newState = reducer(\n        newState,\n        actions.entryPersistFail(Map({ name: 'posts' }), Map({ slug: 'slug' }), 'Error message'),\n      );\n      expect(newState.getIn(['entry', 'isPersisting'])).toBeUndefined();\n    });\n  });\n});\n"],"file":"entryDraft.spec.js"}