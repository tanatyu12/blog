{"version":3,"sources":["../../../../src/reducers/__tests__/entries.spec.js"],"names":["initialState","posts","name","describe","it","expect","actions","entriesLoading","toEqual","pages","isFetching","entries","slug","path","title","entriesLoaded","entities","page","ids","entry","entryLoaded"],"mappings":";;AAAA;;AACA;;AACA;;;;;;AAEA,MAAMA,YAAY,GAAG,2BAAW;AAC9BC,EAAAA,KAAK,EAAE,oBAAI;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAJ;AADuB,CAAX,CAArB;AAIAC,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxBC,EAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,IAAAA,MAAM,CAAC,uBAAQL,YAAR,EAAsBM,OAAO,CAACC,cAAR,CAAuB,oBAAI;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAJ,CAAvB,CAAtB,CAAD,CAAN,CAA8EM,OAA9E,CACE,2BACE,uBAAO;AACLP,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADF;AAELO,MAAAA,KAAK,EAAE;AACLR,QAAAA,KAAK,EAAE;AAAES,UAAAA,UAAU,EAAE;AAAd;AADF;AAFF,KAAP,CADF,CADF;AAUD,GAXC,CAAF;AAaAN,EAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvC,UAAMO,OAAO,GAAG,CAAC;AAAEC,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAD,EAA0B;AAAED,MAAAA,IAAI,EAAE,GAAR;AAAaE,MAAAA,KAAK,EAAE;AAApB,KAA1B,CAAhB;AACAT,IAAAA,MAAM,CACJ,uBAAQL,YAAR,EAAsBM,OAAO,CAACS,aAAR,CAAsB,oBAAI;AAAEb,MAAAA,IAAI,EAAE;AAAR,KAAJ,CAAtB,EAA8CS,OAA9C,EAAuD,CAAvD,CAAtB,CADI,CAAN,CAEEH,OAFF,CAGE,2BACE,uBAAO;AACLP,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADF;AAELc,MAAAA,QAAQ,EAAE;AACR,mBAAW;AAAEJ,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,IAAI,EAAE,EAAnB;AAAuBH,UAAAA,UAAU,EAAE;AAAnC,SADH;AAER,mBAAW;AAAEE,UAAAA,IAAI,EAAE,GAAR;AAAaE,UAAAA,KAAK,EAAE,GAApB;AAAyBJ,UAAAA,UAAU,EAAE;AAArC;AAFH,OAFL;AAMLD,MAAAA,KAAK,EAAE;AACLR,QAAAA,KAAK,EAAE;AACLgB,UAAAA,IAAI,EAAE,CADD;AAELC,UAAAA,GAAG,EAAE,CAAC,GAAD,EAAM,GAAN;AAFA;AADF;AANF,KAAP,CADF,CAHF;AAmBD,GArBC,CAAF;AAuBAd,EAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACrC,UAAMe,KAAK,GAAG;AAAEP,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAd;AACAR,IAAAA,MAAM,CAAC,uBAAQL,YAAR,EAAsBM,OAAO,CAACc,WAAR,CAAoB,oBAAI;AAAElB,MAAAA,IAAI,EAAE;AAAR,KAAJ,CAApB,EAA4CiB,KAA5C,CAAtB,CAAD,CAAN,CAAkFX,OAAlF,CACE,2BACE,uBAAO;AACLP,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADF;AAELc,MAAAA,QAAQ,EAAE;AACR,mBAAW;AAAEJ,UAAAA,IAAI,EAAE,GAAR;AAAaC,UAAAA,IAAI,EAAE;AAAnB;AADH,OAFL;AAKLJ,MAAAA,KAAK,EAAE;AACLR,QAAAA,KAAK,EAAE;AACLiB,UAAAA,GAAG,EAAE,CAAC,GAAD;AADA;AADF;AALF,KAAP,CADF,CADF;AAeD,GAjBC,CAAF;AAkBD,CAvDO,CAAR","sourcesContent":["import { Map, OrderedMap, fromJS } from 'immutable';\nimport * as actions from 'Actions/entries';\nimport reducer from '../entries';\n\nconst initialState = OrderedMap({\n  posts: Map({ name: 'posts' }),\n});\n\ndescribe('entries', () => {\n  it('should mark entries as fetching', () => {\n    expect(reducer(initialState, actions.entriesLoading(Map({ name: 'posts' })))).toEqual(\n      OrderedMap(\n        fromJS({\n          posts: { name: 'posts' },\n          pages: {\n            posts: { isFetching: true },\n          },\n        }),\n      ),\n    );\n  });\n\n  it('should handle loaded entries', () => {\n    const entries = [{ slug: 'a', path: '' }, { slug: 'b', title: 'B' }];\n    expect(\n      reducer(initialState, actions.entriesLoaded(Map({ name: 'posts' }), entries, 0)),\n    ).toEqual(\n      OrderedMap(\n        fromJS({\n          posts: { name: 'posts' },\n          entities: {\n            'posts.a': { slug: 'a', path: '', isFetching: false },\n            'posts.b': { slug: 'b', title: 'B', isFetching: false },\n          },\n          pages: {\n            posts: {\n              page: 0,\n              ids: ['a', 'b'],\n            },\n          },\n        }),\n      ),\n    );\n  });\n\n  it('should handle loaded entry', () => {\n    const entry = { slug: 'a', path: '' };\n    expect(reducer(initialState, actions.entryLoaded(Map({ name: 'posts' }), entry))).toEqual(\n      OrderedMap(\n        fromJS({\n          posts: { name: 'posts' },\n          entities: {\n            'posts.a': { slug: 'a', path: '' },\n          },\n          pages: {\n            posts: {\n              ids: ['a'],\n            },\n          },\n        }),\n      ),\n    );\n  });\n});\n"],"file":"entries.spec.js"}