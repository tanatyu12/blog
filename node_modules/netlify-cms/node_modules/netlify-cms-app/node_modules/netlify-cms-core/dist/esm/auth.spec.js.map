{"version":3,"sources":["../../src/reducers/__tests__/auth.spec.js"],"names":["describe","it","expect","undefined","toEqual","Immutable","Map","isFetching","email","fromJS","user","Error","error","initialState","newState","get","toBeUndefined"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrBC,EAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,IAAAA,MAAM,CAAC,oBAAKC,SAAL,EAAgB,EAAhB,CAAD,CAAN,CAA4BC,OAA5B,CAAoC,IAApC;AACD,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClDC,IAAAA,MAAM,CAAC,oBAAKC,SAAL,EAAgB,2BAAhB,CAAD,CAAN,CAA0CC,OAA1C,CAAkDC,mBAAUC,GAAV,CAAc;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAd,CAAlD;AACD,GAFC,CAAF;AAIAN,EAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,IAAAA,MAAM,CAAC,oBAAKC,SAAL,EAAgB,wBAAa;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAAb,CAAhB,CAAD,CAAN,CAAoEJ,OAApE,CACEC,mBAAUI,MAAV,CAAiB;AAAEC,MAAAA,IAAI,EAAE;AAAEF,QAAAA,KAAK,EAAE;AAAT;AAAR,KAAjB,CADF;AAGD,GAJC,CAAF;AAMAP,EAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChDC,IAAAA,MAAM,CAAC,oBAAKC,SAAL,EAAgB,qBAAU,IAAIQ,KAAJ,CAAU,iBAAV,CAAV,CAAhB,CAAD,CAAN,CAAiEP,OAAjE,CACEC,mBAAUC,GAAV,CAAc;AACZM,MAAAA,KAAK,EAAE;AADK,KAAd,CADF;AAKD,GANC,CAAF;AAQAX,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/B,UAAMY,YAAY,GAAGR,mBAAUI,MAAV,CAAiB;AAAEC,MAAAA,IAAI,EAAE;AAAEF,QAAAA,KAAK,EAAE;AAAT;AAAR,KAAjB,CAArB;;AACA,UAAMM,QAAQ,GAAG,oBAAKD,YAAL,EAAmB,mBAAnB,CAAjB;AACAX,IAAAA,MAAM,CAACY,QAAQ,CAACC,GAAT,CAAa,MAAb,CAAD,CAAN,CAA6BC,aAA7B;AACD,GAJC,CAAF;AAKD,CA5BO,CAAR","sourcesContent":["import Immutable from 'immutable';\nimport { authenticating, authenticate, authError, logout } from 'Actions/auth';\nimport auth from '../auth';\n\ndescribe('auth', () => {\n  it('should handle an empty state', () => {\n    expect(auth(undefined, {})).toEqual(null);\n  });\n\n  it('should handle an authentication request', () => {\n    expect(auth(undefined, authenticating())).toEqual(Immutable.Map({ isFetching: true }));\n  });\n\n  it('should handle authentication', () => {\n    expect(auth(undefined, authenticate({ email: 'joe@example.com' }))).toEqual(\n      Immutable.fromJS({ user: { email: 'joe@example.com' } }),\n    );\n  });\n\n  it('should handle an authentication error', () => {\n    expect(auth(undefined, authError(new Error('Bad credentials')))).toEqual(\n      Immutable.Map({\n        error: 'Error: Bad credentials',\n      }),\n    );\n  });\n\n  it('should handle logout', () => {\n    const initialState = Immutable.fromJS({ user: { email: 'joe@example.com' } });\n    const newState = auth(initialState, logout());\n    expect(newState.get('user')).toBeUndefined();\n  });\n});\n"],"file":"auth.spec.js"}