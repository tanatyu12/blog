{"version":3,"sources":["../../../../src/components/Editor/EditorInterface.js"],"names":["PREVIEW_VISIBLE","SCROLL_SYNC_ENABLED","styles","splitPane","css","components","card","pane","ReactSplitPaneGlobalStyles","transitions","main","colors","textFieldBorder","colorsRaw","GrayLight","StyledSplitPane","SplitPane","NoPreviewContainer","EditorContainer","background","Editor","PreviewPaneContainer","props","blockEntry","ControlPaneContainer","ViewControls","EditorInterface","Component","showEventBlocker","previewVisible","localStorage","getItem","scrollSyncEnabled","setState","opts","createNew","controlPaneRef","validate","onPersist","onPublish","newPreviewVisible","state","setItem","newScrollSyncEnabled","render","collection","entry","fields","fieldsMetaData","fieldsErrors","getAsset","onChange","showDelete","onDelete","onDeleteUnpublishedChanges","onChangeStatus","onValidate","user","hasChanged","displayUrl","hasWorkflow","hasUnpublishedChanges","isNewEntry","isModification","currentStatus","onLogoutClick","loadDeployPreview","deployPreview","collectionPreviewEnabled","getIn","editor","c","editorWithPreview","handleSplitPaneDragStart","handleSplitPaneDragFinished","get","handleOnPersist","handleOnPublish","handleTogglePreview","handleToggleScrollSync","propTypes","ImmutablePropTypes","map","isRequired","list","PropTypes","func","bool","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { css, Global } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport SplitPane from 'react-split-pane';\nimport { colors, colorsRaw, components, transitions } from 'netlify-cms-ui-default';\nimport { ScrollSync, ScrollSyncPane } from 'react-scroll-sync';\nimport EditorControlPane from './EditorControlPane/EditorControlPane';\nimport EditorPreviewPane from './EditorPreviewPane/EditorPreviewPane';\nimport EditorToolbar from './EditorToolbar';\nimport EditorToggle from './EditorToggle';\n\nconst PREVIEW_VISIBLE = 'cms.preview-visible';\nconst SCROLL_SYNC_ENABLED = 'cms.scroll-sync-enabled';\n\nconst styles = {\n  splitPane: css`\n    ${components.card};\n    border-radius: 0;\n    height: 100%;\n  `,\n  pane: css`\n    height: 100%;\n    overflow-y: auto;\n  `,\n};\n\nconst ReactSplitPaneGlobalStyles = () => (\n  <Global\n    styles={css`\n      .Resizer.vertical {\n        width: 21px;\n        cursor: col-resize;\n        position: relative;\n        transition: background-color ${transitions.main};\n\n        &:before {\n          content: '';\n          width: 1px;\n          height: 100%;\n          position: relative;\n          left: 10px;\n          background-color: ${colors.textFieldBorder};\n          display: block;\n        }\n\n        &:hover,\n        &:active {\n          background-color: ${colorsRaw.GrayLight};\n        }\n      }\n    `}\n  />\n);\n\nconst StyledSplitPane = styled(SplitPane)`\n  ${styles.splitPane};\n\n  /**\n   * Quick fix for preview pane not fully displaying in Safari\n   */\n  .Pane {\n    height: 100%;\n  }\n`;\n\nconst NoPreviewContainer = styled.div`\n  ${styles.splitPane};\n`;\n\nconst EditorContainer = styled.div`\n  width: 100%;\n  min-width: 800px;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  overflow: hidden;\n  padding-top: 66px;\n  background-color: ${colors.background};\n`;\n\nconst Editor = styled.div`\n  max-width: 1600px;\n  height: 100%;\n  margin: 0 auto;\n  position: relative;\n`;\n\nconst PreviewPaneContainer = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  pointer-events: ${props => (props.blockEntry ? 'none' : 'auto')};\n`;\n\nconst ControlPaneContainer = styled(PreviewPaneContainer)`\n  padding: 0 16px;\n  position: relative;\n  overflow-x: hidden;\n`;\n\nconst ViewControls = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  z-index: 299;\n`;\n\nclass EditorInterface extends Component {\n  state = {\n    showEventBlocker: false,\n    previewVisible: localStorage.getItem(PREVIEW_VISIBLE) !== 'false',\n    scrollSyncEnabled: localStorage.getItem(SCROLL_SYNC_ENABLED) !== 'false',\n  };\n\n  handleSplitPaneDragStart = () => {\n    this.setState({ showEventBlocker: true });\n  };\n\n  handleSplitPaneDragFinished = () => {\n    this.setState({ showEventBlocker: false });\n  };\n\n  handleOnPersist = (opts = {}) => {\n    const { createNew = false } = opts;\n    this.controlPaneRef.validate();\n    this.props.onPersist({ createNew });\n  };\n\n  handleOnPublish = (opts = {}) => {\n    const { createNew = false } = opts;\n    this.controlPaneRef.validate();\n    this.props.onPublish({ createNew });\n  };\n\n  handleTogglePreview = () => {\n    const newPreviewVisible = !this.state.previewVisible;\n    this.setState({ previewVisible: newPreviewVisible });\n    localStorage.setItem(PREVIEW_VISIBLE, newPreviewVisible);\n  };\n\n  handleToggleScrollSync = () => {\n    const newScrollSyncEnabled = !this.state.scrollSyncEnabled;\n    this.setState({ scrollSyncEnabled: newScrollSyncEnabled });\n    localStorage.setItem(SCROLL_SYNC_ENABLED, newScrollSyncEnabled);\n  };\n\n  render() {\n    const {\n      collection,\n      entry,\n      fields,\n      fieldsMetaData,\n      fieldsErrors,\n      getAsset,\n      onChange,\n      showDelete,\n      onDelete,\n      onDeleteUnpublishedChanges,\n      onChangeStatus,\n      onPublish,\n      onValidate,\n      user,\n      hasChanged,\n      displayUrl,\n      hasWorkflow,\n      hasUnpublishedChanges,\n      isNewEntry,\n      isModification,\n      currentStatus,\n      onLogoutClick,\n      loadDeployPreview,\n      deployPreview,\n    } = this.props;\n\n    const { previewVisible, scrollSyncEnabled, showEventBlocker } = this.state;\n\n    const collectionPreviewEnabled = collection.getIn(['editor', 'preview'], true);\n\n    const editor = (\n      <ControlPaneContainer blockEntry={showEventBlocker}>\n        <EditorControlPane\n          collection={collection}\n          entry={entry}\n          fields={fields}\n          fieldsMetaData={fieldsMetaData}\n          fieldsErrors={fieldsErrors}\n          onChange={onChange}\n          onValidate={onValidate}\n          ref={c => (this.controlPaneRef = c)}\n        />\n      </ControlPaneContainer>\n    );\n\n    const editorWithPreview = (\n      <ScrollSync enabled={this.state.scrollSyncEnabled}>\n        <div>\n          <ReactSplitPaneGlobalStyles />\n          <StyledSplitPane\n            maxSize={-100}\n            defaultSize=\"50%\"\n            onDragStarted={this.handleSplitPaneDragStart}\n            onDragFinished={this.handleSplitPaneDragFinished}\n          >\n            <ScrollSyncPane>{editor}</ScrollSyncPane>\n            <PreviewPaneContainer blockEntry={showEventBlocker}>\n              <EditorPreviewPane\n                collection={collection}\n                entry={entry}\n                fields={fields}\n                fieldsMetaData={fieldsMetaData}\n                getAsset={getAsset}\n              />\n            </PreviewPaneContainer>\n          </StyledSplitPane>\n        </div>\n      </ScrollSync>\n    );\n\n    return (\n      <EditorContainer>\n        <EditorToolbar\n          isPersisting={entry.get('isPersisting')}\n          isPublishing={entry.get('isPublishing')}\n          isUpdatingStatus={entry.get('isUpdatingStatus')}\n          isDeleting={entry.get('isDeleting')}\n          onPersist={this.handleOnPersist}\n          onPersistAndNew={() => this.handleOnPersist({ createNew: true })}\n          onDelete={onDelete}\n          onDeleteUnpublishedChanges={onDeleteUnpublishedChanges}\n          onChangeStatus={onChangeStatus}\n          showDelete={showDelete}\n          onPublish={onPublish}\n          onPublishAndNew={() => this.handleOnPublish({ createNew: true })}\n          user={user}\n          hasChanged={hasChanged}\n          displayUrl={displayUrl}\n          collection={collection}\n          hasWorkflow={hasWorkflow}\n          hasUnpublishedChanges={hasUnpublishedChanges}\n          isNewEntry={isNewEntry}\n          isModification={isModification}\n          currentStatus={currentStatus}\n          onLogoutClick={onLogoutClick}\n          loadDeployPreview={loadDeployPreview}\n          deployPreview={deployPreview}\n        />\n        <Editor>\n          <ViewControls>\n            <EditorToggle\n              enabled={collectionPreviewEnabled}\n              active={previewVisible}\n              onClick={this.handleTogglePreview}\n              icon=\"eye\"\n            />\n            <EditorToggle\n              enabled={collectionPreviewEnabled && previewVisible}\n              active={scrollSyncEnabled}\n              onClick={this.handleToggleScrollSync}\n              icon=\"scroll\"\n            />\n          </ViewControls>\n          {collectionPreviewEnabled && this.state.previewVisible ? (\n            editorWithPreview\n          ) : (\n            <NoPreviewContainer>{editor}</NoPreviewContainer>\n          )}\n        </Editor>\n      </EditorContainer>\n    );\n  }\n}\n\nEditorInterface.propTypes = {\n  collection: ImmutablePropTypes.map.isRequired,\n  entry: ImmutablePropTypes.map.isRequired,\n  fields: ImmutablePropTypes.list.isRequired,\n  fieldsMetaData: ImmutablePropTypes.map.isRequired,\n  fieldsErrors: ImmutablePropTypes.map.isRequired,\n  getAsset: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onValidate: PropTypes.func.isRequired,\n  onPersist: PropTypes.func.isRequired,\n  showDelete: PropTypes.bool.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onDeleteUnpublishedChanges: PropTypes.func.isRequired,\n  onPublish: PropTypes.func.isRequired,\n  onChangeStatus: PropTypes.func.isRequired,\n  user: ImmutablePropTypes.map.isRequired,\n  hasChanged: PropTypes.bool,\n  displayUrl: PropTypes.string,\n  hasWorkflow: PropTypes.bool,\n  hasUnpublishedChanges: PropTypes.bool,\n  isNewEntry: PropTypes.bool,\n  isModification: PropTypes.bool,\n  currentStatus: PropTypes.string,\n  onLogoutClick: PropTypes.func.isRequired,\n  deployPreview: ImmutablePropTypes.map,\n  loadDeployPreview: PropTypes.func.isRequired,\n};\n\nexport default EditorInterface;\n"],"file":"EditorInterface.js"}