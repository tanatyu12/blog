{"version":3,"sources":["../../../../../src/components/Collection/Entries/EntriesSearch.js"],"names":["EntriesSearch","React","Component","page","props","Cursor","create","actions","isNaN","action","searchTerm","searchEntries","nextPage","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","clearSearch","render","collections","entries","publicFolder","isFetching","getCursor","handleCursorActions","PropTypes","bool","func","isRequired","string","ImmutablePropTypes","seq","list","number","mapStateToProps","state","ownProps","toIndexedSeq","search","get","config","mapDispatchToProps","actionSearchEntries","actionClearSearch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { Cursor } from 'netlify-cms-lib-util';\nimport { selectSearchedEntries } from 'Reducers';\nimport {\n  searchEntries as actionSearchEntries,\n  clearSearch as actionClearSearch,\n} from 'Actions/search';\nimport Entries from './Entries';\n\nclass EntriesSearch extends React.Component {\n  static propTypes = {\n    isFetching: PropTypes.bool,\n    searchEntries: PropTypes.func.isRequired,\n    clearSearch: PropTypes.func.isRequired,\n    searchTerm: PropTypes.string.isRequired,\n    collections: ImmutablePropTypes.seq,\n    entries: ImmutablePropTypes.list,\n    page: PropTypes.number,\n    publicFolder: PropTypes.string,\n  };\n\n  componentDidMount() {\n    const { searchTerm, searchEntries } = this.props;\n    searchEntries(searchTerm);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.searchTerm === this.props.searchTerm) return;\n    const { searchEntries } = prevProps;\n    searchEntries(this.props.searchTerm);\n  }\n\n  componentWillUnmount() {\n    this.props.clearSearch();\n  }\n\n  getCursor = () => {\n    const { page } = this.props;\n    return Cursor.create({\n      actions: isNaN(page) ? [] : ['append_next'],\n    });\n  };\n\n  handleCursorActions = action => {\n    const { page, searchTerm, searchEntries } = this.props;\n    if (action === 'append_next') {\n      const nextPage = page + 1;\n      searchEntries(searchTerm, nextPage);\n    }\n  };\n\n  render() {\n    const { collections, entries, publicFolder, isFetching } = this.props;\n    return (\n      <Entries\n        cursor={this.getCursor()}\n        handleCursorActions={this.handleCursorActions}\n        collections={collections}\n        entries={entries}\n        publicFolder={publicFolder}\n        isFetching={isFetching}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const { searchTerm } = ownProps;\n  const collections = ownProps.collections.toIndexedSeq();\n  const isFetching = state.search.get('isFetching');\n  const page = state.search.get('page');\n  const entries = selectSearchedEntries(state);\n  const publicFolder = state.config.get('public_folder');\n\n  return { isFetching, page, collections, entries, publicFolder, searchTerm };\n}\n\nconst mapDispatchToProps = {\n  searchEntries: actionSearchEntries,\n  clearSearch: actionClearSearch,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(EntriesSearch);\n"],"file":"EntriesSearch.js"}