{"version":3,"sources":["../../../../src/components/MediaLibrary/MediaLibraryCardGrid.js"],"names":["CardGridContainer","CardGrid","PaginatingMessage","props","isPrivate","colors","textFieldBorder","MediaLibraryCardGrid","setScrollContainerRef","mediaItems","isSelectedFile","onAssetClick","canLoadMore","onLoadMore","isPaginating","paginatingMessage","cardWidth","cardMargin","displayURLs","loadDisplayURL","map","file","key","name","get","id","url","type","propTypes","PropTypes","func","isRequired","arrayOf","shape","displayURL","oneOfType","string","object","urlIsPublicPath","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport Waypoint from 'react-waypoint';\nimport MediaLibraryCard from './MediaLibraryCard';\nimport { Map } from 'immutable';\nimport { colors } from 'netlify-cms-ui-default';\n\nconst CardGridContainer = styled.div`\n  overflow-y: auto;\n  overflow-x: hidden;\n`;\n\nconst CardGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  margin-left: -10px;\n  margin-right: -10px;\n`;\n\nconst PaginatingMessage = styled.h1`\n  color: ${props => props.isPrivate && colors.textFieldBorder};\n`;\n\nconst MediaLibraryCardGrid = ({\n  setScrollContainerRef,\n  mediaItems,\n  isSelectedFile,\n  onAssetClick,\n  canLoadMore,\n  onLoadMore,\n  isPaginating,\n  paginatingMessage,\n  cardWidth,\n  cardMargin,\n  isPrivate,\n  displayURLs,\n  loadDisplayURL,\n}) => (\n  <CardGridContainer innerRef={setScrollContainerRef}>\n    <CardGrid>\n      {mediaItems.map(file => (\n        <MediaLibraryCard\n          key={file.key}\n          isSelected={isSelectedFile(file)}\n          text={file.name}\n          onClick={() => onAssetClick(file)}\n          width={cardWidth}\n          margin={cardMargin}\n          isPrivate={isPrivate}\n          displayURL={displayURLs.get(file.id, file.url ? Map({ url: file.url }) : Map())}\n          loadDisplayURL={() => loadDisplayURL(file)}\n          type={file.type}\n        />\n      ))}\n      {!canLoadMore ? null : <Waypoint onEnter={onLoadMore} />}\n    </CardGrid>\n    {!isPaginating ? null : (\n      <PaginatingMessage isPrivate={isPrivate}>{paginatingMessage}</PaginatingMessage>\n    )}\n  </CardGridContainer>\n);\n\nMediaLibraryCardGrid.propTypes = {\n  setScrollContainerRef: PropTypes.func.isRequired,\n  mediaItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      displayURL: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n      id: PropTypes.string.isRequired,\n      key: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      url: PropTypes.string,\n      urlIsPublicPath: PropTypes.bool,\n    }),\n  ).isRequired,\n  isSelectedFile: PropTypes.func.isRequired,\n  onAssetClick: PropTypes.func.isRequired,\n  canLoadMore: PropTypes.bool,\n  onLoadMore: PropTypes.func.isRequired,\n  isPaginating: PropTypes.bool,\n  paginatingMessage: PropTypes.string,\n  cardWidth: PropTypes.string.isRequired,\n  cardMargin: PropTypes.string.isRequired,\n  loadDisplayURL: PropTypes.func.isRequired,\n  isPrivate: PropTypes.bool,\n};\n\nexport default MediaLibraryCardGrid;\n"],"file":"MediaLibraryCardGrid.js"}