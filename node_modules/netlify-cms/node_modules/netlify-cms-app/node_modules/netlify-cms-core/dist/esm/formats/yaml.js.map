{"version":3,"sources":["../../../src/formats/yaml.js"],"names":["MomentType","yaml","Type","kind","predicate","value","moment","isMoment","represent","format","_f","resolve","ImageType","instanceOf","AssetProxy","path","OutputSchema","Schema","include","DEFAULT_SAFE_SCHEMA","implicit","concat","explicit","fromFile","content","safeLoad","toFile","data","sortedKeys","safeDump","schema","sortKeys"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,UAAU,GAAG,IAAIC,gBAAKC,IAAT,CAAc,MAAd,EAAsB;AACvCC,EAAAA,IAAI,EAAE,QADiC;;AAEvCC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,WAAOC,gBAAOC,QAAP,CAAgBF,KAAhB,CAAP;AACD,GAJsC;;AAKvCG,EAAAA,SAAS,CAACH,KAAD,EAAQ;AACf,WAAOA,KAAK,CAACI,MAAN,CAAaJ,KAAK,CAACK,EAAnB,CAAP;AACD,GAPsC;;AAQvCC,EAAAA,OAAO,CAACN,KAAD,EAAQ;AACb,WAAOC,gBAAOC,QAAP,CAAgBF,KAAhB,KAA0BA,KAAK,CAACK,EAAvC;AACD;;AAVsC,CAAtB,CAAnB;AAaA,MAAME,SAAS,GAAG,IAAIX,gBAAKC,IAAT,CAAc,OAAd,EAAuB;AACvCC,EAAAA,IAAI,EAAE,QADiC;AAEvCU,EAAAA,UAAU,EAAEC,mBAF2B;;AAGvCN,EAAAA,SAAS,CAACH,KAAD,EAAQ;AACf,WAAQ,GAAEA,KAAK,CAACU,IAAK,EAArB;AACD,GALsC;;AAMvCJ,EAAAA,OAAO,CAACN,KAAD,EAAQ;AACb,QAAIA,KAAK,KAAK,IAAd,EAAoB,OAAO,KAAP;AACpB,QAAIA,KAAK,YAAYS,mBAArB,EAAiC,OAAO,IAAP;AACjC,WAAO,KAAP;AACD;;AAVsC,CAAvB,CAAlB;AAaA,MAAME,YAAY,GAAG,IAAIf,gBAAKgB,MAAT,CAAgB;AACnCC,EAAAA,OAAO,EAAEjB,gBAAKkB,mBAAL,CAAyBD,OADC;AAEnCE,EAAAA,QAAQ,EAAE,CAACpB,UAAD,EAAaY,SAAb,EAAwBS,MAAxB,CAA+BpB,gBAAKkB,mBAAL,CAAyBC,QAAxD,CAFyB;AAGnCE,EAAAA,QAAQ,EAAErB,gBAAKkB,mBAAL,CAAyBG;AAHA,CAAhB,CAArB;eAMe;AACbC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,WAAOvB,gBAAKwB,QAAL,CAAcD,OAAd,CAAP;AACD,GAHY;;AAKbE,EAAAA,MAAM,CAACC,IAAD,EAAwB;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;AAC5B,WAAO3B,gBAAK4B,QAAL,CAAcF,IAAd,EAAoB;AAAEG,MAAAA,MAAM,EAAEd,YAAV;AAAwBe,MAAAA,QAAQ,EAAE,uBAASH,UAAT;AAAlC,KAApB,CAAP;AACD;;AAPY,C","sourcesContent":["import yaml from 'js-yaml';\nimport moment from 'moment';\nimport AssetProxy from 'ValueObjects/AssetProxy';\nimport { sortKeys } from './helpers';\n\nconst MomentType = new yaml.Type('date', {\n  kind: 'scalar',\n  predicate(value) {\n    return moment.isMoment(value);\n  },\n  represent(value) {\n    return value.format(value._f);\n  },\n  resolve(value) {\n    return moment.isMoment(value) && value._f;\n  },\n});\n\nconst ImageType = new yaml.Type('image', {\n  kind: 'scalar',\n  instanceOf: AssetProxy,\n  represent(value) {\n    return `${value.path}`;\n  },\n  resolve(value) {\n    if (value === null) return false;\n    if (value instanceof AssetProxy) return true;\n    return false;\n  },\n});\n\nconst OutputSchema = new yaml.Schema({\n  include: yaml.DEFAULT_SAFE_SCHEMA.include,\n  implicit: [MomentType, ImageType].concat(yaml.DEFAULT_SAFE_SCHEMA.implicit),\n  explicit: yaml.DEFAULT_SAFE_SCHEMA.explicit,\n});\n\nexport default {\n  fromFile(content) {\n    return yaml.safeLoad(content);\n  },\n\n  toFile(data, sortedKeys = []) {\n    return yaml.safeDump(data, { schema: OutputSchema, sortKeys: sortKeys(sortedKeys) });\n  },\n};\n"],"file":"yaml.js"}