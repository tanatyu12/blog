{"version":3,"sources":["../../../src/actions/deploys.js"],"names":["notifSend","notifActions","DEPLOY_PREVIEW_REQUEST","DEPLOY_PREVIEW_SUCCESS","DEPLOY_PREVIEW_FAILURE","deployPreviewLoading","collection","slug","type","payload","get","deployPreviewLoaded","url","status","deployPreviewError","loadDeployPreview","entry","published","opts","dispatch","getState","state","backend","config","deployState","deploy","getDeploy","getDeployPreview","error","console","message","details","key","kind","dismissAfter"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;MAEQA,S,GAAcC,2B,CAAdD,S;AAED,MAAME,sBAAsB,GAAG,wBAA/B;;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;;;AAEA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,IAA1C,EAAgD;AACrD,SAAO;AACLC,IAAAA,IAAI,EAAEN,sBADD;AAELO,IAAAA,OAAO,EAAE;AACPH,MAAAA,UAAU,EAAEA,UAAU,CAACI,GAAX,CAAe,MAAf,CADL;AAEPH,MAAAA;AAFO;AAFJ,GAAP;AAOD;;AAEM,SAASI,mBAAT,CAA6BL,UAA7B,EAAyCC,IAAzC,QAAgE;AAAA,MAAfK,GAAe,QAAfA,GAAe;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACrE,SAAO;AACLL,IAAAA,IAAI,EAAEL,sBADD;AAELM,IAAAA,OAAO,EAAE;AACPH,MAAAA,UAAU,EAAEA,UAAU,CAACI,GAAX,CAAe,MAAf,CADL;AAEPH,MAAAA,IAFO;AAGPK,MAAAA,GAHO;AAIPC,MAAAA;AAJO;AAFJ,GAAP;AASD;;AAEM,SAASC,kBAAT,CAA4BR,UAA5B,EAAwCC,IAAxC,EAA8C;AACnD,SAAO;AACLC,IAAAA,IAAI,EAAEJ,sBADD;AAELK,IAAAA,OAAO,EAAE;AACPH,MAAAA,UAAU,EAAEA,UAAU,CAACI,GAAX,CAAe,MAAf,CADL;AAEPH,MAAAA;AAFO;AAFJ,GAAP;AAOD;AAED;;;;;AAGO,SAASQ,iBAAT,CAA2BT,UAA3B,EAAuCC,IAAvC,EAA6CS,KAA7C,EAAoDC,SAApD,EAA+DC,IAA/D,EAAqE;AAC1E,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACA,UAAME,OAAO,GAAG,6BAAeD,KAAK,CAACE,MAArB,CAAhB,CAFmC,CAInC;;AACA,UAAMC,WAAW,GAAG,mCAAoBH,KAApB,EAA2Bf,UAA3B,EAAuCC,IAAvC,CAApB;;AACA,QAAIiB,WAAW,IAAIA,WAAW,CAACd,GAAZ,CAAgB,YAAhB,CAAnB,EAAkD;AAChD;AACD;;AAEDS,IAAAA,QAAQ,CAACd,oBAAoB,CAACC,UAAD,EAAaC,IAAb,CAArB,CAAR;;AAEA,QAAI;AACF;;;;AAIA,YAAMkB,MAAM,GAAGR,SAAS,GACpBK,OAAO,CAACI,SAAR,CAAkBpB,UAAlB,EAA8BC,IAA9B,EAAoCS,KAApC,CADoB,GAEpB,MAAMM,OAAO,CAACK,gBAAR,CAAyBrB,UAAzB,EAAqCC,IAArC,EAA2CS,KAA3C,EAAkDE,IAAlD,CAFV;;AAGA,UAAIO,MAAJ,EAAY;AACV,eAAON,QAAQ,CAACR,mBAAmB,CAACL,UAAD,EAAaC,IAAb,EAAmBkB,MAAnB,CAApB,CAAf;AACD;;AACD,aAAON,QAAQ,CAACL,kBAAkB,CAACR,UAAD,EAAaC,IAAb,CAAnB,CAAf;AACD,KAZD,CAYE,OAAOqB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAT,MAAAA,QAAQ,CACNnB,SAAS,CAAC;AACR8B,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAEH,KAAK,CAACE,OADR;AAEPE,UAAAA,GAAG,EAAE;AAFE,SADD;AAKRC,QAAAA,IAAI,EAAE,QALE;AAMRC,QAAAA,YAAY,EAAE;AANN,OAAD,CADH,CAAR;AAUAf,MAAAA,QAAQ,CAACL,kBAAkB,CAACR,UAAD,EAAaC,IAAb,CAAnB,CAAR;AACD;AACF,GAtCD;AAuCD","sourcesContent":["import { actions as notifActions } from 'redux-notifications';\nimport { currentBackend } from 'coreSrc/backend';\nimport { selectDeployPreview } from 'Reducers';\n\nconst { notifSend } = notifActions;\n\nexport const DEPLOY_PREVIEW_REQUEST = 'DEPLOY_PREVIEW_REQUEST';\nexport const DEPLOY_PREVIEW_SUCCESS = 'DEPLOY_PREVIEW_SUCCESS';\nexport const DEPLOY_PREVIEW_FAILURE = 'DEPLOY_PREVIEW_FAILURE';\n\nexport function deployPreviewLoading(collection, slug) {\n  return {\n    type: DEPLOY_PREVIEW_REQUEST,\n    payload: {\n      collection: collection.get('name'),\n      slug,\n    },\n  };\n}\n\nexport function deployPreviewLoaded(collection, slug, { url, status }) {\n  return {\n    type: DEPLOY_PREVIEW_SUCCESS,\n    payload: {\n      collection: collection.get('name'),\n      slug,\n      url,\n      status,\n    },\n  };\n}\n\nexport function deployPreviewError(collection, slug) {\n  return {\n    type: DEPLOY_PREVIEW_FAILURE,\n    payload: {\n      collection: collection.get('name'),\n      slug,\n    },\n  };\n}\n\n/**\n * Requests a deploy preview object from the registered backend.\n */\nexport function loadDeployPreview(collection, slug, entry, published, opts) {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const backend = currentBackend(state.config);\n\n    // Exit if currently fetching\n    const deployState = selectDeployPreview(state, collection, slug);\n    if (deployState && deployState.get('isFetching')) {\n      return;\n    }\n\n    dispatch(deployPreviewLoading(collection, slug));\n\n    try {\n      /**\n       * `getDeploy` is for published entries, while `getDeployPreview` is for\n       * unpublished entries.\n       */\n      const deploy = published\n        ? backend.getDeploy(collection, slug, entry)\n        : await backend.getDeployPreview(collection, slug, entry, opts);\n      if (deploy) {\n        return dispatch(deployPreviewLoaded(collection, slug, deploy));\n      }\n      return dispatch(deployPreviewError(collection, slug));\n    } catch (error) {\n      console.error(error);\n      dispatch(\n        notifSend({\n          message: {\n            details: error.message,\n            key: 'ui.toast.onFailToLoadDeployPreview',\n          },\n          kind: 'danger',\n          dismissAfter: 8000,\n        }),\n      );\n      dispatch(deployPreviewError(collection, slug));\n    }\n  };\n}\n"],"file":"deploys.js"}