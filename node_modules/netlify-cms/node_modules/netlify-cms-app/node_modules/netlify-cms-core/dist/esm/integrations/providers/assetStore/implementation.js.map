{"version":3,"sources":["../../../../../src/integrations/providers/assetStore/implementation.js"],"names":["AssetStore","constructor","config","getToken","get","shouldConfirmUpload","getSignedFormURL","parseJsonResponse","response","json","then","ok","Promise","reject","urlFor","path","options","params","key","push","encodeURIComponent","length","join","requestHeaders","headers","confirmRequest","assetID","token","request","method","Authorization","body","JSON","stringify","state","url","fetch","contentType","isJson","match","content","text","retrieve","query","page","privateUpload","search","filter","val","files","map","id","name","size","urlIsPublicPath","delete","upload","file","fileData","type","content_type","visibility","formURL","form","formFields","fields","asset","formData","FormData","Object","keys","forEach","append","success","error","console"],"mappings":"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","sourcesContent":["import { pickBy, trimEnd } from 'lodash';\nimport { addParams } from 'Lib/urlHelper';\n\nexport default class AssetStore {\n  constructor(config, getToken) {\n    this.config = config;\n    if (config.get('getSignedFormURL') == null) {\n      throw 'The AssetStore integration needs the getSignedFormURL in the integration configuration.';\n    }\n    this.getToken = getToken;\n\n    this.shouldConfirmUpload = config.get('shouldConfirmUpload', false);\n    this.getSignedFormURL = trimEnd(config.get('getSignedFormURL'), '/');\n  }\n\n  parseJsonResponse(response) {\n    return response.json().then(json => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      return json;\n    });\n  }\n\n  urlFor(path, options) {\n    const params = [];\n    if (options.params) {\n      for (const key in options.params) {\n        params.push(`${key}=${encodeURIComponent(options.params[key])}`);\n      }\n    }\n    if (params.length) {\n      path += `?${params.join('&')}`;\n    }\n    return path;\n  }\n\n  requestHeaders(headers = {}) {\n    return {\n      ...headers,\n    };\n  }\n\n  confirmRequest(assetID) {\n    this.getToken().then(token =>\n      this.request(`${this.getSignedFormURL}/${assetID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ state: 'uploaded' }),\n      }),\n    );\n  }\n\n  async request(path, options = {}) {\n    const headers = this.requestHeaders(options.headers || {});\n    const url = this.urlFor(path, options);\n    const response = await fetch(url, { ...options, headers });\n    const contentType = response.headers.get('Content-Type');\n    const isJson = contentType && contentType.match(/json/);\n    const content = isJson ? await this.parseJsonResponse(response) : response.text();\n    return content;\n  }\n\n  async retrieve(query, page, privateUpload) {\n    const params = pickBy(\n      { search: query, page, filter: privateUpload ? 'private' : 'public' },\n      val => !!val,\n    );\n    const url = addParams(this.getSignedFormURL, params);\n    const token = await this.getToken();\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    };\n    const response = await this.request(url, { headers });\n    const files = response.map(({ id, name, size, url }) => {\n      return { id, name, size, url, urlIsPublicPath: true };\n    });\n    return files;\n  }\n\n  delete(assetID) {\n    const url = `${this.getSignedFormURL}/${assetID}`;\n    return this.getToken().then(token =>\n      this.request(url, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n      }),\n    );\n  }\n\n  async upload(file, privateUpload = false) {\n    const fileData = {\n      name: file.name,\n      size: file.size,\n    };\n    if (file.type) {\n      fileData.content_type = file.type;\n    }\n\n    if (privateUpload) {\n      fileData.visibility = 'private';\n    }\n\n    try {\n      const token = await this.getToken();\n      const response = await this.request(this.getSignedFormURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(fileData),\n      });\n      const formURL = response.form.url;\n      const formFields = response.form.fields;\n      const { id, name, size, url } = response.asset;\n\n      const formData = new FormData();\n      Object.keys(formFields).forEach(key => formData.append(key, formFields[key]));\n      formData.append('file', file, file.name);\n\n      await this.request(formURL, { method: 'POST', body: formData });\n\n      if (this.shouldConfirmUpload) {\n        await this.confirmRequest(id);\n      }\n\n      const asset = { id, name, size, url, urlIsPublicPath: true };\n      return { success: true, url, asset };\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n"],"file":"implementation.js"}