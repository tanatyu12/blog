{"version":3,"sources":["../../../../src/formats/__tests__/frontmatter.spec.js"],"names":["jest","mock","describe","it","expect","FrontmatterInfer","fromFile","toEqual","title","description","body","toFile","tags","join"],"mappings":"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","sourcesContent":["import {\n  FrontmatterInfer,\n  frontmatterJSON,\n  frontmatterTOML,\n  frontmatterYAML,\n} from '../frontmatter';\n\njest.mock('../../valueObjects/AssetProxy.js');\n\ndescribe('Frontmatter', () => {\n  it('should parse YAML with --- delimiters', () => {\n    expect(\n      FrontmatterInfer.fromFile('---\\ntitle: YAML\\ndescription: Something longer\\n---\\nContent'),\n    ).toEqual({\n      title: 'YAML',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse YAML with --- delimiters when it is explicitly set as the format without a custom delimiter', () => {\n    expect(\n      frontmatterYAML().fromFile('---\\ntitle: YAML\\ndescription: Something longer\\n---\\nContent'),\n    ).toEqual({\n      title: 'YAML',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse YAML with custom delimiters when it is explicitly set as the format with a custom delimiter', () => {\n    expect(\n      frontmatterYAML('~~~').fromFile(\n        '~~~\\ntitle: YAML\\ndescription: Something longer\\n~~~\\nContent',\n      ),\n    ).toEqual({\n      title: 'YAML',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse YAML with custom delimiters when it is explicitly set as the format with different custom delimiters', () => {\n    expect(\n      frontmatterYAML(['~~~', '^^^']).fromFile(\n        '~~~\\ntitle: YAML\\ndescription: Something longer\\n^^^\\nContent',\n      ),\n    ).toEqual({\n      title: 'YAML',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse YAML with ---yaml delimiters', () => {\n    expect(\n      FrontmatterInfer.fromFile(\n        '---yaml\\ntitle: YAML\\ndescription: Something longer\\n---\\nContent',\n      ),\n    ).toEqual({\n      title: 'YAML',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should overwrite any body param in the front matter', () => {\n    expect(\n      FrontmatterInfer.fromFile('---\\ntitle: The Title\\nbody: Something longer\\n---\\nContent'),\n    ).toEqual({\n      title: 'The Title',\n      body: 'Content',\n    });\n  });\n\n  it('should parse TOML with +++ delimiters', () => {\n    expect(\n      FrontmatterInfer.fromFile('+++\\ntitle = \"TOML\"\\ndescription = \"Front matter\"\\n+++\\nContent'),\n    ).toEqual({\n      title: 'TOML',\n      description: 'Front matter',\n      body: 'Content',\n    });\n  });\n\n  it('should parse TOML with +++ delimiters when it is explicitly set as the format without a custom delimiter', () => {\n    expect(\n      frontmatterTOML('~~~').fromFile(\n        '~~~\\ntitle = \"TOML\"\\ndescription = \"Front matter\"\\n~~~\\nContent',\n      ),\n    ).toEqual({\n      title: 'TOML',\n      description: 'Front matter',\n      body: 'Content',\n    });\n  });\n\n  it('should parse TOML with ---toml delimiters', () => {\n    expect(\n      FrontmatterInfer.fromFile(\n        '---toml\\ntitle = \"TOML\"\\ndescription = \"Something longer\"\\n---\\nContent',\n      ),\n    ).toEqual({\n      title: 'TOML',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse JSON with { } delimiters', () => {\n    expect(\n      FrontmatterInfer.fromFile(\n        '{\\n\"title\": \"The Title\",\\n\"description\": \"Something longer\"\\n}\\nContent',\n      ),\n    ).toEqual({\n      title: 'The Title',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse JSON with { } delimiters when it is explicitly set as the format without a custom delimiter', () => {\n    expect(\n      frontmatterJSON().fromFile(\n        '{\\n\"title\": \"The Title\",\\n\"description\": \"Something longer\"\\n}\\nContent',\n      ),\n    ).toEqual({\n      title: 'The Title',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse JSON with { } delimiters when it is explicitly set as the format with a custom delimiter', () => {\n    expect(\n      frontmatterJSON('~~~').fromFile(\n        '~~~\\n\"title\": \"The Title\",\\n\"description\": \"Something longer\"\\n~~~\\nContent',\n      ),\n    ).toEqual({\n      title: 'The Title',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should parse JSON with ---json delimiters', () => {\n    expect(\n      FrontmatterInfer.fromFile(\n        '---json\\n{\\n\"title\": \"The Title\",\\n\"description\": \"Something longer\"\\n}\\n---\\nContent',\n      ),\n    ).toEqual({\n      title: 'The Title',\n      description: 'Something longer',\n      body: 'Content',\n    });\n  });\n\n  it('should stringify YAML with --- delimiters', () => {\n    expect(\n      FrontmatterInfer.toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'yaml'],\n        title: 'YAML',\n      }),\n    ).toEqual(\n      [\n        '---',\n        'tags:',\n        '  - front matter',\n        '  - yaml',\n        'title: YAML',\n        '---',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify YAML with missing body', () => {\n    expect(FrontmatterInfer.toFile({ tags: ['front matter', 'yaml'], title: 'YAML' })).toEqual(\n      ['---', 'tags:', '  - front matter', '  - yaml', 'title: YAML', '---', '', ''].join('\\n'),\n    );\n  });\n\n  it('should stringify YAML with --- delimiters when it is explicitly set as the format without a custom delimiter', () => {\n    expect(\n      frontmatterYAML().toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'yaml'],\n        title: 'YAML',\n      }),\n    ).toEqual(\n      [\n        '---',\n        'tags:',\n        '  - front matter',\n        '  - yaml',\n        'title: YAML',\n        '---',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify YAML with --- delimiters when it is explicitly set as the format with a custom delimiter', () => {\n    expect(\n      frontmatterYAML('~~~').toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'yaml'],\n        title: 'YAML',\n      }),\n    ).toEqual(\n      [\n        '~~~',\n        'tags:',\n        '  - front matter',\n        '  - yaml',\n        'title: YAML',\n        '~~~',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify YAML with --- delimiters when it is explicitly set as the format with different custom delimiters', () => {\n    expect(\n      frontmatterYAML(['~~~', '^^^']).toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'yaml'],\n        title: 'YAML',\n      }),\n    ).toEqual(\n      [\n        '~~~',\n        'tags:',\n        '  - front matter',\n        '  - yaml',\n        'title: YAML',\n        '^^^',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify TOML with +++ delimiters when it is explicitly set as the format without a custom delimiter', () => {\n    expect(\n      frontmatterTOML().toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'toml'],\n        title: 'TOML',\n      }),\n    ).toEqual(\n      [\n        '+++',\n        'tags = [\"front matter\", \"toml\"]',\n        'title = \"TOML\"',\n        '+++',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify TOML with +++ delimiters when it is explicitly set as the format with a custom delimiter', () => {\n    expect(\n      frontmatterTOML('~~~').toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'toml'],\n        title: 'TOML',\n      }),\n    ).toEqual(\n      [\n        '~~~',\n        'tags = [\"front matter\", \"toml\"]',\n        'title = \"TOML\"',\n        '~~~',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify JSON with { } delimiters when it is explicitly set as the format without a custom delimiter', () => {\n    expect(\n      frontmatterJSON().toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'json'],\n        title: 'JSON',\n      }),\n    ).toEqual(\n      [\n        '{',\n        '\"tags\": [',\n        '    \"front matter\",',\n        '    \"json\"',\n        '  ],',\n        '  \"title\": \"JSON\"',\n        '}',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n\n  it('should stringify JSON with { } delimiters when it is explicitly set as the format with a custom delimiter', () => {\n    expect(\n      frontmatterJSON('~~~').toFile({\n        body: 'Some content\\nOn another line',\n        tags: ['front matter', 'json'],\n        title: 'JSON',\n      }),\n    ).toEqual(\n      [\n        '~~~',\n        '\"tags\": [',\n        '    \"front matter\",',\n        '    \"json\"',\n        '  ],',\n        '  \"title\": \"JSON\"',\n        '~~~',\n        'Some content',\n        'On another line\\n',\n      ].join('\\n'),\n    );\n  });\n});\n"],"file":"frontmatter.spec.js"}