{"version":3,"sources":["../../../src/__tests__/backend.spec.js"],"names":["jest","mock","configWrapper","inputObject","get","prop","describe","backend","beforeEach","registry","getBackend","mockReturnValue","init","fn","getIn","it","result","filterEntries","entries","data","testField","field","value","expect","length","toBe"],"mappings":"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","sourcesContent":["import { resolveBackend } from '../backend';\nimport registry from 'Lib/registry';\n\njest.mock('Lib/registry');\n\nconst configWrapper = inputObject => ({\n  get: prop => inputObject[prop],\n});\n\ndescribe('Backend', () => {\n  describe('filterEntries', () => {\n    let backend;\n\n    beforeEach(() => {\n      registry.getBackend.mockReturnValue({\n        init: jest.fn(),\n      });\n      backend = resolveBackend({\n        getIn: jest.fn().mockReturnValue('git-gateway'),\n      });\n    });\n\n    it('filters string values', () => {\n      const result = backend.filterEntries(\n        {\n          entries: [\n            {\n              data: {\n                testField: 'testValue',\n              },\n            },\n            {\n              data: {\n                testField: 'testValue2',\n              },\n            },\n          ],\n        },\n        configWrapper({ field: 'testField', value: 'testValue' }),\n      );\n\n      expect(result.length).toBe(1);\n    });\n\n    it('filters number values', () => {\n      const result = backend.filterEntries(\n        {\n          entries: [\n            {\n              data: {\n                testField: 42,\n              },\n            },\n            {\n              data: {\n                testField: 5,\n              },\n            },\n          ],\n        },\n        configWrapper({ field: 'testField', value: 42 }),\n      );\n\n      expect(result.length).toBe(1);\n    });\n\n    it('filters boolean values', () => {\n      const result = backend.filterEntries(\n        {\n          entries: [\n            {\n              data: {\n                testField: false,\n              },\n            },\n            {\n              data: {\n                testField: true,\n              },\n            },\n          ],\n        },\n        configWrapper({ field: 'testField', value: false }),\n      );\n\n      expect(result.length).toBe(1);\n    });\n\n    it('filters list values', () => {\n      const result = backend.filterEntries(\n        {\n          entries: [\n            {\n              data: {\n                testField: ['valueOne', 'valueTwo', 'testValue'],\n              },\n            },\n            {\n              data: {\n                testField: ['valueThree'],\n              },\n            },\n          ],\n        },\n        configWrapper({ field: 'testField', value: 'testValue' }),\n      );\n\n      expect(result.length).toBe(1);\n    });\n  });\n});\n"],"file":"backend.spec.js"}