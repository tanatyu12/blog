{"version":3,"sources":["../../../../src/lib/__tests__/urlHelper.spec.js"],"names":["describe","it","expect","toEqual","encoding","not","replacement","toThrow","toThrowError","undefined","sanitize_replacement","clean_accents"],"mappings":"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","sourcesContent":["import { Map } from 'immutable';\nimport { sanitizeURI, sanitizeSlug } from '../urlHelper';\n\ndescribe('sanitizeURI', () => {\n  // `sanitizeURI` tests from RFC 3987\n  it('should keep valid URI chars (letters digits _ - . ~)', () => {\n    expect(sanitizeURI('This, that-one_or.the~other 123!')).toEqual('Thisthat-one_or.the~other123');\n  });\n\n  it('should not remove accents', () => {\n    expect(sanitizeURI('ěščřžý')).toEqual('ěščřžý');\n  });\n\n  it('should keep valid non-latin chars (ucschars in RFC 3987)', () => {\n    expect(sanitizeURI('日本語のタイトル')).toEqual('日本語のタイトル');\n  });\n\n  it('should not keep valid non-latin chars (ucschars in RFC 3987) if set to ASCII mode', () => {\n    expect(sanitizeURI('ěščřžý日本語のタイトル', { encoding: 'ascii' })).toEqual('');\n  });\n\n  it('should not normalize Unicode strings', () => {\n    expect(sanitizeURI('\\u017F\\u0323\\u0307')).toEqual('\\u017F\\u0323\\u0307');\n    expect(sanitizeURI('\\u017F\\u0323\\u0307')).not.toEqual('\\u1E9B\\u0323');\n  });\n\n  it('should allow a custom replacement character', () => {\n    expect(sanitizeURI('duck\\\\goose.elephant', { replacement: '-' })).toEqual(\n      'duck-goose.elephant',\n    );\n  });\n\n  it('should not allow an improper replacement character', () => {\n    expect(() => {\n      sanitizeURI('I! like! dollars!', { replacement: '$' });\n    }).toThrow();\n  });\n\n  it('should not actually URI-encode the characters', () => {\n    expect(sanitizeURI('🎉')).toEqual('🎉');\n    expect(sanitizeURI('🎉')).not.toEqual('%F0%9F%8E%89');\n  });\n});\n\ndescribe('sanitizeSlug', () => {\n  it('throws an error for non-strings', () => {\n    expect(() => sanitizeSlug({})).toThrowError('The input slug must be a string.');\n    expect(() => sanitizeSlug([])).toThrowError('The input slug must be a string.');\n    expect(() => sanitizeSlug(false)).toThrowError('The input slug must be a string.');\n    expect(() => sanitizeSlug(null)).toThrowError('The input slug must be a string.');\n    expect(() => sanitizeSlug(11234)).toThrowError('The input slug must be a string.');\n    expect(() => sanitizeSlug(undefined)).toThrowError('The input slug must be a string.');\n    expect(() => sanitizeSlug(() => {})).toThrowError('The input slug must be a string.');\n  });\n\n  it('throws an error for non-string replacements', () => {\n    expect(() => sanitizeSlug('test', Map({ sanitize_replacement: {} }))).toThrowError(\n      '`options.replacement` must be a string.',\n    );\n    expect(() => sanitizeSlug('test', Map({ sanitize_replacement: [] }))).toThrowError(\n      '`options.replacement` must be a string.',\n    );\n    expect(() => sanitizeSlug('test', Map({ sanitize_replacement: false }))).toThrowError(\n      '`options.replacement` must be a string.',\n    );\n    expect(() => sanitizeSlug('test', Map({ sanitize_replacement: null }))).toThrowError(\n      '`options.replacement` must be a string.',\n    );\n    expect(() => sanitizeSlug('test', Map({ sanitize_replacement: 11232 }))).toThrowError(\n      '`options.replacement` must be a string.',\n    );\n    // do not test undefined for this variant since a default is set in the cosntructor.\n    //expect(() => sanitizeSlug('test', { sanitize_replacement: undefined })).toThrowError(\"`options.replacement` must be a string.\");\n    expect(() => sanitizeSlug('test', Map({ sanitize_replacement: () => {} }))).toThrowError(\n      '`options.replacement` must be a string.',\n    );\n  });\n\n  it('should keep valid URI chars (letters digits _ - . ~)', () => {\n    expect(sanitizeSlug('This, that-one_or.the~other 123!')).toEqual(\n      'This-that-one_or.the~other-123',\n    );\n  });\n\n  it('should remove accents with `clean_accents` set', () => {\n    expect(sanitizeSlug('ěščřžý', Map({ clean_accents: true }))).toEqual('escrzy');\n  });\n\n  it('should remove non-latin chars in \"ascii\" mode', () => {\n    expect(sanitizeSlug('ěščřžý日本語のタイトル', Map({ encoding: 'ascii' }))).toEqual('');\n  });\n\n  it('should clean accents and strip non-latin chars in \"ascii\" mode with `clean_accents` set', () => {\n    expect(\n      sanitizeSlug('ěščřžý日本語のタイトル', Map({ encoding: 'ascii', clean_accents: true })),\n    ).toEqual('escrzy');\n  });\n\n  it('removes double replacements', () => {\n    expect(sanitizeSlug('test--test')).toEqual('test-test');\n    expect(sanitizeSlug('test   test')).toEqual('test-test');\n  });\n\n  it('removes trailing replacements', () => {\n    expect(sanitizeSlug('test   test   ')).toEqual('test-test');\n  });\n\n  it('removes leading replacements', () => {\n    expect(sanitizeSlug('\"test\"    test')).toEqual('test-test');\n  });\n\n  it('uses alternate replacements', () => {\n    expect(sanitizeSlug('test   test   ', Map({ sanitize_replacement: '_' }))).toEqual('test_test');\n  });\n});\n"],"file":"urlHelper.spec.js"}