{"version":3,"sources":["../../../src/reducers/entries.js"],"names":["collection","loadedEntries","append","page","slug","entries","state","entities","pages","action","type","ENTRY_REQUEST","setIn","payload","ENTRY_SUCCESS","entry","withMutations","map","ids","getIn","includes","unshift","ENTRIES_REQUEST","ENTRIES_SUCCESS","forEach","set","concat","ENTRIES_FAILURE","meta","ENTRY_FAILURE","error","message","SEARCH_ENTRIES_SUCCESS","ENTRY_DELETE_SUCCESS","deleteIn","collectionName","entrySlug","updateIn","filter","id","selectEntry","selectEntries","slugs"],"mappings":"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","sourcesContent":["import { Map, List, fromJS } from 'immutable';\nimport {\n  ENTRY_REQUEST,\n  ENTRY_SUCCESS,\n  ENTRY_FAILURE,\n  ENTRIES_REQUEST,\n  ENTRIES_SUCCESS,\n  ENTRIES_FAILURE,\n  ENTRY_DELETE_SUCCESS,\n} from 'Actions/entries';\n\nimport { SEARCH_ENTRIES_SUCCESS } from 'Actions/search';\n\nlet collection;\nlet loadedEntries;\nlet append;\nlet page;\nlet slug;\n\nconst entries = (state = Map({ entities: Map(), pages: Map() }), action) => {\n  switch (action.type) {\n    case ENTRY_REQUEST:\n      return state.setIn(\n        ['entities', `${action.payload.collection}.${action.payload.slug}`, 'isFetching'],\n        true,\n      );\n\n    case ENTRY_SUCCESS:\n      collection = action.payload.collection;\n      slug = action.payload.entry.slug;\n      return state.withMutations(map => {\n        map.setIn(['entities', `${collection}.${slug}`], fromJS(action.payload.entry));\n        const ids = map.getIn(['pages', collection, 'ids'], List());\n        if (!ids.includes(slug)) {\n          map.setIn(['pages', collection, 'ids'], ids.unshift(slug));\n        }\n      });\n\n    case ENTRIES_REQUEST:\n      return state.setIn(['pages', action.payload.collection, 'isFetching'], true);\n\n    case ENTRIES_SUCCESS:\n      collection = action.payload.collection;\n      loadedEntries = action.payload.entries;\n      append = action.payload.append;\n      page = action.payload.page;\n      return state.withMutations(map => {\n        loadedEntries.forEach(entry =>\n          map.setIn(\n            ['entities', `${collection}.${entry.slug}`],\n            fromJS(entry).set('isFetching', false),\n          ),\n        );\n\n        const ids = List(loadedEntries.map(entry => entry.slug));\n        map.setIn(\n          ['pages', collection],\n          Map({\n            page,\n            ids: append ? map.getIn(['pages', collection, 'ids'], List()).concat(ids) : ids,\n          }),\n        );\n      });\n\n    case ENTRIES_FAILURE:\n      return state.setIn(['pages', action.meta.collection, 'isFetching'], false);\n\n    case ENTRY_FAILURE:\n      return state.withMutations(map => {\n        map.setIn(\n          ['entities', `${action.payload.collection}.${action.payload.slug}`, 'isFetching'],\n          false,\n        );\n        map.setIn(\n          ['entities', `${action.payload.collection}.${action.payload.slug}`, 'error'],\n          action.payload.error.message,\n        );\n      });\n\n    case SEARCH_ENTRIES_SUCCESS:\n      loadedEntries = action.payload.entries;\n      return state.withMutations(map => {\n        loadedEntries.forEach(entry =>\n          map.setIn(\n            ['entities', `${entry.collection}.${entry.slug}`],\n            fromJS(entry).set('isFetching', false),\n          ),\n        );\n      });\n\n    case ENTRY_DELETE_SUCCESS:\n      return state.withMutations(map => {\n        map.deleteIn(['entities', `${action.payload.collectionName}.${action.payload.entrySlug}`]);\n        map.updateIn(['pages', action.payload.collectionName, 'ids'], ids =>\n          ids.filter(id => id !== action.payload.entrySlug),\n        );\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const selectEntry = (state, collection, slug) =>\n  state.getIn(['entities', `${collection}.${slug}`]);\n\nexport const selectEntries = (state, collection) => {\n  const slugs = state.getIn(['pages', collection, 'ids']);\n  return slugs && slugs.map(slug => selectEntry(state, collection, slug));\n};\n\nexport default entries;\n"],"file":"entries.js"}