{"version":3,"sources":["../../../src/serializers/remarkRehypeShortcodes.js"],"names":["remarkToRehypeShortcodes","plugins","getAsset","transform","root","transformedChildren","children","processShortcodes","node","data","shortcode","shortcodeData","plugin","get","value","toPreview","valueHtml","textNode"],"mappings":";;;;;;;;;;;AACA;;AACA;;;;;;;;AAEA;;;;;;AAMe,SAASA,wBAAT,OAAyD;AAAA,MAArBC,OAAqB,QAArBA,OAAqB;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACtE,SAAOC,SAAP;;AAEA,WAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,UAAMC,mBAAmB,GAAG,mBAAID,IAAI,CAACE,QAAT,EAAmBC,iBAAnB,CAA5B;AACA,6BAAYH,IAAZ;AAAkBE,MAAAA,QAAQ,EAAED;AAA5B;AACD;AAED;;;;;AAGA,WAASE,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B;;;AAGA,QAAI,CAAC,mBAAIA,IAAJ,EAAU,CAAC,MAAD,EAAS,WAAT,CAAV,CAAL,EAAuC,OAAOA,IAAP;AAEvC;;;;;AAN+B,uBAUMA,IAAI,CAACC,IAVX;AAAA,UAUvBC,SAVuB,cAUvBA,SAVuB;AAAA,UAUZC,aAVY,cAUZA,aAVY;AAW/B,UAAMC,MAAM,GAAGX,OAAO,CAACY,GAAR,CAAYH,SAAZ,CAAf;AAEA;;;;;;AAKA,UAAMI,KAAK,GAAGF,MAAM,CAACG,SAAP,CAAiBJ,aAAjB,EAAgCT,QAAhC,CAAd;AACA,UAAMc,SAAS,GAAG,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,4BAAeA,KAAf,CAAtD;AAEA;;;;AAGA,UAAMG,QAAQ,GAAG,2BAAE,MAAF,EAAUD,SAAV,CAAjB;AACA,UAAMV,QAAQ,GAAG,CAACW,QAAD,CAAjB;AACA,6BAAYT,IAAZ;AAAkBF,MAAAA;AAAlB;AACD;AACF","sourcesContent":["import { map, has } from 'lodash';\nimport { renderToString } from 'react-dom/server';\nimport u from 'unist-builder';\n\n/**\n * This plugin doesn't actually transform Remark (MDAST) nodes to Rehype\n * (HAST) nodes, but rather, it prepares an MDAST shortcode node for HAST\n * conversion by replacing the shortcode text with stringified HTML for\n * previewing the shortcode output.\n */\nexport default function remarkToRehypeShortcodes({ plugins, getAsset }) {\n  return transform;\n\n  function transform(root) {\n    const transformedChildren = map(root.children, processShortcodes);\n    return { ...root, children: transformedChildren };\n  }\n\n  /**\n   * Mapping function to transform nodes that contain shortcodes.\n   */\n  function processShortcodes(node) {\n    /**\n     * If the node doesn't contain shortcode data, return the original node.\n     */\n    if (!has(node, ['data', 'shortcode'])) return node;\n\n    /**\n     * Get shortcode data from the node, and retrieve the matching plugin by\n     * key.\n     */\n    const { shortcode, shortcodeData } = node.data;\n    const plugin = plugins.get(shortcode);\n\n    /**\n     * Run the shortcode plugin's `toPreview` method, which will return either\n     * an HTML string or a React component. If a React component is returned,\n     * render it to an HTML string.\n     */\n    const value = plugin.toPreview(shortcodeData, getAsset);\n    const valueHtml = typeof value === 'string' ? value : renderToString(value);\n\n    /**\n     * Return a new 'html' type node containing the shortcode preview markup.\n     */\n    const textNode = u('html', valueHtml);\n    const children = [textNode];\n    return { ...node, children };\n  }\n}\n"],"file":"remarkRehypeShortcodes.js"}