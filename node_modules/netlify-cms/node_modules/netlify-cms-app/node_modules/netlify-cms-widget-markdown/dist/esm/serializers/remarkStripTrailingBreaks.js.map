{"version":3,"sources":["../../../src/serializers/remarkStripTrailingBreaks.js"],"names":["remarkStripTrailingBreaks","transform","node","children","map","child","idx","type","subsequentNodes","slice","fragment","subsequentText","trim","filter"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;AASe,SAASA,yBAAT,GAAqC;AAClD,QAAMC,SAAS,GAAGC,IAAI,IAAI;AACxB,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBD,MAAAA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAAL,CACbC,GADa,CACT,CAACC,KAAD,EAAQC,GAAR,EAAaH,QAAb,KAA0B;AAC7B;;;;;AAKA,YAAIE,KAAK,CAACE,IAAN,KAAe,OAAnB,EAA4B;AAC1B,gBAAMC,eAAe,GAAGL,QAAQ,CAACM,KAAT,CAAeH,GAAG,GAAG,CAArB,CAAxB;AAEA;;;;;;AAKA,gBAAMI,QAAQ,GAAG;AAAEH,YAAAA,IAAI,EAAE,MAAR;AAAgBJ,YAAAA,QAAQ,EAAEK;AAA1B,WAAjB;AACA,gBAAMG,cAAc,GAAG,gCAAcD,QAAd,CAAvB;AACA,iBAAOC,cAAc,CAACC,IAAf,KAAwBP,KAAxB,GAAgC,IAAvC;AACD;AAED;;;;;AAGA,eAAOA,KAAP;AACD,OAxBa;AA0Bd;;;;AA1Bc,OA8BbQ,MA9Ba,CA8BNR,KAAK,IAAIA,KA9BH;AAgCd;;;AAhCc,OAmCbD,GAnCa,CAmCTH,SAnCS,CAAhB;AAoCD;;AACD,WAAOC,IAAP;AACD,GAxCD;;AAyCA,SAAOD,SAAP;AACD","sourcesContent":["import mdastToString from 'mdast-util-to-string';\n\n/**\n * Removes break nodes that are at the end of a block.\n *\n * When a trailing double space or backslash is encountered at the end of a\n * markdown block, Remark will interpret the character(s) literally, as only\n * break entities followed by text qualify as breaks. A manually created MDAST,\n * however, may have such entities, and users of visual editors shouldn't see\n * these artifacts in resulting markdown.\n */\nexport default function remarkStripTrailingBreaks() {\n  const transform = node => {\n    if (node.children) {\n      node.children = node.children\n        .map((child, idx, children) => {\n          /**\n           * Only touch break nodes. Convert all subsequent nodes to their text\n           * value and exclude the break node if no non-whitespace characters\n           * are found.\n           */\n          if (child.type === 'break') {\n            const subsequentNodes = children.slice(idx + 1);\n\n            /**\n             * Create a small MDAST so that mdastToString can process all\n             * siblings as children of one node rather than making multiple\n             * calls.\n             */\n            const fragment = { type: 'root', children: subsequentNodes };\n            const subsequentText = mdastToString(fragment);\n            return subsequentText.trim() ? child : null;\n          }\n\n          /**\n           * Always return the child if not a break.\n           */\n          return child;\n        })\n\n        /**\n         * Because some break nodes may be excluded, we filter out the resulting\n         * null values.\n         */\n        .filter(child => child)\n\n        /**\n         * Recurse through the MDAST by transforming each individual child node.\n         */\n        .map(transform);\n    }\n    return node;\n  };\n  return transform;\n}\n"],"file":"remarkStripTrailingBreaks.js"}