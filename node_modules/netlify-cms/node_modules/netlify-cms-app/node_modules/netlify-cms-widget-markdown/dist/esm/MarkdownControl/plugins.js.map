{"version":3,"sources":["../../../src/MarkdownControl/plugins.js"],"names":["SoftBreak","options","onKeyDown","event","change","shift","onlyIn","ignoreIn","defaultBlock","value","startBlock","type","text","includes","shouldClose","endsWith","deleteBackward","insertBlock","textNode","Text","create","breakNode","Inline","nodes","insertInline","insertText","collapseToStartOfNextText","SoftBreakOpts","SoftBreakConfigured","ParagraphSoftBreakConfigured","BreakToDefaultBlock","isExpanded","BreakToDefaultBlockOpts","BreakToDefaultBlockConfigured","BackspaceCloseBlock","key","setBlocks","focus","BackspaceCloseBlockOpts","BackspaceCloseBlockConfigured","EditListOpts","types","typeItem","EditListConfigured","EditTableOpts","typeTable","typeRow","typeCell","EditTableConfigured","plugins"],"mappings":"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","sourcesContent":["import { Text, Inline } from 'slate';\nimport isHotkey from 'is-hotkey';\nimport EditList from 'slate-edit-list';\nimport EditTable from 'slate-edit-table';\n\nconst SoftBreak = (options = {}) => ({\n  onKeyDown(event, change) {\n    if (options.shift && !isHotkey('shift+enter', event)) return;\n    if (!options.shift && !isHotkey('enter', event)) return;\n\n    const { onlyIn, ignoreIn, defaultBlock = 'paragraph' } = options;\n    const { type, text } = change.value.startBlock;\n    if (onlyIn && !onlyIn.includes(type)) return;\n    if (ignoreIn && ignoreIn.includes(type)) return;\n\n    const shouldClose = text.endsWith('\\n');\n    if (shouldClose) {\n      return change.deleteBackward(1).insertBlock(defaultBlock);\n    }\n\n    const textNode = Text.create('\\n');\n    const breakNode = Inline.create({ type: 'break', nodes: [textNode] });\n    return change\n      .insertInline(breakNode)\n      .insertText('')\n      .collapseToStartOfNextText();\n  },\n});\n\nconst SoftBreakOpts = {\n  onlyIn: ['quote', 'code'],\n};\n\nexport const SoftBreakConfigured = SoftBreak(SoftBreakOpts);\n\nexport const ParagraphSoftBreakConfigured = SoftBreak({ onlyIn: ['paragraph'], shift: true });\n\nconst BreakToDefaultBlock = ({ onlyIn = [], defaultBlock = 'paragraph' }) => ({\n  onKeyDown(event, change) {\n    const { value } = change;\n    if (!isHotkey('enter', event) || value.isExpanded) return;\n    if (onlyIn.includes(value.startBlock.type)) {\n      return change.insertBlock(defaultBlock);\n    }\n  },\n});\n\nconst BreakToDefaultBlockOpts = {\n  onlyIn: [\n    'heading-one',\n    'heading-two',\n    'heading-three',\n    'heading-four',\n    'heading-five',\n    'heading-six',\n  ],\n};\n\nexport const BreakToDefaultBlockConfigured = BreakToDefaultBlock(BreakToDefaultBlockOpts);\n\nconst BackspaceCloseBlock = (options = {}) => ({\n  onKeyDown(event, change) {\n    if (event.key !== 'Backspace') return;\n\n    const { defaultBlock = 'paragraph', ignoreIn, onlyIn } = options;\n    const { startBlock } = change.value;\n    const { type } = startBlock;\n\n    if (onlyIn && !onlyIn.includes(type)) return;\n    if (ignoreIn && ignoreIn.includes(type)) return;\n\n    if (startBlock.text === '') {\n      return change.setBlocks(defaultBlock).focus();\n    }\n  },\n});\n\nconst BackspaceCloseBlockOpts = {\n  ignoreIn: [\n    'paragraph',\n    'list-item',\n    'bulleted-list',\n    'numbered-list',\n    'table',\n    'table-row',\n    'table-cell',\n  ],\n};\n\nexport const BackspaceCloseBlockConfigured = BackspaceCloseBlock(BackspaceCloseBlockOpts);\n\nconst EditListOpts = {\n  types: ['bulleted-list', 'numbered-list'],\n  typeItem: 'list-item',\n};\n\nexport const EditListConfigured = EditList(EditListOpts);\n\nconst EditTableOpts = {\n  typeTable: 'table',\n  typeRow: 'table-row',\n  typeCell: 'table-cell',\n};\n\nexport const EditTableConfigured = EditTable(EditTableOpts);\n\nconst plugins = [\n  SoftBreakConfigured,\n  ParagraphSoftBreakConfigured,\n  BackspaceCloseBlockConfigured,\n  BreakToDefaultBlockConfigured,\n  EditListConfigured,\n];\n\nexport default plugins;\n"],"file":"plugins.js"}