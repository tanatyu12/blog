{"version":3,"sources":["../../src/MarkdownControl/__tests__/parser.spec.js"],"names":["parser","markdownToSlate","describe","it","value","expect","toMatchSnapshot"],"mappings":"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","sourcesContent":["import { markdownToSlate } from '../../serializers';\n\nconst parser = markdownToSlate;\n\ndescribe('Compile markdown to Slate Raw AST', () => {\n  it('should compile simple markdown', () => {\n    const value = `\n# H1\n\nsweet body\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile a markdown ordered list', () => {\n    const value = `\n# H1\n\n1. yo\n2. bro\n3. fro\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile bulleted lists', () => {\n    const value = `\n# H1\n\n* yo\n* bro\n* fro\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile multiple header levels', () => {\n    const value = `\n# H1\n\n## H2\n\n### H3\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile horizontal rules', () => {\n    const value = `\n# H1\n\n---\n\nblue moon\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile horizontal rules', () => {\n    const value = `\n# H1\n\n---\n\nblue moon\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile soft breaks (double space)', () => {\n    const value = `\nblue moon  \nfootballs\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile images', () => {\n    const value = `\n![super](duper.jpg)\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile code blocks', () => {\n    const value = `\n\\`\\`\\`javascript\nvar a = 1;\n\\`\\`\\`\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile nested inline markup', () => {\n    const value = `\n# Word\n\nThis is **some *hot* content**\n\nperhaps **scalding** even\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile inline code', () => {\n    const value = `\n# Word\n\nThis is some sweet \\`inline code\\` yo!\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile links', () => {\n    const value = `\n# Word\n\nHow far is it to [Google](https://google.com) land?\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile plugins', () => {\n    const value = `\n![test](test.png)\n\n{{< test >}}\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n\n  it('should compile kitchen sink example', () => {\n    const value = `\n# An exhibit of Markdown\n\nThis note demonstrates some of what Markdown is capable of doing.\n\n*Note: Feel free to play with this page. Unlike regular notes, this doesn't\nautomatically save itself.*\n\n## Basic formatting\n\nParagraphs can be written like so. A paragraph is the basic block of Markdown.\nA paragraph is what text will turn into when there is no reason it should\nbecome anything else.\n\nParagraphs must be separated by a blank line. Basic formatting of *italics* and\n**bold** is supported. This *can be **nested** like* so.\n\n## Lists\n\n### Ordered list\n\n1. Item 1 2. A second item 3. Number 3 4. â…£\n\n*Note: the fourth item uses the Unicode character for Roman numeral four.*\n\n### Unordered list\n\n* An item Another item Yet another item And there's more...\n\n## Paragraph modifiers\n\n### Code block\n\n    Code blocks are very useful for developers and other people who look at\n    code or other things that are written in plain text. As you can see, it\n    uses a fixed-width font.\n\nYou can also make \\`inline code\\` to add code into other things.\n\n### Quote\n\n> Here is a quote. What this is should be self explanatory. Quotes are\nautomatically indented when they are used.\n\n## Headings\n\nThere are six levels of headings. They correspond with the six levels of HTML\nheadings. You've probably noticed them already in the page. Each level down\nuses one more hash character.\n\n### Headings *can* also contain **formatting**\n\n### They can even contain \\`inline code\\`\n\nOf course, demonstrating what headings look like messes up the structure of the\npage.\n\nI don't recommend using more than three or four levels of headings here,\nbecause, when you're smallest heading isn't too small, and you're largest\nheading isn't too big, and you want each size up to look noticeably larger and\nmore important, there there are only so many sizes that you can use.\n\n## URLs\n\nURLs can be made in a handful of ways:\n\n* A named link to MarkItDown. The easiest way to do these is to select what you\n* want to make a link and hit \\`Ctrl+L\\`.  Another named link to\n* [MarkItDown](http://www.markitdown.net/) Sometimes you just want a URL like\n* <http://www.markitdown.net/>.\n\n## Horizontal rule\n\nA horizontal rule is a line that goes across the middle of the page.\n\n---\n\nIt's sometimes handy for breaking things up.\n\n## Images\n\nMarkdown can also contain images. I'll need to add something here sometime.\n\n## Finally\n\nThere's actually a lot more to Markdown than this. See the official\nintroduction and syntax for more information. However, be aware that this is\nnot using the official implementation, and this might work subtly differently\n  in some of the little things.\n`;\n    expect(parser(value)).toMatchSnapshot();\n  });\n});\n"],"file":"parser.spec.js"}