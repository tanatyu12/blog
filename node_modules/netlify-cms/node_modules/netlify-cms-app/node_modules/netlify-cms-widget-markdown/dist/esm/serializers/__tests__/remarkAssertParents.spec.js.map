{"version":3,"sources":["../../../../src/serializers/__tests__/remarkAssertParents.spec.js"],"names":["transform","describe","it","input","depth","output","expect","toEqual"],"mappings":"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","sourcesContent":["import u from 'unist-builder';\nimport remarkAssertParents from '../remarkAssertParents';\n\nconst transform = remarkAssertParents();\n\ndescribe('remarkAssertParents', () => {\n  it('should unnest invalidly nested blocks', () => {\n    const input = u('root', [\n      u('paragraph', [\n        u('paragraph', [u('text', 'Paragraph text.')]),\n        u('heading', { depth: 1 }, [u('text', 'Heading text.')]),\n        u('code', 'someCode()'),\n        u('blockquote', [u('text', 'Quote text.')]),\n        u('list', [u('listItem', [u('text', 'A list item.')])]),\n        u('table', [u('tableRow', [u('tableCell', [u('text', 'Text in a table cell.')])])]),\n        u('thematicBreak'),\n      ]),\n    ]);\n\n    const output = u('root', [\n      u('paragraph', [u('text', 'Paragraph text.')]),\n      u('heading', { depth: 1 }, [u('text', 'Heading text.')]),\n      u('code', 'someCode()'),\n      u('blockquote', [u('text', 'Quote text.')]),\n      u('list', [u('listItem', [u('text', 'A list item.')])]),\n      u('table', [u('tableRow', [u('tableCell', [u('text', 'Text in a table cell.')])])]),\n      u('thematicBreak'),\n    ]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should unnest deeply nested blocks', () => {\n    const input = u('root', [\n      u('paragraph', [\n        u('paragraph', [\n          u('paragraph', [\n            u('paragraph', [u('text', 'Paragraph text.')]),\n            u('heading', { depth: 1 }, [u('text', 'Heading text.')]),\n            u('code', 'someCode()'),\n            u('blockquote', [\n              u('paragraph', [u('strong', [u('heading', [u('text', 'Quote text.')])])]),\n            ]),\n            u('list', [u('listItem', [u('text', 'A list item.')])]),\n            u('table', [u('tableRow', [u('tableCell', [u('text', 'Text in a table cell.')])])]),\n            u('thematicBreak'),\n          ]),\n        ]),\n      ]),\n    ]);\n\n    const output = u('root', [\n      u('paragraph', [u('text', 'Paragraph text.')]),\n      u('heading', { depth: 1 }, [u('text', 'Heading text.')]),\n      u('code', 'someCode()'),\n      u('blockquote', [u('heading', [u('text', 'Quote text.')])]),\n      u('list', [u('listItem', [u('text', 'A list item.')])]),\n      u('table', [u('tableRow', [u('tableCell', [u('text', 'Text in a table cell.')])])]),\n      u('thematicBreak'),\n    ]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should remove blocks that are emptied as a result of denesting', () => {\n    const input = u('root', [\n      u('paragraph', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]),\n    ]);\n\n    const output = u('root', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should remove blocks that are emptied as a result of denesting', () => {\n    const input = u('root', [\n      u('paragraph', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]),\n    ]);\n\n    const output = u('root', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should handle assymetrical splits', () => {\n    const input = u('root', [\n      u('paragraph', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]),\n    ]);\n\n    const output = u('root', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should nest invalidly nested blocks in the nearest valid ancestor', () => {\n    const input = u('root', [\n      u('paragraph', [\n        u('blockquote', [u('strong', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])])]),\n      ]),\n    ]);\n\n    const output = u('root', [\n      u('blockquote', [u('heading', { depth: 1 }, [u('text', 'Heading text.')])]),\n    ]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should preserve validly nested siblings of invalidly nested blocks', () => {\n    const input = u('root', [\n      u('paragraph', [\n        u('blockquote', [\n          u('strong', [\n            u('text', 'Deep validly nested text a.'),\n            u('heading', { depth: 1 }, [u('text', 'Heading text.')]),\n            u('text', 'Deep validly nested text b.'),\n          ]),\n        ]),\n        u('text', 'Validly nested text.'),\n      ]),\n    ]);\n\n    const output = u('root', [\n      u('blockquote', [\n        u('strong', [u('text', 'Deep validly nested text a.')]),\n        u('heading', { depth: 1 }, [u('text', 'Heading text.')]),\n        u('strong', [u('text', 'Deep validly nested text b.')]),\n      ]),\n      u('paragraph', [u('text', 'Validly nested text.')]),\n    ]);\n\n    expect(transform(input)).toEqual(output);\n  });\n\n  it('should allow intermediate parents like list and table to contain required block children', () => {\n    const input = u('root', [\n      u('blockquote', [\n        u('list', [\n          u('listItem', [\n            u('table', [\n              u('tableRow', [\n                u('tableCell', [\n                  u('heading', { depth: 1 }, [u('text', 'Validly nested heading text.')]),\n                ]),\n              ]),\n            ]),\n          ]),\n        ]),\n      ]),\n    ]);\n\n    const output = u('root', [\n      u('blockquote', [\n        u('list', [\n          u('listItem', [\n            u('table', [\n              u('tableRow', [\n                u('tableCell', [\n                  u('heading', { depth: 1 }, [u('text', 'Validly nested heading text.')]),\n                ]),\n              ]),\n            ]),\n          ]),\n        ]),\n      ]),\n    ]);\n\n    expect(transform(input)).toEqual(output);\n  });\n});\n"],"file":"remarkAssertParents.spec.js"}