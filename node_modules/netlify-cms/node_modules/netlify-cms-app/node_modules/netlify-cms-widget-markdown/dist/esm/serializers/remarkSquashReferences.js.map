{"version":3,"sources":["../../../src/serializers/remarkSquashReferences.js"],"names":["remarkSquashReferences","getTransform","node","getDefinition","transform","call","boundTransform","bind","children","map","includes","type","definition","identifier","title","url","alt","pre","post","nodes","filteredChildren"],"mappings":";;;;;;;;;;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,sBAAT,GAAkC;AAC/C,SAAOC,YAAP;;AAEA,WAASA,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,UAAMC,aAAa,GAAG,mCAAiBD,IAAjB,CAAtB;AACA,WAAOE,SAAS,CAACC,IAAV,CAAe,IAAf,EAAqBF,aAArB,EAAoCD,IAApC,CAAP;AACD;;AAED,WAASE,SAAT,CAAmBD,aAAnB,EAAkCD,IAAlC,EAAwC;AACtC;;;;AAIA,UAAMI,cAAc,GAAGF,SAAS,CAACG,IAAV,CAAe,IAAf,EAAqBJ,aAArB,CAAvB;AACA,UAAMK,QAAQ,GAAGN,IAAI,CAACM,QAAL,GAAgBN,IAAI,CAACM,QAAL,CAAcC,GAAd,CAAkBH,cAAlB,CAAhB,GAAoDJ,IAAI,CAACM,QAA1E;AAEA;;;;;AAIA,QAAI,CAAC,gBAAD,EAAmB,eAAnB,EAAoCE,QAApC,CAA6CR,IAAI,CAACS,IAAlD,CAAJ,EAA6D;AAC3D,YAAMA,IAAI,GAAGT,IAAI,CAACS,IAAL,KAAc,gBAAd,GAAiC,OAAjC,GAA2C,MAAxD;AACA,YAAMC,UAAU,GAAGT,aAAa,CAACD,IAAI,CAACW,UAAN,CAAhC;;AAEA,UAAID,UAAJ,EAAgB;AAAA,cACNE,KADM,GACSF,UADT,CACNE,KADM;AAAA,cACCC,GADD,GACSH,UADT,CACCG,GADD;AAEd,eAAO,2BAAEJ,IAAF,EAAQ;AAAEG,UAAAA,KAAF;AAASC,UAAAA,GAAT;AAAcC,UAAAA,GAAG,EAAEd,IAAI,CAACc;AAAxB,SAAR,EAAuCR,QAAvC,CAAP;AACD;;AAED,YAAMS,GAAG,GAAG,2BAAE,MAAF,EAAUf,IAAI,CAACS,IAAL,KAAc,gBAAd,GAAiC,IAAjC,GAAwC,GAAlD,CAAZ;AACA,YAAMO,IAAI,GAAG,2BAAE,MAAF,EAAU,GAAV,CAAb;AACA,YAAMC,KAAK,GAAGX,QAAQ,IAAI,CAAC,2BAAE,MAAF,EAAUN,IAAI,CAACc,GAAf,CAAD,CAA1B;AACA,aAAO,CAACC,GAAD,EAAM,GAAGE,KAAT,EAAgBD,IAAhB,CAAP;AACD;AAED;;;;;;AAIA,QAAIhB,IAAI,CAACS,IAAL,KAAc,YAAlB,EAAgC;AAC9B,aAAO,IAAP;AACD;;AAED,UAAMS,gBAAgB,GAAG,uBAAQZ,QAAR,EAAkB,IAAlB,CAAzB;AAEA,6BAAYN,IAAZ;AAAkBM,MAAAA,QAAQ,EAAE,uBAAQY,gBAAR;AAA5B;AACD;AACF","sourcesContent":["import { without, flatten } from 'lodash';\nimport u from 'unist-builder';\nimport mdastDefinitions from 'mdast-util-definitions';\n\n/**\n * Raw markdown may contain image references or link references. Because there\n * is no way to maintain these references within the Slate AST, we convert image\n * and link references to standard images and links by putting their url's\n * inline. The definitions are then removed from the document.\n *\n * For example, the following markdown:\n *\n * ```\n * ![alpha][bravo]\n *\n * [bravo]: http://example.com/example.jpg\n * ```\n *\n * Yields:\n *\n * ```\n * ![alpha](http://example.com/example.jpg)\n * ```\n *\n */\nexport default function remarkSquashReferences() {\n  return getTransform;\n\n  function getTransform(node) {\n    const getDefinition = mdastDefinitions(node);\n    return transform.call(null, getDefinition, node);\n  }\n\n  function transform(getDefinition, node) {\n    /**\n     * Bind the `getDefinition` function to `transform` and recursively map all\n     * nodes.\n     */\n    const boundTransform = transform.bind(null, getDefinition);\n    const children = node.children ? node.children.map(boundTransform) : node.children;\n\n    /**\n     * Combine reference and definition nodes into standard image and link\n     * nodes.\n     */\n    if (['imageReference', 'linkReference'].includes(node.type)) {\n      const type = node.type === 'imageReference' ? 'image' : 'link';\n      const definition = getDefinition(node.identifier);\n\n      if (definition) {\n        const { title, url } = definition;\n        return u(type, { title, url, alt: node.alt }, children);\n      }\n\n      const pre = u('text', node.type === 'imageReference' ? '![' : '[');\n      const post = u('text', ']');\n      const nodes = children || [u('text', node.alt)];\n      return [pre, ...nodes, post];\n    }\n\n    /**\n     * Remove definition nodes and filter the resulting null values from the\n     * filtered children array.\n     */\n    if (node.type === 'definition') {\n      return null;\n    }\n\n    const filteredChildren = without(children, null);\n\n    return { ...node, children: flatten(filteredChildren) };\n  }\n}\n"],"file":"remarkSquashReferences.js"}