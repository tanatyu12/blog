{"version":3,"sources":["../../../src/MarkdownControl/validators.js"],"names":["validateNode","node","object","doc","hasBlocks","getBlocks","isEmpty","change","block","Block","create","type","nodes","Text","key","value","document","insertNodeByKey","focus","nestedShortcode","findDescendant","descendant","getParent","unwrapShortcode","newDoc","newParent","docIsParent","newParentParent","docIsParentParent","unwrapNodeByKey","normalize","trailingShortcode","last","text","get","size","invalidChild","getTexts","find","getMarks","forEach","mark","removeMarkByKey"],"mappings":"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","sourcesContent":["import { Block, Text } from 'slate';\n\n/**\n * Validation functions are used to validate the editor state each time it\n * changes, to ensure it is never rendered in an undesirable state.\n */\nexport function validateNode(node) {\n  /**\n   * Validation of the document itself.\n   */\n  if (node.object === 'document') {\n    const doc = node;\n    /**\n     * If the editor is ever in an empty state, insert an empty\n     * paragraph block.\n     */\n    const hasBlocks = !doc.getBlocks().isEmpty();\n    if (!hasBlocks) {\n      return change => {\n        const block = Block.create({\n          type: 'paragraph',\n          nodes: [Text.create('')],\n        });\n        const { key } = change.value.document;\n        return change.insertNodeByKey(key, 0, block).focus();\n      };\n    }\n\n    /**\n     * Ensure that shortcodes are children of the root node.\n     */\n    const nestedShortcode = doc.findDescendant(descendant => {\n      const { type, key } = descendant;\n      return type === 'shortcode' && doc.getParent(key).key !== doc.key;\n    });\n    if (nestedShortcode) {\n      const unwrapShortcode = change => {\n        const key = nestedShortcode.key;\n        const newDoc = change.value.document;\n        const newParent = newDoc.getParent(key);\n        const docIsParent = newParent.key === newDoc.key;\n        const newParentParent = newDoc.getParent(newParent.key);\n        const docIsParentParent = newParentParent && newParentParent.key === newDoc.key;\n        if (docIsParent) {\n          return change;\n        }\n        /**\n         * Normalization happens by default, and causes all validation to\n         * restart with the result of a change upon execution. This unwrap loop\n         * could temporarily place a shortcode node in conflict with an outside\n         * plugin's schema, resulting in an infinite loop. To ensure against\n         * this, we turn off normalization until the last change.\n         */\n        change.unwrapNodeByKey(nestedShortcode.key, { normalize: docIsParentParent });\n      };\n      return unwrapShortcode;\n    }\n\n    /**\n     * Ensure that trailing shortcodes are followed by an empty paragraph.\n     */\n    const trailingShortcode = doc.findDescendant(descendant => {\n      const { type, key } = descendant;\n      return type === 'shortcode' && doc.getBlocks().last().key === key;\n    });\n    if (trailingShortcode) {\n      return change => {\n        const text = Text.create('');\n        const block = Block.create({ type: 'paragraph', nodes: [text] });\n        return change.insertNodeByKey(doc.key, doc.get('nodes').size, block);\n      };\n    }\n  }\n\n  /**\n   * Ensure that code blocks contain no marks.\n   */\n  if (node.type === 'code') {\n    const invalidChild = node.getTexts().find(text => !text.getMarks().isEmpty());\n    if (invalidChild) {\n      return change =>\n        invalidChild\n          .getMarks()\n          .forEach(mark =>\n            change.removeMarkByKey(invalidChild.key, 0, invalidChild.get('characters').size, mark),\n          );\n    }\n  }\n}\n"],"file":"validators.js"}