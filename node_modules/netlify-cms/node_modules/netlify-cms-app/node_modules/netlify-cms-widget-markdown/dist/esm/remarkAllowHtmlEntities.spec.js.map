{"version":3,"sources":["../../src/serializers/__tests__/remarkAllowHtmlEntities.spec.js"],"names":["process","markdown","mdast","use","markdownToRemark","remarkAllowHtmlEntities","parse","children","value","describe","it","expect","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,OAAO,GAAGC,QAAQ,IAAI;AAC1B,QAAMC,KAAK,GAAG,wBACXC,GADW,CACPC,oBADO,EAEXD,GAFW,CAEPE,gCAFO,EAGXC,KAHW,CAGLL,QAHK,CAAd;AAKA;;;;;;;;;;AASA,SAAOC,KAAK,CAACK,QAAN,CAAe,CAAf,EAAkBA,QAAlB,CAA2B,CAA3B,EAA8BC,KAArC;AACD,CAhBD;;AAkBAC,QAAQ,CAAC,yBAAD,EAA4B,MAAM;AACxCC,EAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,IAAAA,MAAM,CAACX,OAAO,CAAC,aAAD,CAAR,CAAN,CAA+BY,OAA/B,CAAuC,aAAvC;AACD,GAFC,CAAF;AAGD,CAJO,CAAR","sourcesContent":["import unified from 'unified';\nimport markdownToRemark from 'remark-parse';\nimport remarkAllowHtmlEntities from '../remarkAllowHtmlEntities';\n\nconst process = markdown => {\n  const mdast = unified()\n    .use(markdownToRemark)\n    .use(remarkAllowHtmlEntities)\n    .parse(markdown);\n\n  /**\n   * The MDAST will look like:\n   *\n   * { type: 'root', children: [\n   *   { type: 'paragraph', children: [\n   *     // results here\n   *   ]}\n   * ]}\n   */\n  return mdast.children[0].children[0].value;\n};\n\ndescribe('remarkAllowHtmlEntities', () => {\n  it('should not decode HTML entities', () => {\n    expect(process('&lt;div&gt;')).toEqual('&lt;div&gt;');\n  });\n});\n"],"file":"remarkAllowHtmlEntities.spec.js"}