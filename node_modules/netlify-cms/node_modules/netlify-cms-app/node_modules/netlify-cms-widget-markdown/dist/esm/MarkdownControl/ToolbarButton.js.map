{"version":3,"sources":["../../../src/MarkdownControl/ToolbarButton.js"],"names":["StyledToolbarButton","buttons","button","props","isActive","Icon","ToolbarButton","type","label","icon","onClick","isHidden","disabled","e","propTypes","PropTypes","string","isRequired","func","bool"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;AAEA,MAAMA,mBAAmB;AAAA;AAAA;AAAA,GACrBC,6BAAQC,MADa,sGAOdC,KAAK,IAAKA,KAAK,CAACC,QAAN,GAAiB,SAAjB,GAA6B,SAPzB,0DAerBC,yBAfqB,g+DAAzB;;AAoBA,MAAMC,aAAa,GAAG,UAAkE;AAAA,MAA/DC,IAA+D,QAA/DA,IAA+D;AAAA,MAAzDC,KAAyD,QAAzDA,KAAyD;AAAA,MAAlDC,IAAkD,QAAlDA,IAAkD;AAAA,MAA5CC,QAA4C,QAA5CA,OAA4C;AAAA,MAAnCN,QAAmC,QAAnCA,QAAmC;AAAA,MAAzBO,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACtF,MAAID,QAAJ,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SACE,6BAAC,mBAAD;AACE,IAAA,QAAQ,EAAEP,QAAQ,IAAIG,IAAZ,IAAoBH,QAAQ,CAACG,IAAD,CADxC;AAEE,IAAA,OAAO,EAAEM,CAAC,IAAIH,QAAO,IAAIA,QAAO,CAACG,CAAD,EAAIN,IAAJ,CAFlC;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,QAAQ,EAAEI;AAJZ,KAMGH,IAAI,GAAG,6BAAC,yBAAD;AAAM,IAAA,IAAI,EAAEA;AAAZ,IAAH,GAA0BD,KANjC,CADF;AAUD,CAfD;;AAiBAF,aAAa,CAACQ,SAAd,GAA0B;AACxBP,EAAAA,IAAI,EAAEQ,mBAAUC,MADQ;AAExBR,EAAAA,KAAK,EAAEO,mBAAUC,MAAV,CAAiBC,UAFA;AAGxBR,EAAAA,IAAI,EAAEM,mBAAUC,MAHQ;AAIxBN,EAAAA,OAAO,EAAEK,mBAAUG,IAJK;AAKxBd,EAAAA,QAAQ,EAAEW,mBAAUG,IALI;AAMxBP,EAAAA,QAAQ,EAAEI,mBAAUI,IANI;AAOxBP,EAAAA,QAAQ,EAAEG,mBAAUI;AAPI,CAA1B;eAUeb,a","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport { Icon, buttons } from 'netlify-cms-ui-default';\n\nconst StyledToolbarButton = styled.button`\n  ${buttons.button};\n  display: inline-block;\n  padding: 6px;\n  border: none;\n  background-color: transparent;\n  font-size: 16px;\n  color: ${props => (props.isActive ? '#1e2532' : 'inherit')};\n  cursor: pointer;\n\n  &:disabled {\n    cursor: auto;\n    opacity: 0.5;\n  }\n\n  ${Icon} {\n    display: block;\n  }\n`;\n\nconst ToolbarButton = ({ type, label, icon, onClick, isActive, isHidden, disabled }) => {\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <StyledToolbarButton\n      isActive={isActive && type && isActive(type)}\n      onClick={e => onClick && onClick(e, type)}\n      title={label}\n      disabled={disabled}\n    >\n      {icon ? <Icon type={icon} /> : label}\n    </StyledToolbarButton>\n  );\n};\n\nToolbarButton.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  icon: PropTypes.string,\n  onClick: PropTypes.func,\n  isActive: PropTypes.func,\n  isHidden: PropTypes.bool,\n  disabled: PropTypes.bool,\n};\n\nexport default ToolbarButton;\n"],"file":"ToolbarButton.js"}