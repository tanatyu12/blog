{"version":3,"sources":["../../../src/__tests__/renderer.spec.js"],"names":["describe","it","value","expect","renderer","create","toJSON","toMatchSnapshot","heading","Array","keys"],"mappings":"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","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\nimport { padStart } from 'lodash';\nimport MarkdownPreview from '../MarkdownPreview';\nimport { markdownToHtml } from '../serializers';\n\ndescribe('Markdown Preview renderer', () => {\n  describe('Markdown rendering', () => {\n    describe('General', () => {\n      it('should render markdown', () => {\n        const value = `\n# H1\n\nText with **bold** & _em_ elements\n\n## H2\n\n* ul item 1\n* ul item 2\n\n### H3\n\n1. ol item 1\n1. ol item 2\n1. ol item 3\n\n#### H4\n\n[link title](http://google.com)\n\n##### H5\n\n![alt text](https://pbs.twimg.com/profile_images/678903331176214528/TQTdqGwD.jpg)\n\n###### H6\n\n![](https://pbs.twimg.com/profile_images/678903331176214528/TQTdqGwD.jpg)\n`;\n        expect(\n          renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n        ).toMatchSnapshot();\n      });\n    });\n\n    describe('Headings', () => {\n      for (const heading of [...Array(6).keys()]) {\n        it(`should render Heading ${heading + 1}`, () => {\n          const value = padStart(' Title', heading + 7, '#');\n          expect(\n            renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n          ).toMatchSnapshot();\n        });\n      }\n    });\n\n    describe('Lists', () => {\n      it('should render lists', () => {\n        const value = `\n1. ol item 1\n1. ol item 2\n    * Sublist 1\n    * Sublist 2\n    * Sublist 3\n        1. Sub-Sublist 1\n        1. Sub-Sublist 2\n        1. Sub-Sublist 3\n1. ol item 3\n`;\n        expect(\n          renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n        ).toMatchSnapshot();\n      });\n    });\n\n    describe('Links', () => {\n      it('should render links', () => {\n        const value = `\nI get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n`;\n        expect(\n          renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n        ).toMatchSnapshot();\n      });\n    });\n\n    describe('Code', () => {\n      it('should render code', () => {\n        const value = 'Use the `printf()` function.';\n        expect(\n          renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n        ).toMatchSnapshot();\n      });\n\n      it('should render code 2', () => {\n        const value = '``There is a literal backtick (`) here.``';\n        expect(\n          renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n        ).toMatchSnapshot();\n      });\n    });\n\n    describe('HTML', () => {\n      it('should render HTML as is when using Markdown', () => {\n        const value = `\n# Title\n\n<form action=\"test\">\n  <label for=\"input\">\n    <input type=\"checkbox\" checked=\"checked\" id=\"input\"/> My label\n  </label>\n  <dl class=\"test-class another-class\" style=\"width: 100%\">\n      <dt data-attr=\"test\">Test HTML content</dt>\n      <dt>Testing HTML in Markdown</dt>\n  </dl>\n</form>\n\n<h1 style=\"display: block; border: 10px solid #f00; width: 100%\">Test</h1>\n`;\n        expect(\n          renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n        ).toMatchSnapshot();\n      });\n    });\n  });\n\n  describe('HTML rendering', () => {\n    it('should render HTML', () => {\n      const value = '<p>Paragraph with <em>inline</em> element</p>';\n      expect(\n        renderer.create(<MarkdownPreview value={markdownToHtml(value)} />).toJSON(),\n      ).toMatchSnapshot();\n    });\n  });\n});\n"],"file":"renderer.spec.js"}