{"version":3,"sources":["../../../src/MarkdownControl/Shortcode.js"],"names":["ShortcodeContainer","components","objectWidgetTopBarContainer","lengths","borderRadius","colors","textFieldBorder","props","collapsed","css","ShortcodeTopBar","ListItemTopBar","ShortcodeTitle","controlLabel","Shortcode","React","Component","constructor","fieldName","value","editor","node","shortcodeData","data","get","set","change","c","setNodeByKey","key","setState","state","removeNodeByKey","focus","event","stopPropagation","handleCollapseToggle","field","Control","controlProps","onChange","handleChange","render","attributes","pluginId","plugin","handleClick","handleRemove","map","renderControl"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { Map } from 'immutable';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\nimport { partial, capitalize } from 'lodash';\nimport { ListItemTopBar, components, colors, lengths } from 'netlify-cms-ui-default';\nimport { getEditorControl, getEditorComponents } from './index';\n\nconst ShortcodeContainer = styled.div`\n  ${components.objectWidgetTopBarContainer};\n  border-radius: ${lengths.borderRadius};\n  border: 2px solid ${colors.textFieldBorder};\n  margin: 12px 0;\n  padding: 14px;\n\n  ${props =>\n    props.collapsed &&\n    css`\n      background-color: ${colors.textFieldBorder};\n      cursor: pointer;\n    `};\n`;\n\nconst ShortcodeTopBar = styled(ListItemTopBar)`\n  background-color: ${colors.textFieldBorder};\n  margin: -14px -14px 0;\n  border-radius: 0;\n`;\n\nconst ShortcodeTitle = styled.div`\n  padding: 8px;\n  color: ${colors.controlLabel};\n`;\n\nexport default class Shortcode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /**\n       * The `shortcodeNew` prop is set to `true` when creating a new Shortcode,\n       * so that the form is immediately open for editing. Otherwise all\n       * shortcodes are collapsed by default.\n       */\n      collapsed: !props.node.data.get('shortcodeNew'),\n    };\n  }\n\n  handleChange = (fieldName, value) => {\n    const { editor, node } = this.props;\n    const shortcodeData = Map(node.data.get('shortcodeData')).set(fieldName, value);\n    const data = node.data.set('shortcodeData', shortcodeData);\n    editor.change(c => c.setNodeByKey(node.key, { data }));\n  };\n\n  handleCollapseToggle = () => {\n    this.setState({ collapsed: !this.state.collapsed });\n  };\n\n  handleRemove = () => {\n    const { editor, node } = this.props;\n    editor.change(change => {\n      change.removeNodeByKey(node.key).focus();\n    });\n  };\n\n  handleClick = event => {\n    /**\n     * Stop click from propagating to editor, otherwise focus will be passed\n     * to the editor.\n     */\n    event.stopPropagation();\n\n    /**\n     * If collapsed, any click should open the form.\n     */\n    if (this.state.collapsed) {\n      this.handleCollapseToggle();\n    }\n  };\n\n  renderControl = (shortcodeData, field) => {\n    if (field.get('widget') === 'hidden') return null;\n    const value = shortcodeData.get(field.get('name'));\n    const key = `field-${field.get('name')}`;\n    const Control = getEditorControl();\n    const controlProps = { field, value, onChange: this.handleChange };\n\n    return (\n      <div key={key}>\n        <Control {...controlProps} />\n      </div>\n    );\n  };\n\n  render() {\n    const { attributes, node } = this.props;\n    const { collapsed } = this.state;\n    const pluginId = node.data.get('shortcode');\n    const shortcodeData = Map(this.props.node.data.get('shortcodeData'));\n    const plugin = getEditorComponents().get(pluginId);\n    return (\n      <ShortcodeContainer collapsed={collapsed} {...attributes} onClick={this.handleClick}>\n        <ShortcodeTopBar\n          collapsed={collapsed}\n          onCollapseToggle={this.handleCollapseToggle}\n          onRemove={this.handleRemove}\n        />\n        {collapsed ? (\n          <ShortcodeTitle>{capitalize(pluginId)}</ShortcodeTitle>\n        ) : (\n          plugin.get('fields').map(partial(this.renderControl, shortcodeData))\n        )}\n      </ShortcodeContainer>\n    );\n  }\n}\n"],"file":"Shortcode.js"}