{"version":3,"sources":["../../../../src/serializers/__tests__/remarkPaddedLinks.spec.js"],"names":["input","markdown","use","markdownToRemark","remarkPaddedLinks","remarkToMarkdown","processSync","contents","output","describe","it","expect","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,KAAK,GAAGC,QAAQ,IACpB,wBACGC,GADH,CACOC,oBADP,EAEGD,GAFH,CAEOE,0BAFP,EAGGF,GAHH,CAGOG,wBAHP,EAIGC,WAJH,CAIeL,QAJf,EAIyBM,QAL3B;;AAOA,MAAMC,MAAM,GAAGP,QAAQ,IACrB,wBACGC,GADH,CACOC,oBADP,EAEGD,GAFH,CAEOG,wBAFP,EAGGC,WAHH,CAGeL,QAHf,EAGyBM,QAJ3B;;AAMAE,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCC,EAAAA,EAAE,CAAC,2DAAD,EAA8D,MAAM;AACpEC,IAAAA,MAAM,CAACX,KAAK,CAAC,UAAD,CAAN,CAAN,CAA0BY,OAA1B,CAAkCJ,MAAM,CAAC,UAAD,CAAxC;AACD,GAFC,CAAF;AAIAE,EAAAA,EAAE,CAAC,sEAAD,EAAyE,MAAM;AAC/EC,IAAAA,MAAM,CAACX,KAAK,CAAC,YAAD,CAAN,CAAN,CAA4BY,OAA5B,CAAoCJ,MAAM,CAAC,UAAD,CAA1C;AACD,GAFC,CAAF;AAIAE,EAAAA,EAAE,CAAC,gEAAD,EAAmE,MAAM;AACzEC,IAAAA,MAAM,CAACX,KAAK,CAAC,gBAAD,CAAN,CAAN,CAAgCY,OAAhC,CAAwCJ,MAAM,CAAC,gBAAD,CAA9C;AACD,GAFC,CAAF;AAIAE,EAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,IAAAA,MAAM,CAACX,KAAK,CAAC,gBAAD,CAAN,CAAN,CAAgCY,OAAhC,CAAwCJ,MAAM,CAAC,gBAAD,CAA9C;AACD,GAFC,CAAF;AAIAE,EAAAA,EAAE,CAAC,mEAAD,EAAsE,MAAM;AAC5EC,IAAAA,MAAM,CAACX,KAAK,CAAC,2BAAD,CAAN,CAAN,CAA2CY,OAA3C,CAAmDJ,MAAM,CAAC,2BAAD,CAAzD;AACD,GAFC,CAAF;AAIAE,EAAAA,EAAE,CAAC,wDAAD,EAA2D,MAAM;AACjEC,IAAAA,MAAM,CAACX,KAAK,CAAC,sBAAD,CAAN,CAAN,CAAsCY,OAAtC,CAA8CJ,MAAM,CAAC,sBAAD,CAApD;AACD,GAFC,CAAF;AAGD,CAxBO,CAAR","sourcesContent":["import unified from 'unified';\nimport markdownToRemark from 'remark-parse';\nimport remarkToMarkdown from 'remark-stringify';\nimport remarkPaddedLinks from '../remarkPaddedLinks';\n\nconst input = markdown =>\n  unified()\n    .use(markdownToRemark)\n    .use(remarkPaddedLinks)\n    .use(remarkToMarkdown)\n    .processSync(markdown).contents;\n\nconst output = markdown =>\n  unified()\n    .use(markdownToRemark)\n    .use(remarkToMarkdown)\n    .processSync(markdown).contents;\n\ndescribe('remarkPaddedLinks', () => {\n  it('should move leading and trailing spaces outside of a link', () => {\n    expect(input('[ a ](b)')).toEqual(output(' [a](b) '));\n  });\n\n  it('should convert multiple leading or trailing spaces to a single space', () => {\n    expect(input('[  a  ](b)')).toEqual(output(' [a](b) '));\n  });\n\n  it('should work with only a leading space or only a trailing space', () => {\n    expect(input('[ a](b)[c ](d)')).toEqual(output(' [a](b)[c](d) '));\n  });\n\n  it('should work for nested links', () => {\n    expect(input('* # a[ b ](c)d')).toEqual(output('* # a [b](c) d'));\n  });\n\n  it('should work for parents with multiple links that are not siblings', () => {\n    expect(input('# a[ b ](c)d **[ e ](f)**')).toEqual(output('# a [b](c) d ** [e](f) **'));\n  });\n\n  it('should work for links with arbitrarily nested children', () => {\n    expect(input('[ a __*b*__ _c_ ](d)')).toEqual(output(' [a __*b*__ _c_](d) '));\n  });\n});\n"],"file":"remarkPaddedLinks.spec.js"}