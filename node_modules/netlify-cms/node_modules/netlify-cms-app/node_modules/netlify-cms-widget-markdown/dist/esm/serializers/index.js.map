{"version":3,"sources":["../../../src/serializers/index.js"],"names":["markdownToRemark","markdown","parsed","use","markdownToRemarkPlugin","fences","commonmark","markdownToRemarkRemoveTokenizers","inlineTokenizers","remarkAllowHtmlEntities","parse","result","remarkSquashReferences","remarkImagesToText","remarkShortcodes","plugins","runSync","forEach","tokenizer","Parser","prototype","remarkToMarkdown","obj","remarkAllowAllText","Compiler","visitors","text","node","value","mdast","remarkToMarkdownPluginOpts","listItemIndent","bullet","strong","rule","processedMdast","remarkEscapeMarkdownEntities","remarkStripTrailingBreaks","remarkToMarkdownPlugin","stringify","markdownToHtml","getAsset","hast","remarkToRehypeShortcodes","remarkToRehype","allowDangerousHTML","html","rehypeToHtml","allowDangerousCharacters","htmlToSlate","htmlToRehype","fragment","rehypePaperEmoji","rehypeToRemark","minify","slateRaw","remarkAssertParents","remarkPaddedLinks","remarkWrapHtml","remarkToSlate","markdownToSlate","slateToMarkdown","raw","shortcodePlugins"],"mappings":"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","sourcesContent":["import { trimEnd } from 'lodash';\nimport unified from 'unified';\nimport u from 'unist-builder';\nimport markdownToRemarkPlugin from 'remark-parse';\nimport remarkToMarkdownPlugin from 'remark-stringify';\nimport remarkToRehype from 'remark-rehype';\nimport rehypeToHtml from 'rehype-stringify';\nimport htmlToRehype from 'rehype-parse';\nimport rehypeToRemark from 'rehype-remark';\nimport remarkToRehypeShortcodes from './remarkRehypeShortcodes';\nimport rehypePaperEmoji from './rehypePaperEmoji';\nimport remarkAssertParents from './remarkAssertParents';\nimport remarkPaddedLinks from './remarkPaddedLinks';\nimport remarkWrapHtml from './remarkWrapHtml';\nimport remarkToSlate from './remarkSlate';\nimport remarkSquashReferences from './remarkSquashReferences';\nimport remarkImagesToText from './remarkImagesToText';\nimport remarkShortcodes from './remarkShortcodes';\nimport remarkEscapeMarkdownEntities from './remarkEscapeMarkdownEntities';\nimport remarkStripTrailingBreaks from './remarkStripTrailingBreaks';\nimport remarkAllowHtmlEntities from './remarkAllowHtmlEntities';\nimport slateToRemark from './slateRemark';\nimport { getEditorComponents } from '../MarkdownControl';\n\n/**\n * This module contains all serializers for the Markdown widget.\n *\n * The value of a Markdown widget is transformed to various formats during\n * editing, and these formats are referenced throughout serializer source\n * documentation. Below is brief glossary of the formats used.\n *\n * - Markdown {string}\n *   The stringified Markdown value. The value of the field is persisted\n *   (stored) in this format, and the stringified value is also used when the\n *   editor is in \"raw\" Markdown mode.\n *\n * - MDAST {object}\n *   Also loosely referred to as \"Remark\". MDAST stands for MarkDown AST\n *   (Abstract Syntax Tree), and is an object representation of a Markdown\n *   document. Underneath, it's a Unist tree with a Markdown-specific schema.\n *   MDAST syntax is a part of the Unified ecosystem, and powers the Remark\n *   processor, so Remark plugins may be used.\n *\n * - HAST {object}\n *   Also loosely referred to as \"Rehype\". HAST, similar to MDAST, is an object\n *   representation of an HTML document.  The field value takes this format\n *   temporarily before the document is stringified to HTML.\n *\n * - HTML {string}\n *   The field value is stringifed to HTML for preview purposes - the HTML value\n *   is never parsed, it is output only.\n *\n * - Slate Raw AST {object}\n *   Slate's Raw AST is a very simple and unopinionated object representation of\n *   a document in a Slate editor. We define our own Markdown-specific schema\n *   for serialization to/from Slate's Raw AST and MDAST.\n */\n\n/**\n * Deserialize a Markdown string to an MDAST.\n */\nexport const markdownToRemark = markdown => {\n  /**\n   * Parse the Markdown string input to an MDAST.\n   */\n  const parsed = unified()\n    .use(markdownToRemarkPlugin, { fences: true, commonmark: true })\n    .use(markdownToRemarkRemoveTokenizers, { inlineTokenizers: ['url'] })\n    .use(remarkAllowHtmlEntities)\n    .parse(markdown);\n\n  /**\n   * Further transform the MDAST with plugins.\n   */\n  const result = unified()\n    .use(remarkSquashReferences)\n    .use(remarkImagesToText)\n    .use(remarkShortcodes, { plugins: getEditorComponents() })\n    .runSync(parsed);\n\n  return result;\n};\n\n/**\n * Remove named tokenizers from the parser, effectively deactivating them.\n */\nfunction markdownToRemarkRemoveTokenizers({ inlineTokenizers }) {\n  inlineTokenizers &&\n    inlineTokenizers.forEach(tokenizer => {\n      delete this.Parser.prototype.inlineTokenizers[tokenizer];\n    });\n}\n\n/**\n * Serialize an MDAST to a Markdown string.\n */\nexport const remarkToMarkdown = obj => {\n  /**\n   * Rewrite the remark-stringify text visitor to simply return the text value,\n   * without encoding or escaping any characters. This means we're completely\n   * trusting the markdown that we receive.\n   */\n  function remarkAllowAllText() {\n    const Compiler = this.Compiler;\n    const visitors = Compiler.prototype.visitors;\n    visitors.text = node => node.value;\n  }\n\n  /**\n   * Provide an empty MDAST if no value is provided.\n   */\n  const mdast = obj || u('root', [u('paragraph', [u('text', '')])]);\n\n  const remarkToMarkdownPluginOpts = {\n    commonmark: true,\n    fences: true,\n    listItemIndent: '1',\n\n    /**\n     * Settings to emulate the defaults from the Prosemirror editor, not\n     * necessarily optimal. Should eventually be configurable.\n     */\n    bullet: '*',\n    strong: '*',\n    rule: '-',\n  };\n\n  /**\n   * Transform the MDAST with plugins.\n   */\n  const processedMdast = unified()\n    .use(remarkEscapeMarkdownEntities)\n    .use(remarkStripTrailingBreaks)\n    .runSync(mdast);\n\n  const markdown = unified()\n    .use(remarkToMarkdownPlugin, remarkToMarkdownPluginOpts)\n    .use(remarkAllowAllText)\n    .stringify(processedMdast);\n\n  /**\n   * Return markdown with trailing whitespace removed.\n   */\n  return trimEnd(markdown);\n};\n\n/**\n * Convert Markdown to HTML.\n */\nexport const markdownToHtml = (markdown, getAsset) => {\n  const mdast = markdownToRemark(markdown);\n\n  const hast = unified()\n    .use(remarkToRehypeShortcodes, { plugins: getEditorComponents(), getAsset })\n    .use(remarkToRehype, { allowDangerousHTML: true })\n    .runSync(mdast);\n\n  const html = unified()\n    .use(rehypeToHtml, { allowDangerousHTML: true, allowDangerousCharacters: true })\n    .stringify(hast);\n\n  return html;\n};\n\n/**\n * Deserialize an HTML string to Slate's Raw AST. Currently used for HTML\n * pastes.\n */\nexport const htmlToSlate = html => {\n  const hast = unified()\n    .use(htmlToRehype, { fragment: true })\n    .parse(html);\n\n  const mdast = unified()\n    .use(rehypePaperEmoji)\n    .use(rehypeToRemark, { minify: false })\n    .runSync(hast);\n\n  const slateRaw = unified()\n    .use(remarkAssertParents)\n    .use(remarkPaddedLinks)\n    .use(remarkImagesToText)\n    .use(remarkShortcodes, { plugins: getEditorComponents() })\n    .use(remarkWrapHtml)\n    .use(remarkToSlate)\n    .runSync(mdast);\n\n  return slateRaw;\n};\n\n/**\n * Convert Markdown to Slate's Raw AST.\n */\nexport const markdownToSlate = markdown => {\n  const mdast = markdownToRemark(markdown);\n\n  const slateRaw = unified()\n    .use(remarkWrapHtml)\n    .use(remarkToSlate)\n    .runSync(mdast);\n\n  return slateRaw;\n};\n\n/**\n * Convert a Slate Raw AST to Markdown.\n *\n * Requires shortcode plugins to parse shortcode nodes back to text.\n *\n * Note that Unified is not utilized for the conversion from Slate's Raw AST to\n * MDAST. The conversion is manual because Unified can only operate on Unist\n * trees.\n */\nexport const slateToMarkdown = raw => {\n  const mdast = slateToRemark(raw, { shortcodePlugins: getEditorComponents() });\n  const markdown = remarkToMarkdown(mdast);\n  return markdown;\n};\n"],"file":"index.js"}