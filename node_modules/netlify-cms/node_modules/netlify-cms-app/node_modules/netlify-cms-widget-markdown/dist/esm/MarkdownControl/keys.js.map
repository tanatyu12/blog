{"version":3,"sources":["../../../src/MarkdownControl/keys.js"],"names":["onKeyDown","event","change","createDefaultBlock","Block","create","type","nodes","Text","value","doc","document","anchorBlock","focusBlock","singleBlockSelected","isVoid","preventDefault","focusBlockParent","getParent","key","focusBlockIndex","indexOf","focusBlockIsFirstChild","newBlock","newBlockIndex","insertNodeByKey","collapseToStartOf","marks","find","markName","toggleMark"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;eAEeA,S;;;AAEf,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAChC,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,WAAOC,aAAMC,MAAN,CAAa;AAClBC,MAAAA,IAAI,EAAE,WADY;AAElBC,MAAAA,KAAK,EAAE,CAACC,YAAKH,MAAL,CAAY,EAAZ,CAAD;AAFW,KAAb,CAAP;AAID,GALD;;AAOA,MAAI,uBAAS,OAAT,EAAkBJ,KAAlB,CAAJ,EAA8B;AAC5B;;;;;;;;AAD4B,0BASuBC,MAAM,CAACO,KAT9B;AAAA,UASVC,GATU,iBASpBC,QAToB;AAAA,UASLC,WATK,iBASLA,WATK;AAAA,UASQC,UATR,iBASQA,UATR;AAU5B,UAAMC,mBAAmB,GAAGF,WAAW,KAAKC,UAA5C;AACA,QAAI,CAACC,mBAAD,IAAwB,CAACD,UAAU,CAACE,MAAxC,EAAgD;AAEhDd,IAAAA,KAAK,CAACe,cAAN;AAEA,UAAMC,gBAAgB,GAAGP,GAAG,CAACQ,SAAJ,CAAcL,UAAU,CAACM,GAAzB,CAAzB;AACA,UAAMC,eAAe,GAAGH,gBAAgB,CAACV,KAAjB,CAAuBc,OAAvB,CAA+BR,UAA/B,CAAxB;AACA,UAAMS,sBAAsB,GAAGF,eAAe,KAAK,CAAnD;AAEA,UAAMG,QAAQ,GAAGpB,kBAAkB,EAAnC;AACA,UAAMqB,aAAa,GAAGF,sBAAsB,GAAG,CAAH,GAAOF,eAAe,GAAG,CAArE;AAEA,WAAOlB,MAAM,CACVuB,eADI,CACYR,gBAAgB,CAACE,GAD7B,EACkCK,aADlC,EACiDD,QADjD,EAEJG,iBAFI,CAEcH,QAFd,CAAP;AAGD;;AAED,QAAMI,KAAK,GAAG,CAAC,CAAC,GAAD,EAAM,MAAN,CAAD,EAAgB,CAAC,GAAD,EAAM,QAAN,CAAhB,EAAiC,CAAC,GAAD,EAAM,eAAN,CAAjC,EAAyD,CAAC,GAAD,EAAM,MAAN,CAAzD,CAAd;;AAnCgC,eAqCXA,KAAK,CAACC,IAAN,CAAW;AAAA;AAAA,QAAET,GAAF;;AAAA,WAAW,uBAAU,OAAMA,GAAI,EAApB,EAAuBlB,KAAvB,CAAX;AAAA,GAAX,KAAwD,EArC7C;AAAA;AAAA,QAqCvB4B,QArCuB;;AAuChC,MAAIA,QAAJ,EAAc;AACZ5B,IAAAA,KAAK,CAACe,cAAN;AACA,WAAOd,MAAM,CAAC4B,UAAP,CAAkBD,QAAlB,CAAP;AACD;AACF","sourcesContent":["import { Block, Text } from 'slate';\nimport isHotkey from 'is-hotkey';\n\nexport default onKeyDown;\n\nfunction onKeyDown(event, change) {\n  const createDefaultBlock = () => {\n    return Block.create({\n      type: 'paragraph',\n      nodes: [Text.create('')],\n    });\n  };\n\n  if (isHotkey('Enter', event)) {\n    /**\n     * If \"Enter\" is pressed while a single void block is selected, a new\n     * paragraph should be added above or below it, and the current selection\n     * (range) should be collapsed to the start of the new paragraph.\n     *\n     * If the selected block is the first block in the document, create the\n     * new block above it. If not, create the new block below it.\n     */\n    const { document: doc, anchorBlock, focusBlock } = change.value;\n    const singleBlockSelected = anchorBlock === focusBlock;\n    if (!singleBlockSelected || !focusBlock.isVoid) return;\n\n    event.preventDefault();\n\n    const focusBlockParent = doc.getParent(focusBlock.key);\n    const focusBlockIndex = focusBlockParent.nodes.indexOf(focusBlock);\n    const focusBlockIsFirstChild = focusBlockIndex === 0;\n\n    const newBlock = createDefaultBlock();\n    const newBlockIndex = focusBlockIsFirstChild ? 0 : focusBlockIndex + 1;\n\n    return change\n      .insertNodeByKey(focusBlockParent.key, newBlockIndex, newBlock)\n      .collapseToStartOf(newBlock);\n  }\n\n  const marks = [['b', 'bold'], ['i', 'italic'], ['s', 'strikethrough'], ['`', 'code']];\n\n  const [, markName] = marks.find(([key]) => isHotkey(`mod+${key}`, event)) || [];\n\n  if (markName) {\n    event.preventDefault();\n    return change.toggleMark(markName);\n  }\n}\n"],"file":"keys.js"}