{"version":3,"sources":["../../../src/MarkdownControl/RawEditor.js"],"names":["styleStrings","slateRaw","lengths","richTextEditorMinHeight","fonts","mono","editorStyleVars","stickyDistanceBottom","RawEditorContainer","RawEditor","React","Component","constructor","props","change","state","value","document","equals","handleDocumentChange","setState","Plain","serialize","onChange","e","data","text","fragment","deserialize","insertFragment","onMode","shouldComponentUpdate","nextProps","nextState","render","className","field","handleToggleMode","get","css","cx","handleChange","handlePaste","propTypes","PropTypes","func","isRequired","string","ImmutablePropTypes","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport styled from '@emotion/styled';\nimport { ClassNames } from '@emotion/core';\nimport { Editor as Slate } from 'slate-react';\nimport Plain from 'slate-plain-serializer';\nimport { debounce } from 'lodash';\nimport { lengths, fonts } from 'netlify-cms-ui-default';\nimport { editorStyleVars, EditorControlBar } from '../styles';\nimport Toolbar from './Toolbar';\n\nconst styleStrings = {\n  slateRaw: `\n    position: relative;\n    overflow: hidden;\n    overflow-x: auto;\n    min-height: ${lengths.richTextEditorMinHeight};\n    font-family: ${fonts.mono};\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    border-top: 0;\n    margin-top: -${editorStyleVars.stickyDistanceBottom};\n  `,\n};\n\nconst RawEditorContainer = styled.div`\n  position: relative;\n`;\n\nexport default class RawEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: Plain.deserialize(this.props.value || ''),\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !this.state.value.equals(nextState.value);\n  }\n\n  handleChange = change => {\n    if (!this.state.value.document.equals(change.value.document)) {\n      this.handleDocumentChange(change);\n    }\n    this.setState({ value: change.value });\n  };\n\n  /**\n   * When the document value changes, serialize from Slate's AST back to plain\n   * text (which is Markdown) and pass that up as the new value.\n   */\n  handleDocumentChange = debounce(change => {\n    const value = Plain.serialize(change.value);\n    this.props.onChange(value);\n  }, 150);\n\n  /**\n   * If a paste contains plain text, deserialize it to Slate's AST and insert\n   * to the document. Selection logic (where to insert, whether to replace) is\n   * handled by Slate.\n   */\n  handlePaste = (e, data, change) => {\n    if (data.text) {\n      const fragment = Plain.deserialize(data.text).document;\n      return change.insertFragment(fragment);\n    }\n  };\n\n  handleToggleMode = () => {\n    this.props.onMode('visual');\n  };\n\n  render() {\n    const { className, field } = this.props;\n    return (\n      <RawEditorContainer>\n        <EditorControlBar>\n          <Toolbar\n            onToggleMode={this.handleToggleMode}\n            buttons={field.get('buttons')}\n            disabled\n            rawMode\n          />\n        </EditorControlBar>\n        <ClassNames>\n          {({ css, cx }) => (\n            <Slate\n              className={cx(\n                className,\n                css`\n                  ${styleStrings.slateRaw}\n                `,\n              )}\n              value={this.state.value}\n              onChange={this.handleChange}\n              onPaste={this.handlePaste}\n            />\n          )}\n        </ClassNames>\n      </RawEditorContainer>\n    );\n  }\n}\n\nRawEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onMode: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  field: ImmutablePropTypes.map.isRequired,\n};\n"],"file":"RawEditor.js"}