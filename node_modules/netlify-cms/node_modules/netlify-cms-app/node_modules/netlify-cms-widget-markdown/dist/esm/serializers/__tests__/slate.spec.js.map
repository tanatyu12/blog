{"version":3,"sources":["../../../../src/serializers/__tests__/slate.spec.js"],"names":["process","markdownToSlate","slateToMarkdown","describe","it","expect","toEqual","slateAst","object","type","nodes","data","undefined","leaves","text","marks"],"mappings":"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","sourcesContent":["import { flow } from 'lodash';\nimport { markdownToSlate, slateToMarkdown } from '../index';\n\nconst process = flow([markdownToSlate, slateToMarkdown]);\n\ndescribe('slate', () => {\n  it('should not decode encoded html entities in inline code', () => {\n    expect(process('<code>&lt;div&gt;</code>')).toEqual('<code>&lt;div&gt;</code>');\n  });\n\n  it('should parse non-text children of mark nodes', () => {\n    expect(process('**a[b](c)d**')).toEqual('**a[b](c)d**');\n    expect(process('**[a](b)**')).toEqual('**[a](b)**');\n    expect(process('**![a](b)**')).toEqual('**![a](b)**');\n    expect(process('_`a`_')).toEqual('_`a`_');\n    expect(process('_`a`b_')).toEqual('_`a`b_');\n  });\n\n  it('should condense adjacent, identically styled text and inline nodes', () => {\n    expect(process('**a ~~b~~~~c~~**')).toEqual('**a ~~bc~~**');\n    expect(process('**a ~~b~~~~[c](d)~~**')).toEqual('**a ~~b[c](d)~~**');\n  });\n\n  it('should handle nested markdown entities', () => {\n    expect(process('**a**b**c**')).toEqual('**a**b**c**');\n    expect(process('**a _b_ c**')).toEqual('**a _b_ c**');\n  });\n\n  it('should parse inline images as images', () => {\n    expect(process('a ![b](c)')).toEqual('a ![b](c)');\n  });\n\n  it('should not escape markdown entities in html', () => {\n    expect(process('<span>*</span>')).toEqual('<span>*</span>');\n  });\n\n  it('should not produce invalid markdown when a styled block has trailing whitespace', () => {\n    const slateAst = {\n      object: 'block',\n      type: 'root',\n      nodes: [\n        {\n          object: 'block',\n          type: 'paragraph',\n          nodes: [\n            {\n              object: 'text',\n              data: undefined,\n              leaves: [\n                {\n                  text: 'foo ', // <--\n                  marks: [{ type: 'bold' }],\n                },\n              ],\n            },\n            { object: 'text', data: undefined, leaves: [{ text: 'bar' }] },\n          ],\n        },\n      ],\n    };\n    expect(slateToMarkdown(slateAst)).toEqual('**foo** bar');\n  });\n\n  it('should not produce invalid markdown when a styled block has leading whitespace', () => {\n    const slateAst = {\n      object: 'block',\n      type: 'root',\n      nodes: [\n        {\n          object: 'block',\n          type: 'paragraph',\n          nodes: [\n            { object: 'text', data: undefined, leaves: [{ text: 'foo' }] },\n            {\n              object: 'text',\n              data: undefined,\n              leaves: [\n                {\n                  text: ' bar', // <--\n                  marks: [{ type: 'bold' }],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n    expect(slateToMarkdown(slateAst)).toEqual('foo **bar**');\n  });\n});\n"],"file":"slate.spec.js"}