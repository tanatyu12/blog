{"version":3,"sources":["../../../src/serializers/remarkAllowHtmlEntities.js"],"names":["remarkAllowHtmlEntities","Parser","prototype","inlineTokenizers","text","eat","value","silent","self","methods","tokenizers","index","length","subvalue","position","tokenizer","name","min","inlineMethods","locator","file","fail","call","slice","type"],"mappings":";;;;;;;AAAe,SAASA,uBAAT,GAAmC;AAChD,OAAKC,MAAL,CAAYC,SAAZ,CAAsBC,gBAAtB,CAAuCC,IAAvC,GAA8CA,IAA9C;AAEA;;;;;AAIA,WAASA,IAAT,CAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAChC,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,OAAJ;AACA,QAAIC,UAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,GAAJ;AAEA;;AACA,QAAIV,MAAJ,EAAY;AACV,aAAO,IAAP;AACD;;AAEDE,IAAAA,OAAO,GAAGD,IAAI,CAACU,aAAf;AACAN,IAAAA,MAAM,GAAGH,OAAO,CAACG,MAAjB;AACAF,IAAAA,UAAU,GAAGF,IAAI,CAACL,gBAAlB;AACAQ,IAAAA,KAAK,GAAG,CAAC,CAAT;AACAM,IAAAA,GAAG,GAAGX,KAAK,CAACM,MAAZ;;AAEA,WAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvBI,MAAAA,IAAI,GAAGP,OAAO,CAACE,KAAD,CAAd;;AAEA,UAAIK,IAAI,KAAK,MAAT,IAAmB,CAACN,UAAU,CAACM,IAAD,CAAlC,EAA0C;AACxC;AACD;;AAEDD,MAAAA,SAAS,GAAGL,UAAU,CAACM,IAAD,CAAV,CAAiBG,OAA7B;;AAEA,UAAI,CAACJ,SAAL,EAAgB;AACdV,QAAAA,GAAG,CAACe,IAAJ,CAASC,IAAT,CAAc,uBAAuBL,IAAvB,GAA8B,GAA5C;AACD;;AAEDF,MAAAA,QAAQ,GAAGC,SAAS,CAACO,IAAV,CAAed,IAAf,EAAqBF,KAArB,EAA4B,CAA5B,CAAX;;AAEA,UAAIQ,QAAQ,KAAK,CAAC,CAAd,IAAmBA,QAAQ,GAAGG,GAAlC,EAAuC;AACrCA,QAAAA,GAAG,GAAGH,QAAN;AACD;AACF;;AAEDD,IAAAA,QAAQ,GAAGP,KAAK,CAACiB,KAAN,CAAY,CAAZ,EAAeN,GAAf,CAAX;AAEAZ,IAAAA,GAAG,CAACQ,QAAD,CAAH,CAAc;AACZW,MAAAA,IAAI,EAAE,MADM;AAEZlB,MAAAA,KAAK,EAAEO;AAFK,KAAd;AAID;AACF","sourcesContent":["export default function remarkAllowHtmlEntities() {\n  this.Parser.prototype.inlineTokenizers.text = text;\n\n  /**\n   * This is a port of the `remark-parse` text tokenizer, adapted to exclude\n   * HTML entity decoding.\n   */\n  function text(eat, value, silent) {\n    var self = this;\n    var methods;\n    var tokenizers;\n    var index;\n    var length;\n    var subvalue;\n    var position;\n    var tokenizer;\n    var name;\n    var min;\n\n    /* istanbul ignore if - never used (yet) */\n    if (silent) {\n      return true;\n    }\n\n    methods = self.inlineMethods;\n    length = methods.length;\n    tokenizers = self.inlineTokenizers;\n    index = -1;\n    min = value.length;\n\n    while (++index < length) {\n      name = methods[index];\n\n      if (name === 'text' || !tokenizers[name]) {\n        continue;\n      }\n\n      tokenizer = tokenizers[name].locator;\n\n      if (!tokenizer) {\n        eat.file.fail('Missing locator: `' + name + '`');\n      }\n\n      position = tokenizer.call(self, value, 1);\n\n      if (position !== -1 && position < min) {\n        min = position;\n      }\n    }\n\n    subvalue = value.slice(0, min);\n\n    eat(subvalue)({\n      type: 'text',\n      value: subvalue,\n    });\n  }\n}\n"],"file":"remarkAllowHtmlEntities.js"}