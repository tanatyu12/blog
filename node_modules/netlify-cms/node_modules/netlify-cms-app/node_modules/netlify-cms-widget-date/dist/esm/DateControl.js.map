{"version":3,"sources":["../../src/DateControl.js"],"names":["DateControl","React","Component","getFormats","datetime","moment","isMoment","Date","isValidDate","onChange","props","format","formats","formattedValue","value","toDate","setInactiveStyle","parsedDate","isValid","handleChange","window","alert","field","includeTime","get","dateFormat","timeFormat","componentDidMount","setTimeout","render","forID","classNameWrapper","setActiveStyle","css","reactDateTimeStyles","onBlur","className","id","PropTypes","object","isRequired","string","func","oneOfType","bool"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsx, css } from '@emotion/core';\nimport reactDateTimeStyles from 'react-datetime/css/react-datetime.css';\nimport DateTime from 'react-datetime';\nimport moment from 'moment';\n\nexport default class DateControl extends React.Component {\n  static propTypes = {\n    field: PropTypes.object.isRequired,\n    forID: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    classNameWrapper: PropTypes.string.isRequired,\n    setActiveStyle: PropTypes.func.isRequired,\n    setInactiveStyle: PropTypes.func.isRequired,\n    value: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    includeTime: PropTypes.bool,\n  };\n\n  getFormats() {\n    const { field, includeTime } = this.props;\n    const format = field.get('format');\n\n    // dateFormat and timeFormat are strictly for modifying\n    // input field with the date/time pickers\n    const dateFormat = field.get('dateFormat');\n    // show time-picker? false hides it, true shows it using default format\n    let timeFormat = field.get('timeFormat');\n    if (typeof timeFormat === 'undefined') {\n      timeFormat = !!includeTime;\n    }\n\n    return {\n      format,\n      dateFormat,\n      timeFormat,\n    };\n  }\n\n  formats = this.getFormats();\n\n  componentDidMount() {\n    const { value } = this.props;\n\n    /**\n     * Set the current date as default value if no default value is provided. An\n     * empty string means the value is intentionally blank.\n     */\n    if (!value && value !== '') {\n      setTimeout(() => {\n        this.handleChange(new Date());\n      }, 0);\n    }\n  }\n\n  // Date is valid if datetime is a moment or Date object otherwise it's a string.\n  // Handle the empty case, if the user wants to empty the field.\n  isValidDate = datetime =>\n    moment.isMoment(datetime) || datetime instanceof Date || datetime === '';\n\n  handleChange = datetime => {\n    /**\n     * Set the date only if it is valid.\n     */\n    if (!this.isValidDate(datetime)) {\n      return;\n    }\n\n    const { onChange } = this.props;\n    const { format } = this.formats;\n\n    /**\n     * Produce a formatted string only if a format is set in the config.\n     * Otherwise produce a date object.\n     */\n    if (format) {\n      const formattedValue = moment(datetime).format(format);\n      onChange(formattedValue);\n    } else {\n      const value = moment.isMoment(datetime) ? datetime.toDate() : datetime;\n      onChange(value);\n    }\n  };\n\n  onBlur = datetime => {\n    const { setInactiveStyle } = this.props;\n\n    if (!this.isValidDate(datetime)) {\n      const parsedDate = moment(datetime);\n\n      if (parsedDate.isValid()) {\n        this.handleChange(datetime);\n      } else {\n        window.alert('The date you entered is invalid.');\n      }\n    }\n\n    setInactiveStyle();\n  };\n\n  render() {\n    const { forID, value, classNameWrapper, setActiveStyle } = this.props;\n    const { format, dateFormat, timeFormat } = this.formats;\n    return (\n      <div\n        css={css`\n          ${reactDateTimeStyles};\n        `}\n      >\n        <DateTime\n          dateFormat={dateFormat}\n          timeFormat={timeFormat}\n          value={moment(value, format)}\n          onChange={this.handleChange}\n          onFocus={setActiveStyle}\n          onBlur={this.onBlur}\n          inputProps={{ className: classNameWrapper, id: forID }}\n        />\n      </div>\n    );\n  }\n}\n"],"file":"DateControl.js"}