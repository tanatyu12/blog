{"version":3,"sources":["../../src/SelectControl.js"],"names":["optionToString","option","value","convertToOption","raw","label","Map","isMap","toJS","getSelectedValue","options","isMultiple","selectedOptions","List","isList","Array","isArray","map","i","find","o","filter","Boolean","SelectControl","React","Component","selectedOption","props","onChange","field","get","length","render","forID","classNameWrapper","setActiveStyle","setInactiveStyle","fieldOptions","isClearable","selectedValue","handleChange","reactSelectStyles","PropTypes","func","isRequired","node","string","ImmutablePropTypes","contains","listOf","oneOfType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { Map, List, fromJS } from 'immutable';\nimport { find } from 'lodash';\nimport Select from 'react-select';\nimport { reactSelectStyles } from 'netlify-cms-ui-default';\n\nfunction optionToString(option) {\n  return option && option.value ? option.value : null;\n}\n\nfunction convertToOption(raw) {\n  if (typeof raw === 'string') {\n    return { label: raw, value: raw };\n  }\n  return Map.isMap(raw) ? raw.toJS() : raw;\n}\n\nfunction getSelectedValue({ value, options, isMultiple }) {\n  if (isMultiple) {\n    const selectedOptions = List.isList(value) ? value.toJS() : value;\n\n    if (!selectedOptions || !Array.isArray(selectedOptions)) {\n      return null;\n    }\n\n    return selectedOptions\n      .map(i => options.find(o => o.value === (i.value || i)))\n      .filter(Boolean)\n      .map(convertToOption);\n  } else {\n    return find(options, ['value', value]) || null;\n  }\n}\n\nexport default class SelectControl extends React.Component {\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.node,\n    forID: PropTypes.string.isRequired,\n    classNameWrapper: PropTypes.string.isRequired,\n    setActiveStyle: PropTypes.func.isRequired,\n    setInactiveStyle: PropTypes.func.isRequired,\n    field: ImmutablePropTypes.contains({\n      options: ImmutablePropTypes.listOf(\n        PropTypes.oneOfType([\n          PropTypes.string,\n          ImmutablePropTypes.contains({\n            label: PropTypes.string.isRequired,\n            value: PropTypes.string.isRequired,\n          }),\n        ]),\n      ).isRequired,\n    }),\n  };\n\n  handleChange = selectedOption => {\n    const { onChange, field } = this.props;\n    const isMultiple = field.get('multiple', false);\n\n    if (Array.isArray(selectedOption)) {\n      if (!isMultiple && selectedOption.length === 0) {\n        onChange(null);\n      } else {\n        onChange(fromJS(selectedOption.map(optionToString)));\n      }\n    } else {\n      onChange(optionToString(selectedOption));\n    }\n  };\n\n  render() {\n    const { field, value, forID, classNameWrapper, setActiveStyle, setInactiveStyle } = this.props;\n    const fieldOptions = field.get('options');\n    const isMultiple = field.get('multiple', false);\n    const isClearable = !field.get('required', true) || isMultiple;\n\n    if (!fieldOptions) {\n      return <div>Error rendering select control for {field.get('name')}: No options</div>;\n    }\n\n    const options = [...fieldOptions.map(convertToOption)];\n    const selectedValue = getSelectedValue({\n      options,\n      value,\n      isMultiple,\n    });\n\n    return (\n      <Select\n        inputId={forID}\n        value={selectedValue}\n        onChange={this.handleChange}\n        className={classNameWrapper}\n        onFocus={setActiveStyle}\n        onBlur={setInactiveStyle}\n        options={options}\n        styles={reactSelectStyles}\n        isMulti={isMultiple}\n        isClearable={isClearable}\n        placeholder=\"\"\n      />\n    );\n  }\n}\n"],"file":"SelectControl.js"}