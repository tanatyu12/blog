{"version":3,"sources":["../../src/API.js"],"names":["API","constructor","config","req","unsentRequest","withRoot","api_root","withTimestamp","buildRequest","requestFunction","p","catch","err","Promise","reject","APIError","message","withDefaultHeaders","request","format","response","repoURL","status","Error","ok","type","file","name","path","commit","hash","id","files","filter","isFile","map","processFile","sha","ref","branch","parseText","cacheKey","cachedFile","localForage","getItem","result","url","cache","then","setItem","jsonResponse","count","size","index","page","pageSize","pagelen","next","prev","previous","entries","values","pageCount","Math","ceil","undefined","cursor","Cursor","create","actions","meta","data","links","withParams","sort","requestJSON","getEntriesAndCursor","processFiles","action","newCursor","getIn","listFiles","initialCursor","initialEntries","currentCursor","has","traverseCursor","newEntries","push","item","commitMessage","contentBlob","Blob","raw","formData","FormData","append","commitAuthor","email","withMethod","withBody","uploaded","all","uploadBlob","body","repo","performRequest","hasWriteAccess"],"mappings":"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","sourcesContent":["import { flow, get } from 'lodash';\nimport {\n  localForage,\n  unsentRequest,\n  responseParser,\n  then,\n  basename,\n  Cursor,\n  APIError,\n} from 'netlify-cms-lib-util';\n\nexport default class API {\n  constructor(config) {\n    this.api_root = config.api_root || 'https://api.bitbucket.org/2.0';\n    this.branch = config.branch || 'master';\n    this.repo = config.repo || '';\n    this.requestFunction = config.requestFunction || unsentRequest.performRequest;\n    // Allow overriding this.hasWriteAccess\n    this.hasWriteAccess = config.hasWriteAccess || this.hasWriteAccess;\n    this.repoURL = this.repo ? `/repositories/${this.repo}` : '';\n  }\n\n  buildRequest = req =>\n    flow([unsentRequest.withRoot(this.api_root), unsentRequest.withTimestamp])(req);\n\n  request = req =>\n    flow([\n      this.buildRequest,\n      this.requestFunction,\n      p => p.catch(err => Promise.reject(new APIError(err.message, null, 'BitBucket'))),\n    ])(req);\n\n  requestJSON = req =>\n    flow([\n      unsentRequest.withDefaultHeaders({ 'Content-Type': 'application/json' }),\n      this.request,\n      then(responseParser({ format: 'json' })),\n      p => p.catch(err => Promise.reject(new APIError(err.message, null, 'BitBucket'))),\n    ])(req);\n  requestText = req =>\n    flow([\n      unsentRequest.withDefaultHeaders({ 'Content-Type': 'text/plain' }),\n      this.request,\n      then(responseParser({ format: 'text' })),\n      p => p.catch(err => Promise.reject(new APIError(err.message, null, 'BitBucket'))),\n    ])(req);\n\n  user = () => this.request('/user');\n\n  hasWriteAccess = async () => {\n    const response = await this.request(this.repoURL);\n    if (response.status === 404) {\n      throw Error('Repo not found');\n    }\n    return response.ok;\n  };\n\n  isFile = ({ type }) => type === 'commit_file';\n  processFile = file => ({\n    ...file,\n    name: basename(file.path),\n\n    // BitBucket does not return file SHAs, but it does give us the\n    // commit SHA. Since the commit SHA will change if any files do,\n    // we can construct an ID using the commit SHA and the file path\n    // that will help with caching (though not as well as a normal\n    // SHA, since it will change even if the individual file itself\n    // doesn't.)\n    ...(file.commit && file.commit.hash ? { id: `${file.commit.hash}/${file.path}` } : {}),\n  });\n  processFiles = files => files.filter(this.isFile).map(this.processFile);\n\n  readFile = async (path, sha, { ref = this.branch, parseText = true } = {}) => {\n    const cacheKey = parseText ? `bb.${sha}` : `bb.${sha}.blob`;\n    const cachedFile = sha ? await localForage.getItem(cacheKey) : null;\n    if (cachedFile) {\n      return cachedFile;\n    }\n    const result = await this.request({\n      url: `${this.repoURL}/src/${ref}/${path}`,\n      cache: 'no-store',\n    }).then(parseText ? responseParser({ format: 'text' }) : responseParser({ format: 'blob' }));\n    if (sha) {\n      localForage.setItem(cacheKey, result);\n    }\n    return result;\n  };\n\n  getEntriesAndCursor = jsonResponse => {\n    const {\n      size: count,\n      page: index,\n      pagelen: pageSize,\n      next,\n      previous: prev,\n      values: entries,\n    } = jsonResponse;\n    const pageCount = pageSize && count ? Math.ceil(count / pageSize) : undefined;\n    return {\n      entries,\n      cursor: Cursor.create({\n        actions: [...(next ? ['next'] : []), ...(prev ? ['prev'] : [])],\n        meta: { index, count, pageSize, pageCount },\n        data: { links: { next, prev } },\n      }),\n    };\n  };\n\n  listFiles = async path => {\n    const { entries, cursor } = await flow([\n      // sort files by filename ascending\n      unsentRequest.withParams({ sort: '-path' }),\n      this.requestJSON,\n      then(this.getEntriesAndCursor),\n    ])(`${this.repoURL}/src/${this.branch}/${path}`);\n    return { entries: this.processFiles(entries), cursor };\n  };\n\n  traverseCursor = async (cursor, action) =>\n    flow([\n      this.requestJSON,\n      then(this.getEntriesAndCursor),\n      then(({ cursor: newCursor, entries }) => ({\n        cursor: newCursor,\n        entries: this.processFiles(entries),\n      })),\n    ])(cursor.data.getIn(['links', action]));\n\n  listAllFiles = async path => {\n    const { cursor: initialCursor, entries: initialEntries } = await this.listFiles(path);\n    const entries = [...initialEntries];\n    let currentCursor = initialCursor;\n    while (currentCursor && currentCursor.actions.has('next')) {\n      const { cursor: newCursor, entries: newEntries } = await this.traverseCursor(\n        currentCursor,\n        'next',\n      );\n      entries.push(...newEntries);\n      currentCursor = newCursor;\n    }\n    return this.processFiles(entries);\n  };\n\n  uploadBlob = async (item, { commitMessage, branch = this.branch } = {}) => {\n    const contentBlob = get(item, 'fileObj', new Blob([item.raw]));\n    const formData = new FormData();\n    // Third param is filename header, in case path is `message`, `branch`, etc.\n    formData.append(item.path, contentBlob, basename(item.path));\n    formData.append('branch', branch);\n    if (commitMessage) {\n      formData.append('message', commitMessage);\n    }\n    if (this.commitAuthor) {\n      const { name, email } = this.commitAuthor;\n      formData.append('author', `${name} <${email}>`);\n    }\n\n    return flow([\n      unsentRequest.withMethod('POST'),\n      unsentRequest.withBody(formData),\n      this.request,\n      then(() => ({ ...item, uploaded: true })),\n    ])(`${this.repoURL}/src`);\n  };\n\n  persistFiles = (files, { commitMessage }) =>\n    Promise.all(\n      files\n        .filter(({ uploaded }) => !uploaded)\n        .map(file => this.uploadBlob(file, { commitMessage })),\n    );\n\n  deleteFile = (path, message, { branch = this.branch } = {}) => {\n    const body = new FormData();\n    body.append('files', path);\n    body.append('branch', branch);\n    if (message) {\n      body.append('message', message);\n    }\n    if (this.commitAuthor) {\n      const { name, email } = this.commitAuthor;\n      body.append('author', `${name} <${email}>`);\n    }\n    return flow([unsentRequest.withMethod('POST'), unsentRequest.withBody(body), this.request])(\n      `${this.repoURL}/src`,\n    );\n  };\n}\n"],"file":"API.js"}