"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var DragSourceMonitorImpl_1 = require("../../DragSourceMonitorImpl");
var registerSource_1 = require("../../registerSource");
var invariant = require('invariant');
function useDragSourceMonitor(manager, sourceSpec) {
    var sourceSpecRef = react_1.useRef(sourceSpec);
    react_1.useEffect(function () {
        sourceSpecRef.current = sourceSpec;
    });
    var monitor = react_1.useMemo(function () { return new DragSourceMonitorImpl_1.default(manager); }, [manager]);
    react_1.useEffect(function registerSourceWithMonitor() {
        var _a = registerSource_1.default(sourceSpec.item.type, handler, manager), handlerId = _a.handlerId, unregister = _a.unregister;
        monitor.receiveHandlerId(handlerId);
        return unregister;
    }, [monitor]);
    // Can't use createSourceFactory, as semantics are different
    var handler = react_1.useMemo(function () {
        return ({
            beginDrag: function () {
                var _a = sourceSpecRef.current, begin = _a.begin, item = _a.item;
                if (begin) {
                    var beginResult = begin(monitor);
                    invariant(beginResult == null || typeof beginResult === 'object', 'dragSpec.begin() must either return an object, undefined, or null');
                    return beginResult || item || {};
                }
                return item || {};
            },
            canDrag: function () {
                var canDrag = sourceSpecRef.current.canDrag;
                return canDrag ? canDrag(monitor) : true;
            },
            isDragging: function (globalMonitor, target) {
                var isDragging = sourceSpecRef.current.isDragging;
                return isDragging
                    ? isDragging(monitor)
                    : target === globalMonitor.getSourceId();
            },
            endDrag: function () {
                var end = sourceSpecRef.current.end;
                if (end) {
                    end(monitor.getItem(), monitor);
                }
            },
        });
    }, []);
    return monitor;
}
exports.useDragSourceMonitor = useDragSourceMonitor;
