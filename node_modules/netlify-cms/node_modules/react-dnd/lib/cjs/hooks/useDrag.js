"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useDragSourceMonitor_1 = require("./internal/useDragSourceMonitor");
var useDragDropManager_1 = require("./internal/useDragDropManager");
var util_1 = require("./util");
var useMonitorOutput_1 = require("./internal/useMonitorOutput");
var invariant = require('invariant');
/**
 * useDragSource hook (This API is experimental and subject to breaking changes in non-major versions)
 * @param sourceSpec The drag source specification *
 */
function useDrag(spec) {
    var item = spec.item, options = spec.options, preview = spec.preview, previewOptions = spec.previewOptions, collect = spec.collect;
    var ref = spec.ref;
    invariant(item != null, 'item must be defined');
    invariant(item.type != null, 'item type must be defined');
    var manager = useDragDropManager_1.useDragDropManager();
    var backend = manager.getBackend();
    var monitor = useDragSourceMonitor_1.useDragSourceMonitor(manager, spec);
    if (!ref) {
        ref = react_1.useRef(null);
    }
    /*
     * Connect the Drag Source Element to the Backend
     */
    react_1.useEffect(function connectDragSource() {
        var node = ref.current;
        return backend.connectDragSource(monitor.getHandlerId(), node, options);
    }, []);
    /*
     * Connect the Drag Preview Element to the Backend
     */
    react_1.useEffect(function connectDragPreview() {
        if (preview) {
            var previewNode = util_1.isRef(preview)
                ? preview.current
                : preview;
            return backend.connectDragPreview(monitor.getHandlerId(), previewNode, previewOptions);
        }
    }, [preview && preview.current]);
    var result = collect
        ? useMonitorOutput_1.useMonitorOutput(monitor, collect)
        : {};
    return [result, ref];
}
exports.useDrag = useDrag;
