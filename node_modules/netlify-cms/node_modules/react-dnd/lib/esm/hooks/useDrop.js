import { useEffect, useRef } from 'react';
import { useDragDropManager } from './internal/useDragDropManager';
import { useDropTargetMonitor } from './internal/useDropTargetMonitor';
import { useMonitorOutput } from './internal/useMonitorOutput';
const invariant = require('invariant');
/**
 * useDropTarget Hook (This API is experimental and subject to breaking changes in non-breaking versions)
 * @param spec The drop target specification
 */
export function useDrop(spec) {
    const { accept, options, collect } = spec;
    invariant(accept != null, 'accept must be defined');
    let { ref } = spec;
    if (!ref) {
        ref = useRef(null);
    }
    const manager = useDragDropManager();
    const backend = manager.getBackend();
    const monitor = useDropTargetMonitor(manager, spec);
    /*
     * Connect the Drop Target Element to the Backend
     */
    useEffect(function connectDropTarget() {
        if (ref.current) {
            const node = ref.current;
            if (node) {
                return backend.connectDropTarget(monitor.getHandlerId(), node, options);
            }
        }
    });
    const result = collect
        ? useMonitorOutput(monitor, collect)
        : {};
    return [result, ref];
}
