import { useEffect, useRef } from 'react';
import { useDragSourceMonitor } from './internal/useDragSourceMonitor';
import { useDragDropManager } from './internal/useDragDropManager';
import { isRef } from './util';
import { useMonitorOutput } from './internal/useMonitorOutput';
const invariant = require('invariant');
/**
 * useDragSource hook (This API is experimental and subject to breaking changes in non-major versions)
 * @param sourceSpec The drag source specification *
 */
export function useDrag(spec) {
    const { item, options, preview, previewOptions, collect } = spec;
    let { ref } = spec;
    invariant(item != null, 'item must be defined');
    invariant(item.type != null, 'item type must be defined');
    const manager = useDragDropManager();
    const backend = manager.getBackend();
    const monitor = useDragSourceMonitor(manager, spec);
    if (!ref) {
        ref = useRef(null);
    }
    /*
     * Connect the Drag Source Element to the Backend
     */
    useEffect(function connectDragSource() {
        const node = ref.current;
        return backend.connectDragSource(monitor.getHandlerId(), node, options);
    }, []);
    /*
     * Connect the Drag Preview Element to the Backend
     */
    useEffect(function connectDragPreview() {
        if (preview) {
            const previewNode = isRef(preview)
                ? preview.current
                : preview;
            return backend.connectDragPreview(monitor.getHandlerId(), previewNode, previewOptions);
        }
    }, [preview && preview.current]);
    const result = collect
        ? useMonitorOutput(monitor, collect)
        : {};
    return [result, ref];
}
