{"version":3,"sources":["../../src/index.js"],"names":["window","UPLOADCARE_LIVE","UPLOADCARE_MANUAL_START","USER_AGENT","CDN_BASE_URL","defaultConfig","previewStep","integration","isFileGroup","files","basePatternString","length","mapExpression","val","idx","RegExp","expressions","Array","from","every","exp","some","url","test","getFileGroup","groupId","exec","Promise","resolve","uploadcare","loadFileGroup","done","group","getFiles","value","isArray","Iterable","isIterable","arr","toJS","all","map","getFile","groupPattern","uploaded","startsWith","fileFrom","openDialog","config","handleInsert","promise","then","cdnUrl","count","multiple","urls","init","options","publicKey","globalConfig","baseConfig","UPLOADCARE_PUBLIC_KEY","registerTab","uploadcareTabEffects","show","instanceConfig","allowMultiple","imagesOnly","resolvedConfig","state","result","enableStandalone","uploadcareMediaLibrary","name","NetlifyCmsMediaLibraryUploadcare"],"mappings":"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","sourcesContent":["import uploadcare from 'uploadcare-widget';\nimport uploadcareTabEffects from 'uploadcare-widget-tab-effects';\nimport { Iterable } from 'immutable';\n\nwindow.UPLOADCARE_LIVE = false;\nwindow.UPLOADCARE_MANUAL_START = true;\n\nconst USER_AGENT = 'NetlifyCMS-Uploadcare-MediaLibrary';\nconst CDN_BASE_URL = 'https://ucarecdn.com';\n\n/**\n * Default Uploadcare widget configuration, can be overriden via config.yml.\n */\nconst defaultConfig = {\n  previewStep: true,\n  integration: USER_AGENT,\n};\n\n/**\n * Determine whether an array of urls represents an unaltered set of Uploadcare\n * group urls. If they've been changed or any are missing, a new group will need\n * to be created to represent the current values.\n */\nfunction isFileGroup(files) {\n  const basePatternString = `~${files.length}/nth/`;\n  const mapExpression = (val, idx) => new RegExp(`${basePatternString}${idx}/$`);\n  const expressions = Array.from({ length: files.length }, mapExpression);\n  return expressions.every(exp => files.some(url => exp.test(url)));\n}\n\n/**\n * Returns a fileGroupInfo object wrapped in a promise-like object.\n */\nfunction getFileGroup(files) {\n  /**\n   * Capture the group id from the first file in the files array.\n   */\n  const groupId = new RegExp(`^.+/([^/]+~${files.length})/nth/`).exec(files[0])[1];\n\n  /**\n   * The `openDialog` method handles the jQuery promise object returned by\n   * `fileFrom`, but requires the promise returned by `loadFileGroup` to provide\n   * the result of it's `done` method.\n   */\n  return new Promise(resolve => uploadcare.loadFileGroup(groupId).done(group => resolve(group)));\n}\n\n/**\n * Convert a url or array/List of urls to Uploadcare file objects wrapped in\n * promises, or Uploadcare groups when possible. Output is wrapped in a promise\n * because the value we're returning may be a promise that we created.\n */\nfunction getFiles(value) {\n  if (Array.isArray(value) || Iterable.isIterable(value)) {\n    const arr = Array.isArray(value) ? value : value.toJS();\n    return isFileGroup(arr) ? getFileGroup(arr) : Promise.all(arr.map(val => getFile(val)));\n  }\n  return value && typeof value === 'string' ? getFile(value) : null;\n}\n\n/**\n * Convert a single url to an Uploadcare file object wrapped in a promise-like\n * object. Group urls that get passed here were not a part of a complete and\n * untouched group, so they'll be uploaded as new images (only way to do it).\n */\nfunction getFile(url) {\n  const groupPattern = /~\\d+\\/nth\\/\\d+\\//;\n  const uploaded = url.startsWith(CDN_BASE_URL) && !groupPattern.test(url);\n  return uploadcare.fileFrom(uploaded ? 'uploaded' : 'url', url);\n}\n\n/**\n * Open the standalone dialog. A single instance is created and destroyed for\n * each use.\n */\nfunction openDialog(files, config, handleInsert) {\n  uploadcare.openDialog(files, config).done(({ promise }) =>\n    promise().then(({ cdnUrl, count }) => {\n      if (config.multiple) {\n        const urls = Array.from({ length: count }, (val, idx) => `${cdnUrl}nth/${idx}/`);\n        handleInsert(urls);\n      } else {\n        handleInsert(cdnUrl);\n      }\n    }),\n  );\n}\n\n/**\n * Initialization function will only run once, returns an API object for Netlify\n * CMS to call methods on.\n */\nasync function init({ options = { config: {} }, handleInsert } = {}) {\n  const { publicKey, ...globalConfig } = options.config;\n  const baseConfig = { ...defaultConfig, ...globalConfig };\n\n  window.UPLOADCARE_PUBLIC_KEY = publicKey;\n\n  /**\n   * Register the effects tab by default because the effects tab is awesome. Can\n   * be disabled via config.\n   */\n  uploadcare.registerTab('preview', uploadcareTabEffects);\n\n  return {\n    /**\n     * On show, create a new widget, cache it in the widgets object, and open.\n     * No hide method is provided because the widget doesn't provide it.\n     */\n    show: ({ value, config: instanceConfig = {}, allowMultiple, imagesOnly = false } = {}) => {\n      const config = { ...baseConfig, imagesOnly, ...instanceConfig };\n      const multiple = allowMultiple === false ? false : !!config.multiple;\n      const resolvedConfig = { ...config, multiple };\n      const files = getFiles(value);\n\n      /**\n       * Resolve the promise only if it's ours. Only the jQuery promise objects\n       * from the Uploadcare library will have a `state` method.\n       */\n      if (files && !files.state) {\n        return files.then(result => openDialog(result, resolvedConfig, handleInsert));\n      } else {\n        return openDialog(files, resolvedConfig, handleInsert);\n      }\n    },\n\n    /**\n     * Uploadcare doesn't provide a \"media library\" widget for viewing and\n     * selecting existing files, so we return `false` here so Netlify CMS only\n     * opens the Uploadcare widget when called from an editor control. This\n     * results in the \"Media\" button in the global nav being hidden.\n     */\n    enableStandalone: () => false,\n  };\n}\n\n/**\n * The object that will be registered only needs a (default) name and `init`\n * method. The `init` method returns the API object.\n */\nconst uploadcareMediaLibrary = { name: 'uploadcare', init };\n\nexport const NetlifyCmsMediaLibraryUploadcare = uploadcareMediaLibrary;\nexport default uploadcareMediaLibrary;\n"],"file":"index.js"}