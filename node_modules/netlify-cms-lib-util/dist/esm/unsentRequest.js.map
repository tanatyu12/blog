{"version":3,"sources":["../../src/unsentRequest.js"],"names":["decodeParams","paramsString","split","map","s","decodeURIComponent","update","Map","fromURL","wholeURL","url","allParamsString","params","encodeParams","entrySeq","k","v","encodeURIComponent","join","toURL","req","get","toFetchArguments","delete","toJS","maybeRequestArg","ensureRequestArg","func","ensureRequestArg2","arg","performRequest","fetch","getCurriedRequestProcessor","curry","getPropSetFunctions","path","val","setIn","getIn","getPropMergeFunctions","obj","updateIn","p","merge","withMethod","withDefaultMethod","withBody","withDefaultBody","withParams","withDefaultParams","withHeaders","withDefaultHeaders","absolutePath","RegExp","withRoot","root","test","length","withTimestamp","ts","Date","getTime"],"mappings":"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","sourcesContent":["import { fromJS, List, Map } from 'immutable';\nimport curry from 'lodash/curry';\nimport flow from 'lodash/flow';\nimport isString from 'lodash/isString';\n\nconst decodeParams = paramsString =>\n  List(paramsString.split('&'))\n    .map(s => List(s.split('=')).map(decodeURIComponent))\n    .update(Map);\n\nconst fromURL = wholeURL => {\n  const [url, allParamsString] = wholeURL.split('?');\n  return Map({ url, ...(allParamsString ? { params: decodeParams(allParamsString) } : {}) });\n};\n\nconst encodeParams = params =>\n  params\n    .entrySeq()\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n    .join('&');\n\nconst toURL = req =>\n  `${req.get('url')}${req.get('params') ? `?${encodeParams(req.get('params'))}` : ''}`;\n\nconst toFetchArguments = req => [\n  toURL(req),\n  req\n    .delete('url')\n    .delete('params')\n    .toJS(),\n];\n\nconst maybeRequestArg = req => {\n  if (isString(req)) {\n    return fromURL(req);\n  }\n  if (req) {\n    return fromJS(req);\n  }\n  return Map();\n};\nconst ensureRequestArg = func => req => func(maybeRequestArg(req));\nconst ensureRequestArg2 = func => (arg, req) => func(arg, maybeRequestArg(req));\n\n// This actually performs the built request object\nconst performRequest = ensureRequestArg(req => fetch(...toFetchArguments(req)));\n\n// Each of the following functions takes options and returns another\n// function that performs the requested action on a request. They each\n// default to containing an empty object, so you can simply call them\n// without arguments to generate a request with only those properties.\nconst getCurriedRequestProcessor = flow([ensureRequestArg2, curry]);\nconst getPropSetFunctions = path => [\n  getCurriedRequestProcessor((val, req) => req.setIn(path, val)),\n  getCurriedRequestProcessor((val, req) => (req.getIn(path) ? req : req.setIn(path, val))),\n];\nconst getPropMergeFunctions = path => [\n  getCurriedRequestProcessor((obj, req) => req.updateIn(path, (p = Map()) => p.merge(obj))),\n  getCurriedRequestProcessor((obj, req) => req.updateIn(path, (p = Map()) => Map(obj).merge(p))),\n];\n\nconst [withMethod, withDefaultMethod] = getPropSetFunctions(['method']);\nconst [withBody, withDefaultBody] = getPropSetFunctions(['body']);\nconst [withParams, withDefaultParams] = getPropMergeFunctions(['params']);\nconst [withHeaders, withDefaultHeaders] = getPropMergeFunctions(['headers']);\n\n// withRoot sets a root URL, unless the URL is already absolute\nconst absolutePath = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst withRoot = getCurriedRequestProcessor((root, req) =>\n  req.update('url', p => {\n    if (absolutePath.test(p)) {\n      return p;\n    }\n    return root && p && p[0] !== '/' && root[root.length - 1] !== '/'\n      ? `${root}/${p}`\n      : `${root}${p}`;\n  }),\n);\n\n// withTimestamp needs no argument and has to run as late as possible,\n// so it calls `withParams` only when it's actually called with a\n// request.\nconst withTimestamp = ensureRequestArg(req => withParams({ ts: new Date().getTime() }, req));\n\nexport default {\n  toURL,\n  fromURL,\n  performRequest,\n  withMethod,\n  withDefaultMethod,\n  withBody,\n  withDefaultBody,\n  withHeaders,\n  withDefaultHeaders,\n  withParams,\n  withDefaultParams,\n  withRoot,\n  withTimestamp,\n};\n"],"file":"unsentRequest.js"}