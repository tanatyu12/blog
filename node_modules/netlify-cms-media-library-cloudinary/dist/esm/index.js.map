{"version":3,"sources":["../../src/index.js"],"names":["defaultOptions","use_secure_url","use_transformations","output_filename_only","enforcedConfig","button_class","undefined","inline_container","insert_transformation","z_index","defaultConfig","multiple","getAssetUrl","asset","public_id","format","urlObject","derived","urlKey","init","options","handleInsert","config","providedConfig","integrationOptions","resolvedOptions","cloudinaryConfig","cloudinaryBehaviorConfigKeys","cloudinaryBehaviorConfig","insertHandler","data","assets","map","length","mediaLibrary","window","cloudinary","createMediaLibrary","show","instanceConfig","allowMultiple","hide","enableStandalone","cloudinaryMediaLibrary","name","NetlifyCmsMediaLibraryCloudinary"],"mappings":"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","sourcesContent":["import { pick } from 'lodash';\nimport { loadScript } from 'netlify-cms-lib-util';\n\nconst defaultOptions = {\n  use_secure_url: true,\n  use_transformations: true,\n  output_filename_only: false,\n};\n/**\n * This configuration hash cannot be overriden, as the values here are required\n * for the integration to work properly.\n */\nconst enforcedConfig = {\n  button_class: undefined,\n  inline_container: undefined,\n  insert_transformation: false,\n  z_index: '99999',\n};\n\nconst defaultConfig = {\n  multiple: false,\n};\n\nfunction getAssetUrl(asset, { use_secure_url, use_transformations, output_filename_only }) {\n  /**\n   * Allow output of the file name only, in which case the rest of the url (including)\n   * transformations) can be handled by the static site generator.\n   */\n  if (output_filename_only) {\n    return `${asset.public_id}.${asset.format}`;\n  }\n\n  /**\n   * Get url from `derived` property if it exists. This property contains the\n   * transformed version of image if transformations have been applied.\n   */\n  const urlObject = asset.derived && use_transformations ? asset.derived[0] : asset;\n\n  /**\n   * Retrieve the `https` variant of the image url if the `useSecureUrl` option\n   * is set to `true` (this is the default setting).\n   */\n  const urlKey = use_secure_url ? 'secure_url' : 'url';\n\n  return urlObject[urlKey];\n}\n\nasync function init({ options = {}, handleInsert } = {}) {\n  /**\n   * Configuration is specific to Cloudinary, while options are specific to this\n   * integration.\n   */\n  const { config: providedConfig = {}, ...integrationOptions } = options;\n  const resolvedOptions = { ...defaultOptions, ...integrationOptions };\n  const cloudinaryConfig = { ...defaultConfig, ...providedConfig, ...enforcedConfig };\n  const cloudinaryBehaviorConfigKeys = ['default_transformations', 'max_files', 'multiple'];\n  const cloudinaryBehaviorConfig = pick(cloudinaryConfig, cloudinaryBehaviorConfigKeys);\n\n  await loadScript('https://media-library.cloudinary.com/global/all.js');\n\n  const insertHandler = data => {\n    const assets = data.assets.map(asset => getAssetUrl(asset, resolvedOptions));\n    handleInsert(assets.length > 1 ? assets : assets[0]);\n  };\n\n  const mediaLibrary = window.cloudinary.createMediaLibrary(cloudinaryConfig, { insertHandler });\n\n  return {\n    show: ({ config: instanceConfig = {}, allowMultiple } = {}) => {\n      /**\n       * Ensure multiple selection is not available if the field is configured\n       * to disallow it.\n       */\n      if (allowMultiple === false) {\n        instanceConfig.multiple = false;\n      }\n      return mediaLibrary.show({ ...cloudinaryBehaviorConfig, ...instanceConfig });\n    },\n    hide: () => mediaLibrary.hide(),\n    enableStandalone: () => true,\n  };\n}\n\nconst cloudinaryMediaLibrary = { name: 'cloudinary', init };\n\nexport const NetlifyCmsMediaLibraryCloudinary = cloudinaryMediaLibrary;\nexport default cloudinaryMediaLibrary;\n"],"file":"index.js"}