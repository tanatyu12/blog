{"version":3,"sources":["../../src/netlify-auth.js"],"names":["NETLIFY_API","AUTH_ENDPOINT","NetlifyError","constructor","err","toString","message","PROVIDERS","github","width","height","gitlab","bitbucket","email","Authenticator","config","site_id","base_url","auth_endpoint","handshakeCallback","options","cb","fn","e","data","provider","origin","window","removeEventListener","addEventListener","authorizeCallback","authWindow","postMessage","indexOf","JSON","parse","match","RegExp","close","getSiteID","host","document","location","split","authenticate","siteID","conf","left","screen","top","url","scope","login","beta_invite","invite_code","open","focus","refresh","refresh_token","onError","Promise","reject","bind","refreshPromise","fetch","method","body","then","res","json","catch"],"mappings":"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","sourcesContent":["import trim from 'lodash/trim';\nimport trimEnd from 'lodash/trimEnd';\n\nconst NETLIFY_API = 'https://api.netlify.com';\nconst AUTH_ENDPOINT = 'auth';\n\nclass NetlifyError {\n  constructor(err) {\n    this.err = err;\n  }\n  toString() {\n    return this.err && this.err.message;\n  }\n}\n\nconst PROVIDERS = {\n  github: {\n    width: 960,\n    height: 600,\n  },\n  gitlab: {\n    width: 960,\n    height: 600,\n  },\n  bitbucket: {\n    width: 960,\n    height: 500,\n  },\n  email: {\n    width: 500,\n    height: 400,\n  },\n};\n\nclass Authenticator {\n  constructor(config = {}) {\n    this.site_id = config.site_id || null;\n    this.base_url = trimEnd(config.base_url, '/') || NETLIFY_API;\n    this.auth_endpoint = trim(config.auth_endpoint, '/') || AUTH_ENDPOINT;\n  }\n\n  handshakeCallback(options, cb) {\n    const fn = e => {\n      if (e.data === 'authorizing:' + options.provider && e.origin === this.base_url) {\n        window.removeEventListener('message', fn, false);\n        window.addEventListener('message', this.authorizeCallback(options, cb), false);\n        return this.authWindow.postMessage(e.data, e.origin);\n      }\n    };\n    return fn;\n  }\n\n  authorizeCallback(options, cb) {\n    const fn = e => {\n      if (e.origin !== this.base_url) {\n        return;\n      }\n\n      if (e.data.indexOf('authorization:' + options.provider + ':success:') === 0) {\n        const data = JSON.parse(\n          e.data.match(new RegExp('^authorization:' + options.provider + ':success:(.+)$'))[1],\n        );\n        window.removeEventListener('message', fn, false);\n        this.authWindow.close();\n        cb(null, data);\n      }\n      if (e.data.indexOf('authorization:' + options.provider + ':error:') === 0) {\n        const err = JSON.parse(\n          e.data.match(new RegExp('^authorization:' + options.provider + ':error:(.+)$'))[1],\n        );\n        window.removeEventListener('message', fn, false);\n        this.authWindow.close();\n        cb(new NetlifyError(err));\n      }\n    };\n    return fn;\n  }\n\n  getSiteID() {\n    if (this.site_id) {\n      return this.site_id;\n    }\n    const host = document.location.host.split(':')[0];\n    return host === 'localhost' ? 'cms.netlify.com' : host;\n  }\n\n  authenticate(options, cb) {\n    const { provider } = options;\n    const siteID = this.getSiteID();\n\n    if (!provider) {\n      return cb(\n        new NetlifyError({\n          message: 'You must specify a provider when calling netlify.authenticate',\n        }),\n      );\n    }\n    if (!siteID) {\n      return cb(\n        new NetlifyError({\n          message:\n            \"You must set a site_id with netlify.configure({site_id: 'your-site-id'}) to make authentication work from localhost\",\n        }),\n      );\n    }\n\n    const conf = PROVIDERS[provider] || PROVIDERS.github;\n    const left = screen.width / 2 - conf.width / 2;\n    const top = screen.height / 2 - conf.height / 2;\n    window.addEventListener('message', this.handshakeCallback(options, cb), false);\n    let url = `${this.base_url}/${this.auth_endpoint}?provider=${\n      options.provider\n    }&site_id=${siteID}`;\n    if (options.scope) {\n      url += '&scope=' + options.scope;\n    }\n    if (options.login === true) {\n      url += '&login=true';\n    }\n    if (options.beta_invite) {\n      url += '&beta_invite=' + options.beta_invite;\n    }\n    if (options.invite_code) {\n      url += '&invite_code=' + options.invite_code;\n    }\n    this.authWindow = window.open(\n      url,\n      'Netlify Authorization',\n      `width=${conf.width}, height=${conf.height}, top=${top}, left=${left}`,\n    );\n    this.authWindow.focus();\n  }\n\n  refresh(options, cb) {\n    const { provider, refresh_token } = options;\n    const siteID = this.getSiteID();\n    const onError = cb || Promise.reject.bind(Promise);\n\n    if (!provider || !refresh_token) {\n      return onError(\n        new NetlifyError({\n          message: 'You must specify a provider and refresh token when calling netlify.refresh',\n        }),\n      );\n    }\n    if (!siteID) {\n      return onError(\n        new NetlifyError({\n          message:\n            \"You must set a site_id with netlify.configure({site_id: 'your-site-id'}) to make token refresh work from localhost\",\n        }),\n      );\n    }\n    const url = `${this.base_url}/${\n      this.auth_endpoint\n    }/refresh?provider=${provider}&site_id=${siteID}&refresh_token=${refresh_token}`;\n    const refreshPromise = fetch(url, { method: 'POST', body: '' }).then(res => res.json());\n\n    // Return a promise if a callback wasn't provided\n    if (!cb) {\n      return refreshPromise;\n    }\n\n    // Otherwise, use the provided callback.\n    refreshPromise.then(data => cb(null, data)).catch(cb);\n  }\n}\n\nexport default Authenticator;\n"],"file":"netlify-auth.js"}