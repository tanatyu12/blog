{"version":3,"sources":["../../src/implicit-oauth.js"],"names":["createNonce","nonce","window","sessionStorage","setItem","JSON","stringify","validateNonce","check","auth","getItem","valid","parse","localStorage","removeItem","ImplicitAuthenticator","constructor","config","baseURL","base_url","authEndpoint","auth_endpoint","auth_url","appID","app_id","clearHash","authenticate","options","cb","document","location","protocol","hostname","Error","authURL","URL","searchParams","set","origin","pathname","scope","assign","href","completeAuth","hashParams","URLSearchParams","hash","replace","has","params","entries","validNonce","get","toJS","token","access_token","data"],"mappings":"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","sourcesContent":["import { Map } from 'immutable';\nimport trim from 'lodash/trim';\nimport trimEnd from 'lodash/trimEnd';\nimport uuid from 'uuid/v4';\n\nfunction createNonce() {\n  const nonce = uuid();\n  window.sessionStorage.setItem('netlify-cms-auth', JSON.stringify({ nonce }));\n  return nonce;\n}\n\nfunction validateNonce(check) {\n  const auth = window.sessionStorage.getItem('netlify-cms-auth');\n  const valid = auth && JSON.parse(auth).nonce;\n  window.localStorage.removeItem('netlify-cms-auth');\n  return check === valid;\n}\n\nexport default class ImplicitAuthenticator {\n  constructor(config = {}) {\n    const baseURL = trimEnd(config.base_url, '/');\n    const authEndpoint = trim(config.auth_endpoint, '/');\n    this.auth_url = `${baseURL}/${authEndpoint}`;\n    this.appID = config.app_id;\n    this.clearHash = config.clearHash;\n  }\n\n  authenticate(options, cb) {\n    if (\n      document.location.protocol !== 'https:' &&\n      // TODO: Is insecure localhost a bad idea as well? I don't think it is, since you are not actually\n      //       sending the token over the internet in this case, assuming the auth URL is secure.\n      (document.location.hostname !== 'localhost' && document.location.hostname !== '127.0.0.1')\n    ) {\n      return cb(new Error('Cannot authenticate over insecure protocol!'));\n    }\n\n    const authURL = new URL(this.auth_url);\n    authURL.searchParams.set('client_id', this.appID);\n    authURL.searchParams.set('redirect_uri', document.location.origin + document.location.pathname);\n    authURL.searchParams.set('response_type', 'token');\n    authURL.searchParams.set('scope', options.scope);\n    authURL.searchParams.set('state', createNonce());\n\n    document.location.assign(authURL.href);\n  }\n\n  /**\n   * Complete authentication if we were redirected back to from the provider.\n   */\n  completeAuth(cb) {\n    const hashParams = new URLSearchParams(document.location.hash.replace(/^#?\\/?/, ''));\n    if (!hashParams.has('access_token') && !hashParams.has('error')) {\n      return;\n    }\n    // Remove tokens from hash so that token does not remain in browser history.\n    this.clearHash();\n\n    const params = Map(hashParams.entries());\n\n    const validNonce = validateNonce(params.get('state'));\n    if (!validNonce) {\n      return cb(new Error('Invalid nonce'));\n    }\n\n    if (params.has('error')) {\n      return cb(new Error(`${params.get('error')}: ${params.get('error_description')}`));\n    }\n\n    if (params.has('access_token')) {\n      const { access_token: token, ...data } = params.toJS();\n      cb(null, { token, ...data });\n    }\n  }\n}\n"],"file":"implicit-oauth.js"}