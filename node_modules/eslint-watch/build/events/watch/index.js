"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chokidar = _interopRequireDefault(require("./chokidar"));

var _logger = require("../../logger");

var _eslint = _interopRequireDefault(require("../../eslint"));

var _keyListener = _interopRequireDefault(require("./key-listener"));

var _clear = _interopRequireDefault(require("../../commands/clear"));

var _options = _interopRequireDefault(require("../../cli/options"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const logger = (0, _logger.createLogger)('events:watch');

function lint() {
  return _lint.apply(this, arguments);
}

function _lint() {
  _lint = _asyncToGenerator(function* (options = {}, eslintArgs = []) {
    if (options.clear) {
      /* istanbul ignore next */
      logger.log(_clear.default.run());
    }

    yield _eslint.default.lint(eslintArgs, options);
  });
  return _lint.apply(this, arguments);
}

var _default = {
  listen(opts) {
    const watcher = _chokidar.default.createWatcher(opts._, {
      ignored: opts.watchIgnore
    });

    const _cli$getCli = _options.default.getCli(opts),
          flags = _cli$getCli.flags,
          dirs = _cli$getCli.dirs;

    _keyListener.default.listen(['enter'],
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      yield lint(opts, [...flags, ...dirs]);
    }));

    return watcher.on('ready',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      logger.debug('Ready');
      yield lint(opts, [...flags, ...dirs]);
    }))
    /* istanbul ignore next */
    .on('add', dir => logger.debug(`${dir} added.`)).on('change',
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* (path) {
        logger.debug('Detected change:', path);
        const changed = opts.changed ? [path] : opts._;
        yield lint(opts, [...flags, ...changed]);
      });

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }())
    /* istanbul ignore next */
    .on('error', err => logger.error(err));
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvd2F0Y2gvaW5kZXguanMiXSwibmFtZXMiOlsibG9nZ2VyIiwibGludCIsIm9wdGlvbnMiLCJlc2xpbnRBcmdzIiwiY2xlYXIiLCJsb2ciLCJydW4iLCJlc2xpbnQiLCJsaXN0ZW4iLCJvcHRzIiwid2F0Y2hlciIsIndhdGNoIiwiY3JlYXRlV2F0Y2hlciIsIl8iLCJpZ25vcmVkIiwid2F0Y2hJZ25vcmUiLCJjbGkiLCJnZXRDbGkiLCJmbGFncyIsImRpcnMiLCJrZXkiLCJvbiIsImRlYnVnIiwiZGlyIiwicGF0aCIsImNoYW5nZWQiLCJlcnIiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLE1BQU0sR0FBRywwQkFBYSxjQUFiLENBQWY7O1NBRWVDLEk7Ozs7OzRCQUFmLFdBQW9CQyxPQUFPLEdBQUcsRUFBOUIsRUFBa0NDLFVBQVUsR0FBRyxFQUEvQyxFQUFtRDtBQUNqRCxRQUFJRCxPQUFPLENBQUNFLEtBQVosRUFBbUI7QUFDakI7QUFDQUosTUFBQUEsTUFBTSxDQUFDSyxHQUFQLENBQVdELGVBQU1FLEdBQU4sRUFBWDtBQUNEOztBQUVELFVBQU1DLGdCQUFPTixJQUFQLENBQVlFLFVBQVosRUFBd0JELE9BQXhCLENBQU47QUFDRCxHOzs7O2VBRWM7QUFDYk0sRUFBQUEsTUFBTSxDQUFDQyxJQUFELEVBQU87QUFDWCxVQUFNQyxPQUFPLEdBQUdDLGtCQUFNQyxhQUFOLENBQW9CSCxJQUFJLENBQUNJLENBQXpCLEVBQTRCO0FBQUVDLE1BQUFBLE9BQU8sRUFBRUwsSUFBSSxDQUFDTTtBQUFoQixLQUE1QixDQUFoQjs7QUFEVyx3QkFFYUMsaUJBQUlDLE1BQUosQ0FBV1IsSUFBWCxDQUZiO0FBQUEsVUFFSFMsS0FGRyxlQUVIQSxLQUZHO0FBQUEsVUFFSUMsSUFGSixlQUVJQSxJQUZKOztBQUlYQyx5QkFBSVosTUFBSixDQUFXLENBQUMsT0FBRCxDQUFYO0FBQUE7QUFBQSxzQkFBc0IsYUFBWTtBQUNoQyxZQUFNUCxJQUFJLENBQUNRLElBQUQsRUFBTyxDQUFDLEdBQUdTLEtBQUosRUFBVyxHQUFHQyxJQUFkLENBQVAsQ0FBVjtBQUNELEtBRkQ7O0FBSUEsV0FDRVQsT0FBTyxDQUNKVyxFQURILENBQ00sT0FETjtBQUFBO0FBQUEsc0JBQ2UsYUFBWTtBQUN2QnJCLE1BQUFBLE1BQU0sQ0FBQ3NCLEtBQVAsQ0FBYSxPQUFiO0FBQ0EsWUFBTXJCLElBQUksQ0FBQ1EsSUFBRCxFQUFPLENBQUMsR0FBR1MsS0FBSixFQUFXLEdBQUdDLElBQWQsQ0FBUCxDQUFWO0FBQ0QsS0FKSDtBQUtFO0FBTEYsS0FNR0UsRUFOSCxDQU1NLEtBTk4sRUFNY0UsR0FBRCxJQUFTdkIsTUFBTSxDQUFDc0IsS0FBUCxDQUFjLEdBQUVDLEdBQUksU0FBcEIsQ0FOdEIsRUFPR0YsRUFQSCxDQU9NLFFBUE47QUFBQTtBQUFBO0FBQUEsb0NBT2dCLFdBQU9HLElBQVAsRUFBZ0I7QUFDNUJ4QixRQUFBQSxNQUFNLENBQUNzQixLQUFQLENBQWEsa0JBQWIsRUFBaUNFLElBQWpDO0FBQ0EsY0FBTUMsT0FBTyxHQUFHaEIsSUFBSSxDQUFDZ0IsT0FBTCxHQUFlLENBQUNELElBQUQsQ0FBZixHQUF3QmYsSUFBSSxDQUFDSSxDQUE3QztBQUVBLGNBQU1aLElBQUksQ0FBQ1EsSUFBRCxFQUFPLENBQUMsR0FBR1MsS0FBSixFQUFXLEdBQUdPLE9BQWQsQ0FBUCxDQUFWO0FBQ0QsT0FaSDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWFFO0FBYkYsS0FjR0osRUFkSCxDQWNNLE9BZE4sRUFjZ0JLLEdBQUQsSUFBUzFCLE1BQU0sQ0FBQzJCLEtBQVAsQ0FBYUQsR0FBYixDQWR4QixDQURGO0FBaUJEOztBQTFCWSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdhdGNoIGZyb20gJy4vY2hva2lkYXInO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAnLi4vLi4vbG9nZ2VyJztcbmltcG9ydCBlc2xpbnQgZnJvbSAnLi4vLi4vZXNsaW50JztcbmltcG9ydCBrZXkgZnJvbSAnLi9rZXktbGlzdGVuZXInO1xuaW1wb3J0IGNsZWFyIGZyb20gJy4uLy4uL2NvbW1hbmRzL2NsZWFyJztcbmltcG9ydCBjbGkgZnJvbSAnLi4vLi4vY2xpL29wdGlvbnMnO1xuXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoJ2V2ZW50czp3YXRjaCcpO1xuXG5hc3luYyBmdW5jdGlvbiBsaW50KG9wdGlvbnMgPSB7fSwgZXNsaW50QXJncyA9IFtdKSB7XG4gIGlmIChvcHRpb25zLmNsZWFyKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBsb2dnZXIubG9nKGNsZWFyLnJ1bigpKTtcbiAgfVxuXG4gIGF3YWl0IGVzbGludC5saW50KGVzbGludEFyZ3MsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxpc3RlbihvcHRzKSB7XG4gICAgY29uc3Qgd2F0Y2hlciA9IHdhdGNoLmNyZWF0ZVdhdGNoZXIob3B0cy5fLCB7IGlnbm9yZWQ6IG9wdHMud2F0Y2hJZ25vcmUgfSk7XG4gICAgY29uc3QgeyBmbGFncywgZGlycyB9ID0gY2xpLmdldENsaShvcHRzKTtcblxuICAgIGtleS5saXN0ZW4oWydlbnRlciddLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBsaW50KG9wdHMsIFsuLi5mbGFncywgLi4uZGlyc10pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHdhdGNoZXJcbiAgICAgICAgLm9uKCdyZWFkeScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ1JlYWR5Jyk7XG4gICAgICAgICAgYXdhaXQgbGludChvcHRzLCBbLi4uZmxhZ3MsIC4uLmRpcnNdKTtcbiAgICAgICAgfSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgLm9uKCdhZGQnLCAoZGlyKSA9PiBsb2dnZXIuZGVidWcoYCR7ZGlyfSBhZGRlZC5gKSlcbiAgICAgICAgLm9uKCdjaGFuZ2UnLCBhc3luYyAocGF0aCkgPT4ge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRGV0ZWN0ZWQgY2hhbmdlOicsIHBhdGgpO1xuICAgICAgICAgIGNvbnN0IGNoYW5nZWQgPSBvcHRzLmNoYW5nZWQgPyBbcGF0aF0gOiBvcHRzLl87XG5cbiAgICAgICAgICBhd2FpdCBsaW50KG9wdHMsIFsuLi5mbGFncywgLi4uY2hhbmdlZF0pO1xuICAgICAgICB9KVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAub24oJ2Vycm9yJywgKGVycikgPT4gbG9nZ2VyLmVycm9yKGVycikpXG4gICAgKTtcbiAgfSxcbn07XG4iXX0=